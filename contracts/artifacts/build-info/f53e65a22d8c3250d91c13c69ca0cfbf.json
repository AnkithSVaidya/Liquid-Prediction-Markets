{
	"id": "f53e65a22d8c3250d91c13c69ca0cfbf",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/PredictionMarket.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract MiniPredictionMarket {\r\n    // Single market structure to save space\r\n    uint32 public yesPrice = 5000; // 50.00%\r\n    uint32 public noPrice = 5000;  // 50.00%\r\n    string public question = \"Will BTC reach $100K in 2025?\";\r\n    \r\n    // Simplified position tracking\r\n    mapping(address => mapping(bool => uint)) public positions;\r\n    \r\n    event PositionBought(address buyer, bool isYes, uint amount);\r\n    event PositionSold(address seller, bool isYes, uint amount);\r\n    \r\n    // Buy a position\r\n    function buyPosition(bool isYes) public payable {\r\n        require(msg.value > 0, \"Amount must be positive\");\r\n        \r\n        // Track position\r\n        positions[msg.sender][isYes] += msg.value;\r\n        \r\n        // Simple price update\r\n        if (isYes) {\r\n            yesPrice += 100;\r\n            noPrice -= 100;\r\n        } else {\r\n            yesPrice -= 100;\r\n            noPrice += 100;\r\n        }\r\n        \r\n        emit PositionBought(msg.sender, isYes, msg.value);\r\n    }\r\n    \r\n    // Sell a position\r\n    function sellPosition(bool isYes, uint amount) public {\r\n        require(positions[msg.sender][isYes] >= amount, \"Insufficient position\");\r\n        \r\n        // Reduce position\r\n        positions[msg.sender][isYes] -= amount;\r\n        \r\n        // Update price (opposite of buy)\r\n        if (isYes) {\r\n            yesPrice -= 100;\r\n            noPrice += 100;\r\n        } else {\r\n            yesPrice += 100;\r\n            noPrice -= 100;\r\n        }\r\n        \r\n        // Send tokens back\r\n        payable(msg.sender).transfer(amount);\r\n        \r\n        emit PositionSold(msg.sender, isYes, amount);\r\n    }\r\n    \r\n    // Get user position\r\n    function getUserPosition(address user, bool isYes) public view returns (uint) {\r\n        return positions[user][isYes];\r\n    }\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/PredictionMarket.sol": {
				"MiniPredictionMarket": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "buyer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "isYes",
									"type": "bool"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "PositionBought",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "seller",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "isYes",
									"type": "bool"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "PositionSold",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "isYes",
									"type": "bool"
								}
							],
							"name": "buyPosition",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "user",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "isYes",
									"type": "bool"
								}
							],
							"name": "getUserPosition",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "noPrice",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"name": "positions",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "question",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "isYes",
									"type": "bool"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "sellPosition",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "yesPrice",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "",
									"type": "uint32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isYes\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PositionBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isYes\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PositionSold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isYes\",\"type\":\"bool\"}],\"name\":\"buyPosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isYes\",\"type\":\"bool\"}],\"name\":\"getUserPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noPrice\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"question\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isYes\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sellPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yesPrice\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PredictionMarket.sol\":\"MiniPredictionMarket\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/PredictionMarket.sol\":{\"keccak256\":\"0x531dbcc2acf55793dab03592bbd50c915dca01fad085e6616a13344bed849e98\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80e8524e3827ab8d5517b439eda6ab38e0babe83e0c2ad1be1f3150ab6fbce08\",\"dweb:/ipfs/QmYVS7B3kmE6jJQvDfEBpP7goLhvzx9NuTFMFhmBMHaAtB\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 4,
								"contract": "contracts/PredictionMarket.sol:MiniPredictionMarket",
								"label": "yesPrice",
								"offset": 0,
								"slot": "0",
								"type": "t_uint32"
							},
							{
								"astId": 7,
								"contract": "contracts/PredictionMarket.sol:MiniPredictionMarket",
								"label": "noPrice",
								"offset": 4,
								"slot": "0",
								"type": "t_uint32"
							},
							{
								"astId": 10,
								"contract": "contracts/PredictionMarket.sol:MiniPredictionMarket",
								"label": "question",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							},
							{
								"astId": 16,
								"contract": "contracts/PredictionMarket.sol:MiniPredictionMarket",
								"label": "positions",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_mapping(t_bool,t_uint256))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_bool,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(bool => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_bool,t_uint256)"
							},
							"t_mapping(t_bool,t_uint256)": {
								"encoding": "mapping",
								"key": "t_bool",
								"label": "mapping(bool => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint32": {
								"encoding": "inplace",
								"label": "uint32",
								"numberOfBytes": "4"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 96/65648 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 8309\n// Code size = 25996 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20060]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20060] = a1\n    42: a1 = 0x20070\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20070\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 1)\n    64: jump @22 if a0 == a1\n      : @9 (gas: 9)\n    67: a3 = a1 << 0x20\n    70: a3 = a3 >> 0x20\n    73: a4 = a0 << 0x20\n    76: a4 = a4 >> 0x20\n    79: a4 = a4 + a2\n    82: a3 = a3 - a4\n    85: a4 = a2 << 0x1\n    88: a4 = -a4\n    90: jump @15 if a4 >=u a3\n      : @10 (gas: 1)\n    93: jump @19 if a0 >=u a1\n      : @11 (gas: 1)\n    96: jump @22 if a2 == 0\n      : @12 (gas: 3)\n    99: a2 = a2 + a0\n   102: a3 = a0\n   104: fallthrough\n      : @13 (gas: 6)\n   105: a4 = u8 [a1]\n   107: a1 = a1 + 0x1\n   110: a5 = a3 + 0x1\n   113: u8 [a3] = a4\n   115: a3 = a5\n   117: jump @13 if a5 != a2\n      : @14 (gas: 1)\n   120: jump @22\n      : @15 (gas: 1)\n   122: jump @22 if a2 == 0\n      : @16 (gas: 3)\n   125: a2 = a2 + a0\n   128: a3 = a0\n   130: fallthrough\n      : @17 (gas: 6)\n   131: a4 = u8 [a1]\n   133: a1 = a1 + 0x1\n   136: a5 = a3 + 0x1\n   139: u8 [a3] = a4\n   141: a3 = a5\n   143: jump @17 if a5 != a2\n      : @18 (gas: 1)\n   146: jump @22\n      : @19 (gas: 1)\n   148: jump @22 if a2 == 0\n      : @20 (gas: 2)\n   151: i32 a3 = a2 + 0xffffffffffffffff\n   154: fallthrough\n      : @21 (gas: 7)\n   155: a4 = a1 + a3\n   158: a4 = u8 [a4]\n   160: a2 = a2 + 0xffffffffffffffff\n   163: a5 = a0 + a3\n   166: u8 [a5] = a4\n   168: i32 a3 = a3 + 0xffffffffffffffff\n   171: jump @21 if a2 != 0\n      : @22 (gas: 1)\n   174: ret\n      : @23 (gas: 13)\n   176: sp = sp + 0xffffffffffffffd8\n   179: u64 [sp + 0x20] = ra\n   182: u64 [sp + 0x18] = s0\n   185: u64 [sp + 0x10] = s1\n   188: a2 = u64 [a1]\n   190: u64 [sp + 0x8] = a2\n   193: a2 = u64 [a1 + 0x8]\n   196: u64 [sp] = a2\n   198: s0 = u64 [a1 + 0x10]\n   201: s1 = u64 [a1 + 0x18]\n   204: i32 a0 = a0 + 0\n   206: a1 = 0x20\n   209: ra = 2, jump @0\n      : @24 [@dyn 1] (gas: 71)\n   214: a1 = reverse s1\n   216: a2 = reverse s0\n   218: a3 = u64 [sp]\n   220: a3 = reverse a3\n   222: a4 = u64 [sp + 0x8]\n   225: a4 = reverse a4\n   227: u8 [a0 + 0x18] = a4\n   230: u8 [a0 + 0x10] = a3\n   233: u8 [a0 + 0x8] = a2\n   236: u8 [a0] = a1\n   238: a5 = a4 >> 0x38\n   241: u8 [a0 + 0x1f] = a5\n   244: a5 = a4 >> 0x30\n   247: u8 [a0 + 0x1e] = a5\n   250: a5 = a4 >> 0x28\n   253: u8 [a0 + 0x1d] = a5\n   256: a5 = a4 >> 0x20\n   259: u8 [a0 + 0x1c] = a5\n   262: a5 = a4 >> 0x18\n   265: u8 [a0 + 0x1b] = a5\n   268: a5 = a4 >> 0x10\n   271: u8 [a0 + 0x1a] = a5\n   274: a4 = a4 >> 0x8\n   277: u8 [a0 + 0x19] = a4\n   280: a4 = a3 >> 0x38\n   283: u8 [a0 + 0x17] = a4\n   286: a4 = a3 >> 0x30\n   289: u8 [a0 + 0x16] = a4\n   292: a4 = a3 >> 0x28\n   295: u8 [a0 + 0x15] = a4\n   298: a4 = a3 >> 0x20\n   301: u8 [a0 + 0x14] = a4\n   304: a4 = a3 >> 0x18\n   307: u8 [a0 + 0x13] = a4\n   310: a4 = a3 >> 0x10\n   313: u8 [a0 + 0x12] = a4\n   316: a3 = a3 >> 0x8\n   319: u8 [a0 + 0x11] = a3\n   322: a3 = a2 >> 0x38\n   325: u8 [a0 + 0xf] = a3\n   328: a3 = a2 >> 0x30\n   331: u8 [a0 + 0xe] = a3\n   334: a3 = a2 >> 0x28\n   337: u8 [a0 + 0xd] = a3\n   340: a3 = a2 >> 0x20\n   343: u8 [a0 + 0xc] = a3\n   346: a3 = a2 >> 0x18\n   349: u8 [a0 + 0xb] = a3\n   352: a3 = a2 >> 0x10\n   355: u8 [a0 + 0xa] = a3\n   358: a2 = a2 >> 0x8\n   361: u8 [a0 + 0x9] = a2\n   364: a2 = a1 >> 0x38\n   367: u8 [a0 + 0x7] = a2\n   370: a2 = a1 >> 0x30\n   373: u8 [a0 + 0x6] = a2\n   376: a2 = a1 >> 0x28\n   379: u8 [a0 + 0x5] = a2\n   382: a2 = a1 >> 0x20\n   385: u8 [a0 + 0x4] = a2\n   388: a2 = a1 >> 0x18\n   391: u8 [a0 + 0x3] = a2\n   394: a2 = a1 >> 0x10\n   397: u8 [a0 + 0x2] = a2\n   400: a1 = a1 >> 0x8\n   403: u8 [a0 + 0x1] = a1\n   406: ra = u64 [sp + 0x20]\n   409: s0 = u64 [sp + 0x18]\n   412: s1 = u64 [sp + 0x10]\n   415: sp = sp + 0x28\n   418: ret\n      : @25 (gas: 6)\n   420: sp = sp + 0xfffffffffffffff0\n   423: u64 [sp + 0x8] = ra\n   426: u64 [sp] = s0\n   428: s0 = a0 & 0x1\n   431: ecalli 3 // 'call_data_size'\n   433: fallthrough\n      : @26 (gas: 2)\n   434: u32 [0x20064] = a0\n   439: jump @28 if s0 == 0\n      : @27 (gas: 1)\n   442: ra = 4, jump @29\n      : @28 [@dyn 2] (gas: 1)\n   446: ra = 6, jump @44\n      : @29 [@dyn 3] (gas: 10)\n   451: sp = sp + 0xffffffffffffff40\n   455: u64 [sp + 0xb8] = ra\n   459: u64 [sp + 0xb0] = s0\n   463: u64 [sp + 0xa8] = s1\n   467: s0 = sp + 0xc0\n   471: sp = sp & 0xffffffffffffffe0\n   474: a0 = 0x40\n   477: a1 = 0x20\n   480: s1 = 0x20\n   483: ra = 8, jump @0\n      : @30 [@dyn 4] (gas: 39)\n   488: u8 [a0 + 31] = 0x80\n   493: u8 [a0 + 30] = 0\n   496: u8 [a0 + 29] = 0\n   499: u8 [a0 + 28] = 0\n   502: u8 [a0 + 27] = 0\n   505: u8 [a0 + 26] = 0\n   508: u8 [a0 + 25] = 0\n   511: u8 [a0 + 24] = 0\n   514: u8 [a0 + 23] = 0\n   517: u8 [a0 + 22] = 0\n   520: u8 [a0 + 21] = 0\n   523: u8 [a0 + 20] = 0\n   526: u8 [a0 + 19] = 0\n   529: u8 [a0 + 18] = 0\n   532: u8 [a0 + 17] = 0\n   535: u8 [a0 + 16] = 0\n   538: u8 [a0 + 15] = 0\n   541: u8 [a0 + 14] = 0\n   544: u8 [a0 + 13] = 0\n   547: u8 [a0 + 12] = 0\n   550: u8 [a0 + 11] = 0\n   553: u8 [a0 + 10] = 0\n   556: u8 [a0 + 9] = 0\n   559: u8 [a0 + 8] = 0\n   562: u8 [a0 + 7] = 0\n   565: u8 [a0 + 6] = 0\n   568: u8 [a0 + 5] = 0\n   571: u8 [a0 + 4] = 0\n   574: u8 [a0 + 3] = 0\n   577: u8 [a0 + 2] = 0\n   580: u8 [a0 + 1] = 0\n   583: u8 [a0 + 0] = 0\n   585: u64 [sp + 56] = 0\n   588: u64 [sp + 32] = 0\n   591: u64 [sp + 40] = 0\n   594: u64 [sp + 48] = 0\n   597: i32 a0 = sp + 0x20\n   600: ecalli 13 // 'value_transferred'\n   602: fallthrough\n      : @31 (gas: 8)\n   603: a0 = u64 [sp + 0x30]\n   606: a1 = u64 [sp + 0x38]\n   609: a2 = u64 [sp + 0x28]\n   612: a3 = u64 [sp + 0x20]\n   615: a1 = a1 | a2\n   618: a0 = a0 | a3\n   621: a0 = a0 | a1\n   624: jump @36 if a0 != 0\n      : @32 (gas: 75)\n   628: u64 [sp + 120] = 0\n   631: u64 [sp + 112] = 0\n   634: u64 [sp + 104] = 0\n   637: u64 [sp + 96] = 0\n   640: u64 [sp + 152] = 0\n   644: u64 [sp + 144] = 0\n   648: u64 [sp + 136] = 0\n   652: u64 [sp + 128] = 0\n   656: u32 [sp + 0x40] = s1\n   659: i32 a1 = sp + 0x60\n   662: i32 a3 = sp + 0x80\n   666: i32 a4 = sp + 0x40\n   669: a2 = 0xffffffffffffffff\n   672: ecalli 6 // 'get_storage'\n   674: a0 = u32 [sp + 0x84]\n   678: a0 = a0 << 0x20\n   681: a1 = u64 [sp + 0x88]\n   685: a2 = u64 [sp + 0x90]\n   689: a3 = u64 [sp + 0x98]\n   693: a0 = a0 | 0x1388\n   697: u64 [sp + 120] = 0\n   700: u64 [sp + 112] = 0\n   703: u64 [sp + 104] = 0\n   706: u64 [sp + 96] = 0\n   709: u64 [sp + 0x98] = a3\n   713: u64 [sp + 0x90] = a2\n   717: u64 [sp + 0x88] = a1\n   721: u64 [sp + 0x80] = a0\n   725: i32 a1 = sp + 0x60\n   728: i32 a3 = sp + 0x80\n   732: a2 = 0xffffffffffffffff\n   735: a4 = 0x20\n   738: a0 = 0\n   740: ecalli 12 // 'set_storage'\n   742: u64 [sp + 120] = 0\n   745: u64 [sp + 112] = 0\n   748: u64 [sp + 104] = 0\n   751: u64 [sp + 96] = 0\n   754: u64 [sp + 152] = 0\n   758: u64 [sp + 144] = 0\n   762: u64 [sp + 136] = 0\n   766: u64 [sp + 128] = 0\n   770: u32 [sp + 0x40] = s1\n   773: i32 a1 = sp + 0x60\n   776: i32 a3 = sp + 0x80\n   780: i32 a4 = sp + 0x40\n   783: a2 = 0xffffffffffffffff\n   786: a0 = 0\n   788: ecalli 6 // 'get_storage'\n   790: a0 = u64 [sp + 0x88]\n   794: a1 = u64 [sp + 0x90]\n   798: a2 = u32 [sp + 0x80]\n   802: a3 = u64 [sp + 0x98]\n   806: a4 = 0x138800000000\n   816: a2 = a2 | a4\n   819: u64 [sp + 120] = 0\n   822: u64 [sp + 112] = 0\n   825: u64 [sp + 104] = 0\n   828: u64 [sp + 96] = 0\n   831: u64 [sp + 0x98] = a3\n   835: u64 [sp + 0x90] = a1\n   839: u64 [sp + 0x88] = a0\n   843: u64 [sp + 0x80] = a2\n   847: i32 a1 = sp + 0x60\n   850: i32 a3 = sp + 0x80\n   854: a2 = 0xffffffffffffffff\n   857: a4 = 0x20\n   860: a0 = 0\n   862: ecalli 12 // 'set_storage'\n   864: u64 [sp + 24] = 0\n   867: u64 [sp + 16] = 0\n   870: u64 [sp + 0] = 0x1\n   873: a0 = sp\n   875: u64 [sp + 8] = 0\n   878: ra = 10, jump @74\n      : @33 [@dyn 5] (gas: 3)\n   883: a0 = 0x40\n   886: a1 = 0x20\n   889: ra = 12, jump @0\n      : @34 [@dyn 6] (gas: 100)\n   894: a1 = u8 [a0 + 0x11]\n   897: a2 = u8 [a0 + 0x10]\n   900: a3 = u8 [a0 + 0x12]\n   903: a4 = u8 [a0 + 0x13]\n   906: a1 = a1 << 0x8\n   909: a1 = a1 | a2\n   912: a3 = a3 << 0x10\n   915: a4 = a4 << 0x18\n   918: a3 = a3 | a4\n   921: a1 = a1 | a3\n   924: a2 = u8 [a0 + 0x15]\n   927: a3 = u8 [a0 + 0x14]\n   930: a4 = u8 [a0 + 0x16]\n   933: a5 = u8 [a0 + 0x17]\n   936: a2 = a2 << 0x8\n   939: a2 = a2 | a3\n   942: a4 = a4 << 0x10\n   945: a5 = a5 << 0x18\n   948: a4 = a4 | a5\n   951: a2 = a2 | a4\n   954: a2 = a2 << 0x20\n   957: t0 = a2 | a1\n   960: a2 = u8 [a0 + 0x1]\n   963: a3 = u8 [a0]\n   965: a4 = u8 [a0 + 0x2]\n   968: a5 = u8 [a0 + 0x3]\n   971: a2 = a2 << 0x8\n   974: a2 = a2 | a3\n   977: a4 = a4 << 0x10\n   980: a5 = a5 << 0x18\n   983: a4 = a4 | a5\n   986: a2 = a2 | a4\n   989: a3 = u8 [a0 + 0x5]\n   992: a4 = u8 [a0 + 0x4]\n   995: a5 = u8 [a0 + 0x6]\n   998: s1 = u8 [a0 + 0x7]\n  1001: a3 = a3 << 0x8\n  1004: a3 = a3 | a4\n  1007: a5 = a5 << 0x10\n  1010: s1 = s1 << 0x18\n  1013: a5 = a5 | s1\n  1016: a3 = a3 | a5\n  1019: a3 = a3 << 0x20\n  1022: a2 = a2 | a3\n  1025: a3 = u8 [a0 + 0x19]\n  1028: a4 = u8 [a0 + 0x18]\n  1031: a5 = u8 [a0 + 0x1a]\n  1034: s1 = u8 [a0 + 0x1b]\n  1037: a3 = a3 << 0x8\n  1040: a3 = a3 | a4\n  1043: a5 = a5 << 0x10\n  1046: s1 = s1 << 0x18\n  1049: a5 = a5 | s1\n  1052: a3 = a3 | a5\n  1055: a4 = u8 [a0 + 0x1d]\n  1058: a5 = u8 [a0 + 0x1c]\n  1061: s1 = u8 [a0 + 0x1e]\n  1064: a1 = u8 [a0 + 0x1f]\n  1067: a4 = a4 << 0x8\n  1070: a4 = a4 | a5\n  1073: s1 = s1 << 0x10\n  1076: a1 = a1 << 0x18\n  1079: a1 = a1 | s1\n  1082: a1 = a1 | a4\n  1085: a1 = a1 << 0x20\n  1088: a3 = a3 | a1\n  1091: a1 = u8 [a0 + 0x9]\n  1094: a4 = u8 [a0 + 0x8]\n  1097: a5 = u8 [a0 + 0xa]\n  1100: s1 = u8 [a0 + 0xb]\n  1103: a1 = a1 << 0x8\n  1106: a1 = a1 | a4\n  1109: a5 = a5 << 0x10\n  1112: s1 = s1 << 0x18\n  1115: a5 = a5 | s1\n  1118: a1 = a1 | a5\n  1121: a4 = u8 [a0 + 0xd]\n  1124: a5 = u8 [a0 + 0xc]\n  1127: s1 = u8 [a0 + 0xe]\n  1130: a0 = u8 [a0 + 0xf]\n  1133: a4 = a4 << 0x8\n  1136: a4 = a4 | a5\n  1139: s1 = s1 << 0x10\n  1142: a0 = a0 << 0x18\n  1145: a0 = a0 | s1\n  1148: a0 = a0 | a4\n  1151: a0 = a0 << 0x20\n  1154: a0 = a0 | a1\n  1157: a0 = reverse a0\n  1159: s1 = reverse a3\n  1161: a1 = reverse a2\n  1163: a2 = reverse t0\n  1165: a1 = a1 | a2\n  1168: a2 = s1 | a0\n  1171: a2 = a2 | a1\n  1174: a2 = a2 >> 0x20\n  1177: a0 = a0 | a1\n  1180: a0 = a0 << 0x20\n  1183: a0 = a0 | a2\n  1186: jump @38 if a0 == 0\n      : @35 (gas: 1)\n  1189: trap\n      : @36 (gas: 3)\n  1190: a0 = 0\n  1192: a1 = 0\n  1194: ra = 14, jump @0\n      : @37 [@dyn 7] (gas: 5)\n  1199: i32 a1 = a0 + 0\n  1201: a0 = 0x1\n  1204: a2 = 0\n  1206: ecalli 10 // 'seal_return'\n  1208: fallthrough\n      : @38 (gas: 4)\n  1209: i32 s1 = s1 + 0\n  1211: a0 = s1\n  1213: a1 = 0\n  1215: ra = 16, jump @0\n      : @39 [@dyn 8] (gas: 5)\n  1220: i32 a0 = a0 + 0\n  1222: a1 = 0\n  1224: a2 = 0\n  1226: ecalli 1 // 'call_data_copy'\n  1228: fallthrough\n      : @40 (gas: 2)\n  1229: a1 = i32 [0x20068]\n  1234: jump @42 if a1 == 0\n      : @41 (gas: 4)\n  1237: a0 = 0x30070\n  1242: i32 a0 = a0 + 0\n  1244: ecalli 11 // 'set_immutable_data'\n  1246: fallthrough\n      : @42 (gas: 3)\n  1247: a0 = s1\n  1249: a1 = 0\n  1251: ra = 18, jump @0\n      : @43 [@dyn 9] (gas: 6)\n  1256: i32 a1 = a0 + 0\n  1258: a0 = 0\n  1260: a2 = 0\n  1262: ra = 0x14\n  1265: ecalli 10 // 'seal_return'\n  1267: fallthrough\n      : @44 [@dyn 10] (gas: 8)\n  1268: sp = sp + 0xffffffffffffffc0\n  1271: u64 [sp + 0x38] = ra\n  1274: u64 [sp + 0x30] = s0\n  1277: s0 = sp + 0x40\n  1280: sp = sp & 0xffffffffffffffe0\n  1283: a0 = 0x40\n  1286: a1 = 0x20\n  1289: ra = 22, jump @0\n      : @45 [@dyn 11] (gas: 34)\n  1294: u8 [a0 + 31] = 0x80\n  1299: u8 [a0 + 30] = 0\n  1302: u8 [a0 + 29] = 0\n  1305: u8 [a0 + 28] = 0\n  1308: u8 [a0 + 27] = 0\n  1311: u8 [a0 + 26] = 0\n  1314: u8 [a0 + 25] = 0\n  1317: u8 [a0 + 24] = 0\n  1320: u8 [a0 + 23] = 0\n  1323: u8 [a0 + 22] = 0\n  1326: u8 [a0 + 21] = 0\n  1329: u8 [a0 + 20] = 0\n  1332: u8 [a0 + 19] = 0\n  1335: u8 [a0 + 18] = 0\n  1338: u8 [a0 + 17] = 0\n  1341: u8 [a0 + 16] = 0\n  1344: u8 [a0 + 15] = 0\n  1347: u8 [a0 + 14] = 0\n  1350: u8 [a0 + 13] = 0\n  1353: u8 [a0 + 12] = 0\n  1356: u8 [a0 + 11] = 0\n  1359: u8 [a0 + 10] = 0\n  1362: u8 [a0 + 9] = 0\n  1365: u8 [a0 + 8] = 0\n  1368: u8 [a0 + 7] = 0\n  1371: u8 [a0 + 3] = 0\n  1374: u8 [a0 + 2] = 0\n  1377: u8 [a0 + 1] = 0\n  1380: u8 [a0 + 0] = 0\n  1382: a1 = i32 [0x20064]\n  1387: u8 [a0 + 6] = 0\n  1390: u8 [a0 + 5] = 0\n  1393: u8 [a0 + 4] = 0\n  1396: jump @55 if a1 <u 4\n      : @46 (gas: 4)\n  1400: i32 a0 = sp + 0\n  1402: a1 = 0\n  1404: ecalli 2 // 'call_data_load'\n  1406: fallthrough\n      : @47 (gas: 2)\n  1407: a0 = i32 [sp + 0x1c]\n  1410: jump @52 if a0 <=s 280229821\n      : @48 (gas: 2)\n  1417: a1 = 0x50dfe000\n  1423: jump @56 if a0 >s 1356848122\n      : @49 (gas: 1)\n  1430: jump @60 if a0 == 280229822\n      : @50 (gas: 1)\n  1438: jump @55 if a0 != 1068341984\n      : @51 (gas: 14)\n  1445: ra = 0x18\n  1448: sp = sp + 0xfffffffffffffec0\n  1452: u64 [sp + 0x138] = ra\n  1456: u64 [sp + 0x130] = s0\n  1460: u64 [sp + 0x128] = s1\n  1464: s0 = sp + 0x140\n  1468: sp = sp & 0xffffffffffffffe0\n  1471: u64 [sp + 280] = 0\n  1475: u64 [sp + 272] = 0\n  1479: u64 [sp + 264] = 0\n  1483: u64 [sp + 256] = 0\n  1487: i32 a0 = sp + 0x100\n  1491: ecalli 13 // 'value_transferred'\n  1493: jump @166\n      : @52 [@dyn 12] (gas: 1)\n  1496: jump @59 if a0 == 2959522937\n      : @53 (gas: 1)\n  1503: jump @62 if a0 == 3304670034\n      : @54 (gas: 1)\n  1511: jump @58 if a0 == 3834958548\n      : @55 (gas: 7)\n  1518: ra = 0x1a\n  1521: sp = sp + 0xfffffffffffffff8\n  1524: u64 [sp] = ra\n  1526: a0 = 0\n  1528: a1 = 0\n  1530: ra = 0xce\n  1534: jump @0\n      : @56 [@dyn 13] (gas: 2)\n  1537: i32 a1 = a1 + 0xfffffffffffffbfb\n  1541: jump @61 if a0 == a1\n      : @57 (gas: 1)\n  1544: jump @55 if a0 != 1503157795\n      : @58 (gas: 14)\n  1551: ra = 0x1c\n  1554: sp = sp + 0xfffffffffffffec0\n  1558: u64 [sp + 0x138] = ra\n  1562: u64 [sp + 0x130] = s0\n  1566: u64 [sp + 0x128] = s1\n  1570: s0 = sp + 0x140\n  1574: sp = sp & 0xffffffffffffffe0\n  1577: u64 [sp + 280] = 0\n  1581: u64 [sp + 272] = 0\n  1585: u64 [sp + 264] = 0\n  1589: u64 [sp + 256] = 0\n  1593: i32 a0 = sp + 0x100\n  1597: ecalli 13 // 'value_transferred'\n  1599: jump @203\n      : @59 [@dyn 14] (gas: 14)\n  1602: ra = 0x1e\n  1605: sp = sp + 0xffffffffffffff60\n  1609: u64 [sp + 0x98] = ra\n  1613: u64 [sp + 0x90] = s0\n  1617: u64 [sp + 0x88] = s1\n  1621: s0 = sp + 0xa0\n  1625: sp = sp & 0xffffffffffffffe0\n  1628: u64 [sp + 56] = 0\n  1631: u64 [sp + 48] = 0\n  1634: u64 [sp + 40] = 0\n  1637: u64 [sp + 32] = 0\n  1640: i32 a0 = sp + 0x20\n  1643: ecalli 13 // 'value_transferred'\n  1645: jump @215\n      : @60 [@dyn 15] (gas: 1)\n  1648: ra = 32, jump @84\n      : @61 [@dyn 16] (gas: 14)\n  1653: ra = 0x22\n  1656: sp = sp + 0xffffffffffffff60\n  1660: u64 [sp + 0x98] = ra\n  1664: u64 [sp + 0x90] = s0\n  1668: u64 [sp + 0x88] = s1\n  1672: s0 = sp + 0xa0\n  1676: sp = sp & 0xffffffffffffffe0\n  1679: u64 [sp + 56] = 0\n  1682: u64 [sp + 48] = 0\n  1685: u64 [sp + 40] = 0\n  1688: u64 [sp + 32] = 0\n  1691: i32 a0 = sp + 0x20\n  1694: ecalli 13 // 'value_transferred'\n  1696: jump @180\n      : @62 [@dyn 17] (gas: 1)\n  1699: ra = 36, jump @236\n      : @63 [@dyn 18] (gas: 7)\n  1704: sp = sp + 0xfffffffffffffff0\n  1707: u64 [sp + 0x8] = ra\n  1710: u64 [sp] = s0\n  1712: s0 = a0\n  1714: a0 = 0x40\n  1717: a1 = 0x20\n  1720: ra = 38, jump @0\n      : @64 [@dyn 19] (gas: 100)\n  1725: a1 = u8 [a0 + 0x1]\n  1728: a2 = u8 [a0]\n  1730: a3 = u8 [a0 + 0x2]\n  1733: a4 = u8 [a0 + 0x3]\n  1736: a1 = a1 << 0x8\n  1739: a1 = a1 | a2\n  1742: a3 = a3 << 0x10\n  1745: a4 = a4 << 0x18\n  1748: a3 = a3 | a4\n  1751: a1 = a1 | a3\n  1754: a2 = u8 [a0 + 0x5]\n  1757: a3 = u8 [a0 + 0x4]\n  1760: a4 = u8 [a0 + 0x6]\n  1763: a5 = u8 [a0 + 0x7]\n  1766: a2 = a2 << 0x8\n  1769: a2 = a2 | a3\n  1772: a4 = a4 << 0x10\n  1775: a5 = a5 << 0x18\n  1778: a4 = a4 | a5\n  1781: a2 = a2 | a4\n  1784: a2 = a2 << 0x20\n  1787: t0 = a2 | a1\n  1790: a2 = u8 [a0 + 0x9]\n  1793: a3 = u8 [a0 + 0x8]\n  1796: a4 = u8 [a0 + 0xa]\n  1799: a5 = u8 [a0 + 0xb]\n  1802: a2 = a2 << 0x8\n  1805: a2 = a2 | a3\n  1808: a4 = a4 << 0x10\n  1811: a5 = a5 << 0x18\n  1814: a4 = a4 | a5\n  1817: a2 = a2 | a4\n  1820: a3 = u8 [a0 + 0xd]\n  1823: a4 = u8 [a0 + 0xc]\n  1826: a5 = u8 [a0 + 0xe]\n  1829: a1 = u8 [a0 + 0xf]\n  1832: a3 = a3 << 0x8\n  1835: a3 = a3 | a4\n  1838: a5 = a5 << 0x10\n  1841: a1 = a1 << 0x18\n  1844: a1 = a1 | a5\n  1847: a1 = a1 | a3\n  1850: a1 = a1 << 0x20\n  1853: t1 = a1 | a2\n  1856: a1 = u8 [a0 + 0x11]\n  1859: a3 = u8 [a0 + 0x10]\n  1862: a4 = u8 [a0 + 0x12]\n  1865: a5 = u8 [a0 + 0x13]\n  1868: a1 = a1 << 0x8\n  1871: a1 = a1 | a3\n  1874: a4 = a4 << 0x10\n  1877: a5 = a5 << 0x18\n  1880: a4 = a4 | a5\n  1883: a1 = a1 | a4\n  1886: a3 = u8 [a0 + 0x15]\n  1889: a4 = u8 [a0 + 0x14]\n  1892: a5 = u8 [a0 + 0x16]\n  1895: a2 = u8 [a0 + 0x17]\n  1898: a3 = a3 << 0x8\n  1901: a3 = a3 | a4\n  1904: a5 = a5 << 0x10\n  1907: a2 = a2 << 0x18\n  1910: a2 = a2 | a5\n  1913: a2 = a2 | a3\n  1916: a2 = a2 << 0x20\n  1919: a3 = a2 | a1\n  1922: a1 = u8 [a0 + 0x19]\n  1925: a2 = u8 [a0 + 0x18]\n  1928: a4 = u8 [a0 + 0x1a]\n  1931: a5 = u8 [a0 + 0x1b]\n  1934: a1 = a1 << 0x8\n  1937: a1 = a1 | a2\n  1940: a4 = a4 << 0x10\n  1943: a5 = a5 << 0x18\n  1946: a4 = a4 | a5\n  1949: a1 = a1 | a4\n  1952: a2 = u8 [a0 + 0x1d]\n  1955: a4 = u8 [a0 + 0x1c]\n  1958: a5 = u8 [a0 + 0x1e]\n  1961: a0 = u8 [a0 + 0x1f]\n  1964: a2 = a2 << 0x8\n  1967: a2 = a2 | a4\n  1970: a5 = a5 << 0x10\n  1973: a0 = a0 << 0x18\n  1976: a0 = a0 | a5\n  1979: a0 = a0 | a2\n  1982: a0 = a0 << 0x20\n  1985: a0 = a0 | a1\n  1988: a0 = reverse a0\n  1990: a1 = reverse a3\n  1992: a2 = reverse t1\n  1994: a3 = reverse t0\n  1996: u64 [s0 + 0x18] = a3\n  1999: u64 [s0 + 0x10] = a2\n  2002: u64 [s0 + 0x8] = a1\n  2005: u64 [s0] = a0\n  2007: ra = u64 [sp + 0x8]\n  2010: s0 = u64 [sp]\n  2012: sp = sp + 0x10\n  2015: ret\n      : @65 (gas: 15)\n  2017: sp = sp + 0xffffffffffffff20\n  2021: u64 [sp + 0xd8] = ra\n  2025: u64 [sp + 0xd0] = s0\n  2029: u64 [sp + 0xc8] = s1\n  2033: s0 = sp + 0xe0\n  2037: sp = sp & 0xffffffffffffffe0\n  2040: t0 = u64 [a1 + 0x18]\n  2043: a5 = u64 [a1 + 0x10]\n  2046: a4 = u64 [a1]\n  2048: s1 = u64 [a1 + 0x8]\n  2051: a1 = a5 | t0\n  2054: a3 = a4 <u 0x20\n  2057: a3 = 0 if s1 != 0\n  2059: a3 = 0 if a1 != 0\n  2061: jump @73 if a3 != 0\n      : @66 (gas: 23)\n  2065: a1 = u64 [a2 + 0x18]\n  2068: u64 [sp + 0x50] = a1\n  2071: a1 = u64 [a2 + 0x10]\n  2074: u64 [sp + 0x40] = a1\n  2077: a1 = u64 [a2 + 0x8]\n  2080: u64 [sp + 0x58] = a1\n  2083: a1 = u64 [a2]\n  2085: u64 [sp + 0x20] = a1\n  2088: a1 = u64 [a0 + 0x18]\n  2091: u64 [sp] = a1\n  2093: a1 = u64 [a0 + 0x10]\n  2096: u64 [sp + 0x8] = a1\n  2099: a1 = u64 [a0 + 0x8]\n  2102: u64 [sp + 0x10] = a1\n  2105: a0 = u64 [a0]\n  2107: u64 [sp + 0x18] = a0\n  2110: a1 = 0x20\n  2113: a0 = 0\n  2115: u64 [sp + 0x28] = t0\n  2118: u64 [sp + 0x48] = a5\n  2121: u64 [sp + 0x38] = s1\n  2124: u64 [sp + 0x30] = a4\n  2127: ra = 40, jump @0\n      : @67 [@dyn 20] (gas: 71)\n  2132: a1 = u64 [sp]\n  2134: a1 = reverse a1\n  2136: a2 = u64 [sp + 0x8]\n  2139: a2 = reverse a2\n  2141: a3 = u64 [sp + 0x10]\n  2144: a3 = reverse a3\n  2146: a4 = u64 [sp + 0x18]\n  2149: a4 = reverse a4\n  2151: a5 = a4 >> 0x38\n  2154: u8 [a0 + 0x1f] = a5\n  2157: a5 = a4 >> 0x30\n  2160: u8 [a0 + 0x1e] = a5\n  2163: a5 = a4 >> 0x28\n  2166: u8 [a0 + 0x1d] = a5\n  2169: a5 = a4 >> 0x20\n  2172: u8 [a0 + 0x1c] = a5\n  2175: a5 = a4 >> 0x18\n  2178: u8 [a0 + 0x1b] = a5\n  2181: a5 = a4 >> 0x10\n  2184: u8 [a0 + 0x1a] = a5\n  2187: a5 = a4 >> 0x8\n  2190: u8 [a0 + 0x19] = a5\n  2193: u8 [a0 + 0x18] = a4\n  2196: u8 [a0 + 0x10] = a3\n  2199: a4 = a3 >> 0x38\n  2202: u8 [a0 + 0x17] = a4\n  2205: a4 = a3 >> 0x30\n  2208: u8 [a0 + 0x16] = a4\n  2211: a4 = a3 >> 0x28\n  2214: u8 [a0 + 0x15] = a4\n  2217: a4 = a3 >> 0x20\n  2220: u8 [a0 + 0x14] = a4\n  2223: a4 = a3 >> 0x18\n  2226: u8 [a0 + 0x13] = a4\n  2229: a4 = a3 >> 0x10\n  2232: u8 [a0 + 0x12] = a4\n  2235: a3 = a3 >> 0x8\n  2238: u8 [a0 + 0x11] = a3\n  2241: u8 [a0 + 0x8] = a2\n  2244: a3 = a2 >> 0x38\n  2247: u8 [a0 + 0xf] = a3\n  2250: a3 = a2 >> 0x30\n  2253: u8 [a0 + 0xe] = a3\n  2256: a3 = a2 >> 0x28\n  2259: u8 [a0 + 0xd] = a3\n  2262: a3 = a2 >> 0x20\n  2265: u8 [a0 + 0xc] = a3\n  2268: a3 = a2 >> 0x18\n  2271: u8 [a0 + 0xb] = a3\n  2274: a3 = a2 >> 0x10\n  2277: u8 [a0 + 0xa] = a3\n  2280: a2 = a2 >> 0x8\n  2283: u8 [a0 + 0x9] = a2\n  2286: u8 [a0] = a1\n  2288: a2 = a1 >> 0x38\n  2291: u8 [a0 + 0x7] = a2\n  2294: a2 = a1 >> 0x30\n  2297: u8 [a0 + 0x6] = a2\n  2300: a2 = a1 >> 0x28\n  2303: u8 [a0 + 0x5] = a2\n  2306: a2 = a1 >> 0x20\n  2309: u8 [a0 + 0x4] = a2\n  2312: a2 = a1 >> 0x18\n  2315: u8 [a0 + 0x3] = a2\n  2318: a2 = a1 >> 0x10\n  2321: u8 [a0 + 0x2] = a2\n  2324: a1 = a1 >> 0x8\n  2327: u8 [a0 + 0x1] = a1\n  2330: a1 = 0x20\n  2333: a0 = 0\n  2335: ra = 42, jump @0\n      : @68 [@dyn 21] (gas: 5)\n  2340: i32 a0 = a0 + 0\n  2342: i32 a2 = sp + 0xa0\n  2346: a1 = 0x20\n  2349: ecalli 7 // 'hash_keccak_256'\n  2351: fallthrough\n      : @69 (gas: 112)\n  2352: a2 = u64 [sp + 0x20]\n  2355: a1 = a2 + 0x1f\n  2358: a0 = a1 <u a2\n  2361: t1 = a2\n  2363: a4 = u64 [sp + 0x58]\n  2366: a3 = a4 + a0\n  2369: a2 = a3 <u a4\n  2372: t0 = a4\n  2374: a2 = a0 if a0 == 0\n  2377: s1 = u64 [sp + 0x40]\n  2380: a2 = a2 + s1\n  2383: u64 [sp + 0x18] = a2\n  2386: a2 = a2 << 0x3b\n  2389: a4 = a3 >> 0x5\n  2392: a2 = a2 | a4\n  2395: a3 = a3 << 0x3b\n  2398: a1 = a1 >> 0x5\n  2401: a5 = a1 | a3\n  2404: a1 = t1 <u 0x20\n  2407: a1 = 0 if t0 != 0\n  2409: a3 = u64 [sp + 0xb8]\n  2413: t1 = u64 [sp + 0xb0]\n  2417: a0 = u64 [sp + 0x50]\n  2420: a4 = s1 | a0\n  2423: a1 = 0 if a4 != 0\n  2425: a4 = reverse a3\n  2427: s1 = reverse t1\n  2429: a2 = 0 if a1 != 0\n  2431: a5 = 0 if a1 != 0\n  2433: a5 = a5 + a4\n  2436: u64 [sp + 0x58] = a5\n  2439: a5 = a5 <u a4\n  2442: a3 = s1 + a5\n  2445: t0 = a3 + a2\n  2448: a3 = t0 ^ s1\n  2451: ra = t0 <u s1\n  2454: ra = a5 if a3 == 0\n  2457: a0 = u64 [sp + 0x30]\n  2460: t2 = a0 + 0x1f\n  2463: a0 = t2 <u a0\n  2466: a2 = u64 [sp + 0x38]\n  2469: a3 = a2 + a0\n  2472: a5 = a3 <u a2\n  2475: a5 = a0 if a0 == 0\n  2478: a0 = u64 [sp + 0x48]\n  2481: a5 = a5 + a0\n  2484: a0 = a5 << 0x3b\n  2487: a2 = a3 >> 0x5\n  2490: a0 = a0 | a2\n  2493: a3 = a3 << 0x3b\n  2496: a2 = t2 >> 0x5\n  2499: a2 = a2 | a3\n  2502: t2 = a4 + a2\n  2505: a2 = t2 <u a4\n  2508: a3 = s1 + a2\n  2511: t1 = a3 + a0\n  2514: a0 = t1 ^ s1\n  2517: a3 = t1 <u s1\n  2520: a3 = a2 if a0 == 0\n  2523: a4 = u64 [sp + 0x18]\n  2526: a0 = u64 [sp + 0x40]\n  2529: a0 = a4 <u a0\n  2532: a2 = u64 [sp + 0x50]\n  2535: a0 = a0 + a2\n  2538: a2 = a4 >> 0x5\n  2541: a4 = a0 << 0x3b\n  2544: a2 = a2 | a4\n  2547: a0 = a0 >> 0x5\n  2550: a4 = u64 [sp + 0xa8]\n  2554: s1 = u64 [sp + 0xa0]\n  2558: a2 = 0 if a1 != 0\n  2560: a0 = 0 if a1 != 0\n  2562: a1 = reverse a4\n  2564: a4 = reverse s1\n  2566: u64 [sp + 0x50] = a4\n  2569: a0 = a0 + a4\n  2572: a2 = a2 + a1\n  2575: s1 = a2 <u a1\n  2578: a0 = a0 + s1\n  2581: a4 = a2 + ra\n  2584: s1 = a4 <u a2\n  2587: s1 = s1 + a0\n  2590: a0 = u64 [sp + 0x48]\n  2593: a0 = a5 <u a0\n  2596: a2 = u64 [sp + 0x28]\n  2599: a0 = a0 + a2\n  2602: a5 = a5 >> 0x5\n  2605: a2 = a0 << 0x3b\n  2608: a2 = a2 | a5\n  2611: a5 = u64 [sp + 0x58]\n  2614: a0 = a0 >> 0x5\n  2617: a2 = a2 + a1\n  2620: ra = a2 + a3\n  2623: a1 = a2 <u a1\n  2626: a2 = ra <u a2\n  2629: a3 = u64 [sp + 0x50]\n  2632: a0 = a0 + a3\n  2635: a0 = a0 + a1\n  2638: a3 = a0 + a2\n  2641: a0 = t0 ^ t1\n  2644: a1 = t0 <u t1\n  2647: a2 = a5 <u t2\n  2650: a2 = a1 if a0 != 0\n  2653: a0 = a4 <u ra\n  2656: a1 = s1 ^ a3\n  2659: u64 [sp + 0x40] = a3\n  2662: a3 = s1 <u a3\n  2665: a3 = a0 if a1 == 0\n  2668: a0 = a4 ^ ra\n  2671: a0 = a0 | a1\n  2674: a2 = a3 if a0 != 0\n  2677: jump @73 if a2 == 0\n      : @70 (gas: 5)\n  2681: a0 = a4\n  2683: u64 [sp + 0x38] = t2\n  2686: u64 [sp + 0x30] = t1\n  2689: u64 [sp + 0x28] = ra\n  2692: fallthrough\n      : @71 (gas: 36)\n  2693: u64 [sp + 0x48] = a0\n  2696: u64 [sp + 0x50] = t0\n  2699: u64 [sp + 0x58] = a5\n  2702: u64 [sp + 0x90] = a0\n  2706: u64 [sp + 0x88] = t0\n  2710: u64 [sp + 0x80] = a5\n  2714: u64 [sp + 0x98] = s1\n  2718: u64 [sp + 184] = 0\n  2722: u64 [sp + 176] = 0\n  2726: u64 [sp + 168] = 0\n  2730: u64 [sp + 160] = 0\n  2734: u32 [sp + 96] = 0x20\n  2738: i32 a1 = sp + 0x80\n  2742: i32 a3 = sp + 0xa0\n  2746: i32 a4 = sp + 0x60\n  2749: a2 = 0xffffffffffffffff\n  2752: a0 = 0\n  2754: ecalli 6 // 'get_storage'\n  2756: u64 [sp + 0x98] = s1\n  2760: a0 = u64 [sp + 0x48]\n  2763: u64 [sp + 0x90] = a0\n  2767: a0 = u64 [sp + 0x50]\n  2770: u64 [sp + 0x88] = a0\n  2774: a0 = u64 [sp + 0x58]\n  2777: u64 [sp + 0x80] = a0\n  2781: u64 [sp + 184] = 0\n  2785: u64 [sp + 176] = 0\n  2789: u64 [sp + 168] = 0\n  2793: u64 [sp + 160] = 0\n  2797: i32 a1 = sp + 0x80\n  2801: i32 a3 = sp + 0xa0\n  2805: a2 = 0xffffffffffffffff\n  2808: a4 = 0x20\n  2811: a0 = 0\n  2813: ecalli 12 // 'set_storage'\n  2815: fallthrough\n      : @72 (gas: 27)\n  2816: ra = u64 [sp + 0x28]\n  2819: t1 = u64 [sp + 0x30]\n  2822: t2 = u64 [sp + 0x38]\n  2825: t0 = u64 [sp + 0x50]\n  2828: a5 = u64 [sp + 0x58]\n  2831: a5 = a5 + 0x1\n  2834: a0 = a5 <u 0x1\n  2837: t0 = t0 + a0\n  2840: a0 = a5 | t0\n  2843: a0 = a0 <u 0x1\n  2846: a1 = u64 [sp + 0x48]\n  2849: a0 = a0 + a1\n  2852: a1 = a0 <u a1\n  2855: s1 = s1 + a1\n  2858: a1 = a5 <u t2\n  2861: a2 = t0 ^ t1\n  2864: a3 = t0 <u t1\n  2867: a3 = a1 if a2 == 0\n  2870: a1 = a0 <u ra\n  2873: a4 = u64 [sp + 0x40]\n  2876: a2 = s1 ^ a4\n  2879: a4 = s1 <u a4\n  2882: a4 = a1 if a2 == 0\n  2885: a1 = a0 ^ ra\n  2888: a1 = a1 | a2\n  2891: a4 = a3 if a1 == 0\n  2894: jump @71 if a4 != 0\n      : @73 (gas: 6)\n  2898: sp = s0 + 0xffffffffffffff20\n  2902: ra = u64 [sp + 0xd8]\n  2906: s0 = u64 [sp + 0xd0]\n  2910: s1 = u64 [sp + 0xc8]\n  2914: sp = sp + 0xe0\n  2918: ret\n      : @74 (gas: 30)\n  2920: sp = sp + 0xfffffffffffffec0\n  2924: u64 [sp + 0x138] = ra\n  2928: u64 [sp + 0x130] = s0\n  2932: u64 [sp + 0x128] = s1\n  2936: s0 = sp + 0x140\n  2940: sp = sp & 0xffffffffffffffe0\n  2943: a3 = u64 [a0 + 0x18]\n  2946: a2 = u64 [a0 + 0x10]\n  2949: a1 = u64 [a0 + 0x8]\n  2952: a0 = u64 [a0]\n  2954: u64 [sp] = a3\n  2956: u64 [sp + 0xf8] = a3\n  2960: u64 [sp + 0x8] = a2\n  2963: u64 [sp + 0xf0] = a2\n  2967: u64 [sp + 0x10] = a1\n  2970: u64 [sp + 0xe8] = a1\n  2974: u64 [sp + 0x18] = a0\n  2977: u64 [sp + 0xe0] = a0\n  2981: u64 [sp + 280] = 0\n  2985: u64 [sp + 272] = 0\n  2989: u64 [sp + 264] = 0\n  2993: u64 [sp + 256] = 0\n  2997: u32 [sp + 192] = 0x20\n  3002: i32 a1 = sp + 0xe0\n  3006: i32 a3 = sp + 0x100\n  3010: i32 a4 = sp + 0xc0\n  3014: a2 = 0xffffffffffffffff\n  3017: a0 = 0\n  3019: ecalli 6 // 'get_storage'\n  3021: fallthrough\n      : @75 (gas: 27)\n  3022: a0 = u64 [sp + 0x110]\n  3026: a1 = u64 [sp + 0x108]\n  3030: a2 = u64 [sp + 0x100]\n  3034: a3 = u64 [sp + 0x118]\n  3038: a4 = a0 << 0x3f\n  3041: a5 = a1 >> 0x1\n  3044: t0 = a5 | a4\n  3047: a5 = a3 << 0x3f\n  3050: a0 = a0 >> 0x1\n  3053: a4 = a0 | a5\n  3056: a1 = a1 << 0x3f\n  3059: a5 = a2 >> 0x1\n  3062: a1 = a1 | a5\n  3065: a5 = a3 >> 0x1\n  3068: a2 = a2 & 0x1\n  3071: a0 = -a2\n  3073: t1 = a2 <u 0x1\n  3076: s1 = a1 & 0x7f\n  3079: a4 = a4 & a0\n  3082: a3 = a0 & t0\n  3085: s1 = a1 if a2 != 0\n  3088: a1 = a0 & a5\n  3091: a0 = s1 <u 0x20\n  3094: a0 = 0 if a3 != 0\n  3096: a2 = a4 | a1\n  3099: a0 = 0 if a2 != 0\n  3101: jump @78 if t1 != a0\n      : @76 (gas: 20)\n  3105: u64 [sp + 120] = 0\n  3108: u64 [sp + 112] = 0\n  3111: u64 [sp + 104] = 0\n  3114: u64 [sp + 96] = 0x1d\n  3118: u64 [sp + 0x80] = s1\n  3122: a0 = u64 [sp + 0x18]\n  3125: u64 [sp + 0xa0] = a0\n  3129: u64 [sp + 0x88] = a3\n  3133: a0 = u64 [sp + 0x10]\n  3136: u64 [sp + 0xa8] = a0\n  3140: u64 [sp + 0x90] = a4\n  3144: a0 = u64 [sp + 0x8]\n  3147: u64 [sp + 0xb0] = a0\n  3151: u64 [sp + 0x98] = a1\n  3155: a0 = sp + 0xa0\n  3159: a1 = sp + 0x80\n  3163: a2 = sp + 0x60\n  3166: s1 = u64 [sp]\n  3168: u64 [sp + 0xb8] = s1\n  3172: ra = 44, jump @65\n      : @77 [@dyn 22] (gas: 27)\n  3177: u64 [sp + 0xf8] = s1\n  3181: a0 = u64 [sp + 0x8]\n  3184: u64 [sp + 0xf0] = a0\n  3188: a0 = u64 [sp + 0x10]\n  3191: u64 [sp + 0xe8] = a0\n  3195: a0 = u64 [sp + 0x18]\n  3198: u64 [sp + 0xe0] = a0\n  3202: a0 = u64 [0x20000]\n  3207: a1 = u64 [0x20008]\n  3212: a2 = u64 [0x20010]\n  3217: a3 = u64 [0x20018]\n  3222: u64 [sp + 0x118] = a0\n  3226: u64 [sp + 0x110] = a1\n  3230: u64 [sp + 0x108] = a2\n  3234: u64 [sp + 0x100] = a3\n  3238: i32 a1 = sp + 0xe0\n  3242: i32 a3 = sp + 0x100\n  3246: a2 = 0xffffffffffffffff\n  3249: a4 = 0x20\n  3252: a0 = 0\n  3254: ecalli 12 // 'set_storage'\n  3256: sp = s0 + 0xfffffffffffffec0\n  3260: ra = u64 [sp + 0x138]\n  3264: s0 = u64 [sp + 0x130]\n  3268: s1 = u64 [sp + 0x128]\n  3272: sp = sp + 0x140\n  3276: ret\n      : @78 (gas: 8)\n  3278: u64 [sp + 80] = 0\n  3281: u64 [sp + 72] = 0\n  3284: u64 [sp + 64] = 0\n  3287: a0 = 0x4e487b7100000000\n  3297: a1 = sp + 0x40\n  3300: u64 [sp + 0x58] = a0\n  3303: a0 = 0\n  3305: ra = 46, jump @23\n      : @79 [@dyn 23] (gas: 7)\n  3310: u64 [sp + 56] = 0\n  3313: u64 [sp + 48] = 0\n  3316: u64 [sp + 32] = 0x22\n  3320: a0 = 0x4\n  3323: a1 = sp + 0x20\n  3326: u64 [sp + 40] = 0\n  3329: ra = 48, jump @23\n      : @80 [@dyn 24] (gas: 3)\n  3334: a1 = 0x24\n  3337: a0 = 0\n  3339: ra = 50, jump @0\n      : @81 [@dyn 25] (gas: 6)\n  3344: i32 a1 = a0 + 0\n  3346: a0 = 0x1\n  3349: a2 = 0x24\n  3352: ra = 0x34\n  3355: ecalli 10 // 'seal_return'\n  3357: fallthrough\n      : @82 [@dyn 26] (gas: 15)\n  3358: sp = sp + 0xffffffffffffffd0\n  3361: u64 [sp + 0x28] = ra\n  3364: u64 [sp + 0x20] = s0\n  3367: s0 = sp + 0x30\n  3370: sp = sp & 0xfffffffffffffff0\n  3373: a1 = u64 [a0]\n  3375: a2 = u64 [a0 + 0x8]\n  3378: a3 = u64 [a0 + 0x10]\n  3381: a0 = u64 [a0 + 0x18]\n  3384: u64 [sp + 0x18] = a0\n  3387: u64 [sp + 0x10] = a3\n  3390: u64 [sp + 0x8] = a2\n  3393: a0 = sp\n  3395: u64 [sp] = a1\n  3397: ra = 54, jump @74\n      : @83 [@dyn 27] (gas: 5)\n  3402: sp = s0 + 0xffffffffffffffd0\n  3405: ra = u64 [sp + 0x28]\n  3408: s0 = u64 [sp + 0x20]\n  3411: sp = sp + 0x30\n  3414: ret\n      : @84 (gas: 7)\n  3416: sp = sp + 0xffffffffffffffa0\n  3419: u64 [sp + 0x58] = ra\n  3422: u64 [sp + 0x50] = s0\n  3425: s0 = sp + 0x60\n  3428: sp = sp & 0xffffffffffffffe0\n  3431: a0 = i32 [0x20064]\n  3436: jump @91 if a0 <=u 35\n      : @85 (gas: 4)\n  3441: i32 a0 = sp + 0x20\n  3444: a1 = 0x4\n  3447: ecalli 2 // 'call_data_load'\n  3449: fallthrough\n      : @86 (gas: 9)\n  3450: a1 = u64 [sp + 0x38]\n  3453: a0 = u64 [sp + 0x30]\n  3456: a2 = u64 [sp + 0x20]\n  3459: a3 = u64 [sp + 0x28]\n  3462: a4 = a0 | a1\n  3465: a5 = a2 <u 0x2\n  3468: a5 = 0 if a3 != 0\n  3470: a5 = 0 if a4 != 0\n  3472: jump @91 if a5 == 0\n      : @87 (gas: 28)\n  3476: u64 [sp + 0x8] = a3\n  3479: u64 [sp] = a2\n  3481: u64 [sp + 0x10] = a0\n  3484: a0 = sp\n  3486: u64 [sp + 0x18] = a1\n  3489: ra = 0x38\n  3492: sp = sp + 0xfffffffffffffd20\n  3496: u64 [sp + 0x2d8] = ra\n  3500: u64 [sp + 0x2d0] = s0\n  3504: u64 [sp + 0x2c8] = s1\n  3508: s0 = sp + 0x2e0\n  3512: sp = sp & 0xffffffffffffffe0\n  3515: s1 = sp\n  3517: a1 = u64 [a0 + 0x18]\n  3520: u64 [s1 + 0x78] = a1\n  3523: a1 = u64 [a0 + 0x10]\n  3526: u64 [s1 + 0x68] = a1\n  3529: a1 = u64 [a0 + 0x8]\n  3532: u64 [s1 + 0x70] = a1\n  3535: a0 = u64 [a0]\n  3537: u64 [s1 + 0x60] = a0\n  3540: u64 [s1 + 536] = 0\n  3544: u64 [s1 + 528] = 0\n  3548: u64 [s1 + 520] = 0\n  3552: u64 [s1 + 512] = 0\n  3556: i32 a0 = s1 + 0x200\n  3560: ecalli 13 // 'value_transferred'\n  3562: jump @258\n      : @88 [@dyn 28] (gas: 3)\n  3565: a0 = 0x40\n  3568: a1 = 0x20\n  3571: ra = 58, jump @0\n      : @89 [@dyn 29] (gas: 100)\n  3576: a1 = u8 [a0 + 0x11]\n  3579: a2 = u8 [a0 + 0x10]\n  3582: a3 = u8 [a0 + 0x12]\n  3585: a4 = u8 [a0 + 0x13]\n  3588: a1 = a1 << 0x8\n  3591: a1 = a1 | a2\n  3594: a3 = a3 << 0x10\n  3597: a4 = a4 << 0x18\n  3600: a3 = a3 | a4\n  3603: a1 = a1 | a3\n  3606: a2 = u8 [a0 + 0x15]\n  3609: a3 = u8 [a0 + 0x14]\n  3612: a4 = u8 [a0 + 0x16]\n  3615: a5 = u8 [a0 + 0x17]\n  3618: a2 = a2 << 0x8\n  3621: a2 = a2 | a3\n  3624: a4 = a4 << 0x10\n  3627: a5 = a5 << 0x18\n  3630: a4 = a4 | a5\n  3633: a2 = a2 | a4\n  3636: a2 = a2 << 0x20\n  3639: t0 = a2 | a1\n  3642: a2 = u8 [a0 + 0x1]\n  3645: a3 = u8 [a0]\n  3647: a4 = u8 [a0 + 0x2]\n  3650: a5 = u8 [a0 + 0x3]\n  3653: a2 = a2 << 0x8\n  3656: a2 = a2 | a3\n  3659: a4 = a4 << 0x10\n  3662: a5 = a5 << 0x18\n  3665: a4 = a4 | a5\n  3668: a2 = a2 | a4\n  3671: a3 = u8 [a0 + 0x5]\n  3674: a4 = u8 [a0 + 0x4]\n  3677: a5 = u8 [a0 + 0x6]\n  3680: a1 = u8 [a0 + 0x7]\n  3683: a3 = a3 << 0x8\n  3686: a3 = a3 | a4\n  3689: a5 = a5 << 0x10\n  3692: a1 = a1 << 0x18\n  3695: a1 = a1 | a5\n  3698: a1 = a1 | a3\n  3701: a1 = a1 << 0x20\n  3704: t1 = a1 | a2\n  3707: a1 = u8 [a0 + 0x19]\n  3710: a3 = u8 [a0 + 0x18]\n  3713: a4 = u8 [a0 + 0x1a]\n  3716: a5 = u8 [a0 + 0x1b]\n  3719: a1 = a1 << 0x8\n  3722: a1 = a1 | a3\n  3725: a4 = a4 << 0x10\n  3728: a5 = a5 << 0x18\n  3731: a4 = a4 | a5\n  3734: a1 = a1 | a4\n  3737: a3 = u8 [a0 + 0x1d]\n  3740: a4 = u8 [a0 + 0x1c]\n  3743: a5 = u8 [a0 + 0x1e]\n  3746: a2 = u8 [a0 + 0x1f]\n  3749: a3 = a3 << 0x8\n  3752: a3 = a3 | a4\n  3755: a5 = a5 << 0x10\n  3758: a2 = a2 << 0x18\n  3761: a2 = a2 | a5\n  3764: a2 = a2 | a3\n  3767: a2 = a2 << 0x20\n  3770: a3 = a2 | a1\n  3773: a1 = u8 [a0 + 0x9]\n  3776: a2 = u8 [a0 + 0x8]\n  3779: a4 = u8 [a0 + 0xa]\n  3782: a5 = u8 [a0 + 0xb]\n  3785: a1 = a1 << 0x8\n  3788: a1 = a1 | a2\n  3791: a4 = a4 << 0x10\n  3794: a5 = a5 << 0x18\n  3797: a4 = a4 | a5\n  3800: a1 = a1 | a4\n  3803: a2 = u8 [a0 + 0xd]\n  3806: a4 = u8 [a0 + 0xc]\n  3809: a5 = u8 [a0 + 0xe]\n  3812: a0 = u8 [a0 + 0xf]\n  3815: a2 = a2 << 0x8\n  3818: a2 = a2 | a4\n  3821: a5 = a5 << 0x10\n  3824: a0 = a0 << 0x18\n  3827: a0 = a0 | a5\n  3830: a0 = a0 | a2\n  3833: a0 = a0 << 0x20\n  3836: a0 = a0 | a1\n  3839: a1 = reverse a0\n  3841: a0 = reverse a3\n  3843: a2 = reverse t1\n  3845: a3 = reverse t0\n  3847: a2 = a2 | a3\n  3850: a3 = a0 | a1\n  3853: a3 = a3 | a2\n  3856: a3 = a3 >> 0x20\n  3859: a1 = a1 | a2\n  3862: a1 = a1 << 0x20\n  3865: a1 = a1 | a3\n  3868: jump @93 if a1 == 0\n      : @90 (gas: 1)\n  3871: trap\n      : @91 (gas: 3)\n  3872: a0 = 0\n  3874: a1 = 0\n  3876: ra = 60, jump @0\n      : @92 [@dyn 30] (gas: 7)\n  3881: i32 a1 = a0 + 0\n  3883: a0 = 0x1\n  3886: a2 = 0\n  3888: ecalli 10 // 'seal_return'\n  3890: i32 a0 = a0 + 0\n  3892: ra = 0x3e\n  3895: jump @0\n      : @93 (gas: 2)\n  3898: i32 a0 = a0 + 0\n  3900: ra = 62, jump @0\n      : @94 [@dyn 31] (gas: 6)\n  3905: i32 a1 = a0 + 0\n  3907: a0 = 0\n  3909: a2 = 0\n  3911: ra = 0x40\n  3914: ecalli 10 // 'seal_return'\n  3916: fallthrough\n      : @95 [@dyn 32] (gas: 19)\n  3917: t0 = u64 [a0 + 0x18]\n  3920: t1 = u64 [a1 + 0x18]\n  3923: a4 = u64 [a0 + 0x10]\n  3926: a5 = u64 [a0 + 0x8]\n  3929: a2 = u64 [a1 + 0x8]\n  3932: t2 = u64 [a0]\n  3934: a3 = u64 [a1]\n  3936: a1 = u64 [a1 + 0x10]\n  3939: a0 = a2 ^ a5\n  3942: a2 = a2 <u a5\n  3945: a3 = a3 <u t2\n  3948: a3 = a2 if a0 != 0\n  3951: a0 = a1 - a4\n  3954: a0 = a0 <u a3\n  3957: a1 = a1 <u a4\n  3960: a2 = t1 - t0\n  3963: a2 = a2 - a1\n  3966: a2 = a2 - a0\n  3969: jump @97 if a2 <s 0\n      : @96 (gas: 1)\n  3972: ret\n      : @97 (gas: 5)\n  3974: sp = sp + 0xfffffffffffffff8\n  3977: u64 [sp] = ra\n  3979: a0 = 0\n  3981: a1 = 0\n  3983: ra = 66, jump @0\n      : @98 [@dyn 33] (gas: 6)\n  3988: i32 a1 = a0 + 0\n  3990: a0 = 0x1\n  3993: a2 = 0\n  3995: ra = 0x44\n  3998: ecalli 10 // 'seal_return'\n  4000: fallthrough\n      : @99 [@dyn 34] (gas: 13)\n  4001: sp = sp + 0xffffffffffffffb0\n  4004: u64 [sp + 0x48] = ra\n  4007: u64 [sp + 0x40] = s0\n  4010: s0 = sp + 0x50\n  4013: sp = sp & 0xfffffffffffffff0\n  4016: u64 [sp + 48] = 0\n  4019: u64 [sp + 40] = 0\n  4022: u64 [sp + 32] = 0\n  4025: a0 = 0x4e487b7100000000\n  4035: a1 = sp + 0x20\n  4038: u64 [sp + 0x38] = a0\n  4041: a0 = 0\n  4043: ra = 70, jump @23\n      : @100 [@dyn 35] (gas: 7)\n  4048: u64 [sp + 24] = 0\n  4051: u64 [sp + 16] = 0\n  4054: u64 [sp + 8] = 0\n  4057: a0 = 0x4\n  4060: a1 = sp\n  4062: u64 [sp + 0] = 0\n  4064: ra = 72, jump @23\n      : @101 [@dyn 36] (gas: 3)\n  4069: a1 = 0x24\n  4072: a0 = 0\n  4074: ra = 74, jump @0\n      : @102 [@dyn 37] (gas: 6)\n  4079: i32 a1 = a0 + 0\n  4081: a0 = 0x1\n  4084: a2 = 0x24\n  4087: ra = 0x4c\n  4090: ecalli 10 // 'seal_return'\n  4092: fallthrough\n      : @103 [@dyn 38] (gas: 20)\n  4093: sp = sp + 0xffffffffffffffb0\n  4096: u64 [sp + 0x48] = ra\n  4099: u64 [sp + 0x40] = s0\n  4102: u64 [sp + 0x38] = s1\n  4105: a4 = u64 [a1 + 0x10]\n  4108: a3 = u64 [a1 + 0x18]\n  4111: a5 = u64 [a1 + 0x8]\n  4114: s0 = u64 [a1]\n  4116: u64 [sp + 0x28] = a3\n  4119: u64 [sp + 0x20] = a5\n  4122: a1 = a5 | a3\n  4125: a3 = s0 | a4\n  4128: a3 = a3 | a1\n  4131: a3 = a3 >> 0x20\n  4134: u64 [sp + 0x30] = a4\n  4137: a1 = a1 | a4\n  4140: a1 = a1 << 0x20\n  4143: a1 = a1 | a3\n  4146: u64 [sp + 0x18] = a0\n  4149: jump @106 if a1 != 0\n      : @104 (gas: 10)\n  4153: a0 = u64 [a2 + 0x18]\n  4156: u64 [sp] = a0\n  4158: s1 = u64 [a2 + 0x10]\n  4161: a0 = u64 [a2 + 0x8]\n  4164: u64 [sp + 0x8] = a0\n  4167: a0 = u64 [a2]\n  4169: u64 [sp + 0x10] = a0\n  4172: i32 a0 = s0 + 0\n  4174: a1 = 0x20\n  4177: ra = 78, jump @0\n      : @105 [@dyn 39] (gas: 88)\n  4182: a1 = u64 [sp]\n  4184: a1 = reverse a1\n  4186: a2 = reverse s1\n  4188: a3 = u64 [sp + 0x8]\n  4191: a3 = reverse a3\n  4193: a4 = u64 [sp + 0x10]\n  4196: a4 = reverse a4\n  4198: a5 = a4 >> 0x38\n  4201: u8 [a0 + 0x1f] = a5\n  4204: a5 = a4 >> 0x30\n  4207: u8 [a0 + 0x1e] = a5\n  4210: a5 = a4 >> 0x28\n  4213: u8 [a0 + 0x1d] = a5\n  4216: a5 = a4 >> 0x20\n  4219: u8 [a0 + 0x1c] = a5\n  4222: a5 = a4 >> 0x18\n  4225: u8 [a0 + 0x1b] = a5\n  4228: a5 = a4 >> 0x10\n  4231: u8 [a0 + 0x1a] = a5\n  4234: a5 = a4 >> 0x8\n  4237: u8 [a0 + 0x19] = a5\n  4240: u8 [a0 + 0x18] = a4\n  4243: u8 [a0 + 0x10] = a3\n  4246: a4 = a3 >> 0x38\n  4249: u8 [a0 + 0x17] = a4\n  4252: a4 = a3 >> 0x30\n  4255: u8 [a0 + 0x16] = a4\n  4258: a4 = a3 >> 0x28\n  4261: u8 [a0 + 0x15] = a4\n  4264: a4 = a3 >> 0x20\n  4267: u8 [a0 + 0x14] = a4\n  4270: a4 = a3 >> 0x18\n  4273: u8 [a0 + 0x13] = a4\n  4276: a4 = a3 >> 0x10\n  4279: u8 [a0 + 0x12] = a4\n  4282: a3 = a3 >> 0x8\n  4285: u8 [a0 + 0x11] = a3\n  4288: u8 [a0 + 0x8] = a2\n  4291: a3 = a2 >> 0x38\n  4294: u8 [a0 + 0xf] = a3\n  4297: a3 = a2 >> 0x30\n  4300: u8 [a0 + 0xe] = a3\n  4303: a3 = a2 >> 0x28\n  4306: u8 [a0 + 0xd] = a3\n  4309: a3 = a2 >> 0x20\n  4312: u8 [a0 + 0xc] = a3\n  4315: a3 = a2 >> 0x18\n  4318: u8 [a0 + 0xb] = a3\n  4321: a3 = a2 >> 0x10\n  4324: u8 [a0 + 0xa] = a3\n  4327: a2 = a2 >> 0x8\n  4330: u8 [a0 + 0x9] = a2\n  4333: u8 [a0] = a1\n  4335: a2 = a1 >> 0x38\n  4338: u8 [a0 + 0x7] = a2\n  4341: a2 = a1 >> 0x30\n  4344: u8 [a0 + 0x6] = a2\n  4347: a2 = a1 >> 0x28\n  4350: u8 [a0 + 0x5] = a2\n  4353: a2 = a1 >> 0x20\n  4356: u8 [a0 + 0x4] = a2\n  4359: a2 = a1 >> 0x18\n  4362: u8 [a0 + 0x3] = a2\n  4365: a2 = a1 >> 0x10\n  4368: u8 [a0 + 0x2] = a2\n  4371: a1 = a1 >> 0x8\n  4374: u8 [a0 + 0x1] = a1\n  4377: a0 = s0 + 0x20\n  4380: a1 = a0 <u s0\n  4383: a3 = u64 [sp + 0x20]\n  4386: a2 = a3 + a1\n  4389: a3 = a2 <u a3\n  4392: a3 = a1 if a1 == 0\n  4395: a1 = u64 [sp + 0x30]\n  4398: a3 = a3 + a1\n  4401: a1 = a3 <u a1\n  4404: a4 = u64 [sp + 0x28]\n  4407: a1 = a1 + a4\n  4410: a4 = u64 [sp + 0x18]\n  4413: u64 [a4] = a0\n  4415: u64 [a4 + 0x8] = a2\n  4418: u64 [a4 + 0x10] = a3\n  4421: u64 [a4 + 0x18] = a1\n  4424: ra = u64 [sp + 0x48]\n  4427: s0 = u64 [sp + 0x40]\n  4430: s1 = u64 [sp + 0x38]\n  4433: sp = sp + 0x50\n  4436: ret\n      : @106 (gas: 1)\n  4438: trap\n      : @107 (gas: 39)\n  4439: sp = sp + 0xfffffffffffffea0\n  4443: u64 [sp + 0x158] = ra\n  4447: u64 [sp + 0x150] = s0\n  4451: u64 [sp + 0x148] = s1\n  4455: s0 = sp + 0x160\n  4459: sp = sp & 0xffffffffffffffe0\n  4462: u64 [sp + 0x8] = a0\n  4465: a0 = u64 [a2 + 0x18]\n  4468: u64 [sp + 0xb0] = a0\n  4472: a0 = u64 [a2 + 0x10]\n  4475: u64 [sp + 0xa8] = a0\n  4479: a0 = u64 [a2 + 0x8]\n  4482: u64 [sp + 0xa0] = a0\n  4486: a0 = u64 [a2]\n  4488: u64 [sp + 0xb8] = a0\n  4492: a4 = u64 [a1 + 0x18]\n  4495: a3 = u64 [a1 + 0x10]\n  4498: a2 = u64 [a1 + 0x8]\n  4501: a0 = u64 [a1]\n  4503: u64 [sp + 0x18] = a4\n  4506: u64 [sp + 0x118] = a4\n  4510: u64 [sp + 0x20] = a3\n  4513: u64 [sp + 0x110] = a3\n  4517: u64 [sp + 0x68] = a2\n  4520: u64 [sp + 0x108] = a2\n  4524: u64 [sp + 0x70] = a0\n  4527: u64 [sp + 0x100] = a0\n  4531: u64 [sp + 312] = 0\n  4535: u64 [sp + 304] = 0\n  4539: u64 [sp + 296] = 0\n  4543: u64 [sp + 288] = 0\n  4547: u32 [sp + 320] = 0x20\n  4552: i32 a1 = sp + 0x100\n  4556: i32 a3 = sp + 0x120\n  4560: i32 a4 = sp + 0x140\n  4564: a2 = 0xffffffffffffffff\n  4567: a0 = 0\n  4569: ecalli 6 // 'get_storage'\n  4571: fallthrough\n      : @108 (gas: 32)\n  4572: t0 = u64 [sp + 0x130]\n  4576: t1 = u64 [sp + 0x128]\n  4580: t2 = u64 [sp + 0x138]\n  4584: a5 = u64 [sp + 0x120]\n  4588: a0 = t0 << 0x3f\n  4591: a1 = t1 >> 0x1\n  4594: a0 = a0 | a1\n  4597: a1 = t2 << 0x3f\n  4600: a2 = t0 >> 0x1\n  4603: a1 = a1 | a2\n  4606: a2 = t1 << 0x3f\n  4609: a3 = a5 >> 0x1\n  4612: a4 = a3 | a2\n  4615: a2 = t2 >> 0x1\n  4618: u64 [sp + 0x78] = a5\n  4621: a5 = a5 & 0x1\n  4624: a3 = -a5\n  4626: ra = a4 & 0x7f\n  4629: a1 = a1 & a3\n  4632: s1 = a3 & a0\n  4635: a4 = ra if a5 == 0\n  4638: a2 = a2 & a3\n  4641: u64 [sp + 0x58] = a4\n  4644: a0 = a4 <u 0x20\n  4647: u64 [sp + 0x48] = s1\n  4650: a0 = 0 if s1 != 0\n  4652: u64 [sp + 0x50] = a1\n  4655: u64 [sp + 0x40] = a2\n  4658: a1 = a1 | a2\n  4661: a0 = 0 if a1 != 0\n  4663: a1 = a5 <u 0x1\n  4666: jump @127 if a1 != a0\n      : @109 (gas: 17)\n  4670: u64 [sp + 0x98] = a5\n  4674: u64 [sp + 0x10] = ra\n  4677: u64 [sp + 0x80] = t1\n  4681: u64 [sp + 0x88] = t0\n  4685: u64 [sp + 0x90] = t2\n  4689: a0 = u64 [sp + 0xb8]\n  4693: a2 = u64 [sp + 0xa8]\n  4697: a0 = a0 | a2\n  4700: a1 = u64 [sp + 0xb0]\n  4704: a3 = u64 [sp + 0xa0]\n  4708: a1 = a1 | a3\n  4711: a0 = a0 | a1\n  4714: a0 = a0 >> 0x20\n  4717: a1 = a1 | a2\n  4720: a1 = a1 << 0x20\n  4723: a0 = a0 | a1\n  4726: jump @126 if a0 != 0\n      : @110 (gas: 4)\n  4730: s1 = u64 [sp + 0xb8]\n  4734: i32 a0 = s1 + 0\n  4736: a1 = 0x20\n  4739: ra = 80, jump @0\n      : @111 [@dyn 40] (gas: 85)\n  4744: a1 = u64 [sp + 0x40]\n  4747: a1 = reverse a1\n  4749: a2 = u64 [sp + 0x58]\n  4752: a2 = reverse a2\n  4754: a3 = a2 >> 0x38\n  4757: u8 [a0 + 0x1f] = a3\n  4760: a3 = a2 >> 0x30\n  4763: u8 [a0 + 0x1e] = a3\n  4766: a3 = a2 >> 0x28\n  4769: u8 [a0 + 0x1d] = a3\n  4772: a3 = a2 >> 0x20\n  4775: u8 [a0 + 0x1c] = a3\n  4778: a3 = a2 >> 0x18\n  4781: u8 [a0 + 0x1b] = a3\n  4784: a3 = a2 >> 0x10\n  4787: u8 [a0 + 0x1a] = a3\n  4790: a3 = a2 >> 0x8\n  4793: u8 [a0 + 0x19] = a3\n  4796: a3 = u64 [sp + 0x48]\n  4799: a3 = reverse a3\n  4801: u8 [a0 + 0x18] = a2\n  4804: a2 = a3 >> 0x38\n  4807: u8 [a0 + 0x17] = a2\n  4810: a2 = a3 >> 0x30\n  4813: u8 [a0 + 0x16] = a2\n  4816: a2 = a3 >> 0x28\n  4819: u8 [a0 + 0x15] = a2\n  4822: a2 = a3 >> 0x20\n  4825: u8 [a0 + 0x14] = a2\n  4828: a2 = a3 >> 0x18\n  4831: u8 [a0 + 0x13] = a2\n  4834: a2 = a3 >> 0x10\n  4837: u8 [a0 + 0x12] = a2\n  4840: a2 = u64 [sp + 0x50]\n  4843: a2 = reverse a2\n  4845: u8 [a0 + 0x10] = a3\n  4848: a3 = a3 >> 0x8\n  4851: u8 [a0 + 0x11] = a3\n  4854: u8 [a0 + 0x8] = a2\n  4857: a3 = a2 >> 0x38\n  4860: u8 [a0 + 0xf] = a3\n  4863: a3 = a2 >> 0x30\n  4866: u8 [a0 + 0xe] = a3\n  4869: a3 = a2 >> 0x28\n  4872: u8 [a0 + 0xd] = a3\n  4875: a3 = a2 >> 0x20\n  4878: u8 [a0 + 0xc] = a3\n  4881: a3 = a2 >> 0x18\n  4884: u8 [a0 + 0xb] = a3\n  4887: a3 = a2 >> 0x10\n  4890: u8 [a0 + 0xa] = a3\n  4893: a2 = a2 >> 0x8\n  4896: u8 [a0 + 0x9] = a2\n  4899: u8 [a0] = a1\n  4901: a2 = a1 >> 0x38\n  4904: u8 [a0 + 0x7] = a2\n  4907: a2 = a1 >> 0x30\n  4910: u8 [a0 + 0x6] = a2\n  4913: a2 = a1 >> 0x28\n  4916: u8 [a0 + 0x5] = a2\n  4919: a2 = a1 >> 0x20\n  4922: u8 [a0 + 0x4] = a2\n  4925: a2 = a1 >> 0x18\n  4928: u8 [a0 + 0x3] = a2\n  4931: a2 = a1 >> 0x10\n  4934: u8 [a0 + 0x2] = a2\n  4937: a1 = a1 >> 0x8\n  4940: u8 [a0 + 0x1] = a1\n  4943: a0 = s1 + 0x20\n  4946: u64 [sp + 0x60] = a0\n  4949: a0 = a0 <u s1\n  4952: a3 = u64 [sp + 0xa0]\n  4956: a1 = a3 + a0\n  4959: u64 [sp + 0x28] = a1\n  4962: a1 = a1 <u a3\n  4965: a1 = a0 if a0 == 0\n  4968: a0 = u64 [sp + 0xa8]\n  4972: a1 = a1 + a0\n  4975: u64 [sp + 0x30] = a1\n  4978: a0 = a1 <u a0\n  4981: a1 = u64 [sp + 0xb0]\n  4985: a0 = a0 + a1\n  4988: u64 [sp + 0x38] = a0\n  4991: a0 = u64 [sp + 0x98]\n  4995: jump @115 if a0 != 0\n      : @112 (gas: 9)\n  4999: a0 = u64 [sp + 0xb0]\n  5003: a1 = u64 [sp + 0xa8]\n  5007: a0 = a0 | a1\n  5010: a1 = 0xffffffe0\n  5020: a2 = u64 [sp + 0xb8]\n  5024: a1 = a2 <u a1\n  5027: a1 = 0 if a3 != 0\n  5029: a1 = 0 if a0 != 0\n  5031: jump @126 if a1 == 0\n      : @113 (gas: 5)\n  5035: a0 = u64 [sp + 0x78]\n  5038: s1 = a0 & 0xffffffffffffff00\n  5042: a0 = i32 [sp + 0x60]\n  5045: a1 = 0x20\n  5048: ra = 82, jump @0\n      : @114 [@dyn 41] (gas: 73)\n  5053: t0 = 0\n  5055: t1 = 0\n  5057: u64 [sp + 176] = 0\n  5061: a3 = reverse s1\n  5063: a4 = a3 >> 0x30\n  5066: u8 [a0 + 0x1e] = a4\n  5069: a4 = a3 >> 0x28\n  5072: u8 [a0 + 0x1d] = a4\n  5075: a4 = a3 >> 0x20\n  5078: u8 [a0 + 0x1c] = a4\n  5081: a4 = a3 >> 0x18\n  5084: u8 [a0 + 0x1b] = a4\n  5087: a4 = a3 >> 0x10\n  5090: u8 [a0 + 0x1a] = a4\n  5093: a1 = u64 [sp + 0x80]\n  5097: a4 = reverse a1\n  5099: u8 [a0 + 0x18] = a3\n  5102: a3 = a3 >> 0x8\n  5105: u8 [a0 + 0x19] = a3\n  5108: a3 = a4 >> 0x38\n  5111: u8 [a0 + 0x17] = a3\n  5114: a3 = a4 >> 0x30\n  5117: u8 [a0 + 0x16] = a3\n  5120: a3 = a4 >> 0x28\n  5123: u8 [a0 + 0x15] = a3\n  5126: a3 = a4 >> 0x20\n  5129: u8 [a0 + 0x14] = a3\n  5132: a3 = a4 >> 0x18\n  5135: u8 [a0 + 0x13] = a3\n  5138: a3 = a4 >> 0x10\n  5141: u8 [a0 + 0x12] = a3\n  5144: a1 = u64 [sp + 0x88]\n  5148: a3 = reverse a1\n  5150: u8 [a0 + 0x10] = a4\n  5153: a4 = a4 >> 0x8\n  5156: u8 [a0 + 0x11] = a4\n  5159: a4 = a3 >> 0x38\n  5162: u8 [a0 + 0xf] = a4\n  5165: a4 = a3 >> 0x30\n  5168: u8 [a0 + 0xe] = a4\n  5171: a4 = a3 >> 0x28\n  5174: u8 [a0 + 0xd] = a4\n  5177: a4 = a3 >> 0x20\n  5180: u8 [a0 + 0xc] = a4\n  5183: a4 = a3 >> 0x18\n  5186: u8 [a0 + 0xb] = a4\n  5189: a4 = a3 >> 0x10\n  5192: u8 [a0 + 0xa] = a4\n  5195: a1 = u64 [sp + 0x90]\n  5199: a4 = reverse a1\n  5201: u8 [a0 + 31] = 0\n  5204: u8 [a0 + 0x8] = a3\n  5207: a3 = a3 >> 0x8\n  5210: u8 [a0 + 0x9] = a3\n  5213: u8 [a0] = a4\n  5215: a3 = a4 >> 0x38\n  5218: u8 [a0 + 0x7] = a3\n  5221: a3 = a4 >> 0x30\n  5224: u8 [a0 + 0x6] = a3\n  5227: a3 = a4 >> 0x28\n  5230: u8 [a0 + 0x5] = a3\n  5233: a3 = a4 >> 0x20\n  5236: u8 [a0 + 0x4] = a3\n  5239: a3 = a4 >> 0x18\n  5242: u8 [a0 + 0x3] = a3\n  5245: a3 = a4 >> 0x10\n  5248: u8 [a0 + 0x2] = a3\n  5251: a4 = a4 >> 0x8\n  5254: u8 [a0 + 0x1] = a4\n  5257: a0 = u64 [sp + 0x10]\n  5260: a0 = a0 >u 0\n  5262: ra = a0 << 0x5\n  5265: jump @125\n      : @115 (gas: 3)\n  5268: a1 = 0x20\n  5271: a0 = 0\n  5273: ra = 84, jump @0\n      : @116 [@dyn 42] (gas: 71)\n  5278: a1 = u64 [sp + 0x18]\n  5281: a1 = reverse a1\n  5283: a2 = u64 [sp + 0x20]\n  5286: a2 = reverse a2\n  5288: a3 = u64 [sp + 0x68]\n  5291: a3 = reverse a3\n  5293: a4 = u64 [sp + 0x70]\n  5296: a4 = reverse a4\n  5298: a5 = a4 >> 0x38\n  5301: u8 [a0 + 0x1f] = a5\n  5304: a5 = a4 >> 0x30\n  5307: u8 [a0 + 0x1e] = a5\n  5310: a5 = a4 >> 0x28\n  5313: u8 [a0 + 0x1d] = a5\n  5316: a5 = a4 >> 0x20\n  5319: u8 [a0 + 0x1c] = a5\n  5322: a5 = a4 >> 0x18\n  5325: u8 [a0 + 0x1b] = a5\n  5328: a5 = a4 >> 0x10\n  5331: u8 [a0 + 0x1a] = a5\n  5334: a5 = a4 >> 0x8\n  5337: u8 [a0 + 0x19] = a5\n  5340: u8 [a0 + 0x18] = a4\n  5343: u8 [a0 + 0x10] = a3\n  5346: a4 = a3 >> 0x38\n  5349: u8 [a0 + 0x17] = a4\n  5352: a4 = a3 >> 0x30\n  5355: u8 [a0 + 0x16] = a4\n  5358: a4 = a3 >> 0x28\n  5361: u8 [a0 + 0x15] = a4\n  5364: a4 = a3 >> 0x20\n  5367: u8 [a0 + 0x14] = a4\n  5370: a4 = a3 >> 0x18\n  5373: u8 [a0 + 0x13] = a4\n  5376: a4 = a3 >> 0x10\n  5379: u8 [a0 + 0x12] = a4\n  5382: a3 = a3 >> 0x8\n  5385: u8 [a0 + 0x11] = a3\n  5388: u8 [a0 + 0x8] = a2\n  5391: a3 = a2 >> 0x38\n  5394: u8 [a0 + 0xf] = a3\n  5397: a3 = a2 >> 0x30\n  5400: u8 [a0 + 0xe] = a3\n  5403: a3 = a2 >> 0x28\n  5406: u8 [a0 + 0xd] = a3\n  5409: a3 = a2 >> 0x20\n  5412: u8 [a0 + 0xc] = a3\n  5415: a3 = a2 >> 0x18\n  5418: u8 [a0 + 0xb] = a3\n  5421: a3 = a2 >> 0x10\n  5424: u8 [a0 + 0xa] = a3\n  5427: a2 = a2 >> 0x8\n  5430: u8 [a0 + 0x9] = a2\n  5433: u8 [a0] = a1\n  5435: a2 = a1 >> 0x38\n  5438: u8 [a0 + 0x7] = a2\n  5441: a2 = a1 >> 0x30\n  5444: u8 [a0 + 0x6] = a2\n  5447: a2 = a1 >> 0x28\n  5450: u8 [a0 + 0x5] = a2\n  5453: a2 = a1 >> 0x20\n  5456: u8 [a0 + 0x4] = a2\n  5459: a2 = a1 >> 0x18\n  5462: u8 [a0 + 0x3] = a2\n  5465: a2 = a1 >> 0x10\n  5468: u8 [a0 + 0x2] = a2\n  5471: a1 = a1 >> 0x8\n  5474: u8 [a0 + 0x1] = a1\n  5477: a1 = 0x20\n  5480: a0 = 0\n  5482: ra = 86, jump @0\n      : @117 [@dyn 43] (gas: 5)\n  5487: i32 a0 = a0 + 0\n  5489: i32 a2 = sp + 0x120\n  5493: a1 = 0x20\n  5496: ecalli 7 // 'hash_keccak_256'\n  5498: fallthrough\n      : @118 (gas: 9)\n  5499: a0 = u64 [sp + 0x78]\n  5502: a0 = a0 <u 0x2\n  5505: a1 = u64 [sp + 0x80]\n  5509: a0 = 0 if a1 != 0\n  5511: a1 = u64 [sp + 0x90]\n  5515: a2 = u64 [sp + 0x88]\n  5519: a1 = a1 | a2\n  5522: a0 = 0 if a1 != 0\n  5524: jump @120 if a0 == 0\n      : @119 (gas: 5)\n  5527: ra = 0\n  5529: t0 = 0\n  5531: t1 = 0\n  5533: u64 [sp + 176] = 0\n  5537: jump @125\n      : @120 (gas: 19)\n  5540: u64 [sp + 168] = 0\n  5544: u64 [sp + 160] = 0\n  5548: s1 = 0\n  5550: u64 [sp + 176] = 0\n  5554: a0 = u64 [sp + 0x120]\n  5558: a1 = u64 [sp + 0x128]\n  5562: a2 = u64 [sp + 0x130]\n  5566: a3 = u64 [sp + 0x138]\n  5570: a0 = reverse a0\n  5572: a5 = reverse a1\n  5574: a1 = reverse a2\n  5576: t2 = reverse a3\n  5578: i32 a3 = sp + 0x100\n  5582: u64 [sp + 0x20] = a3\n  5585: i32 a3 = sp + 0x120\n  5589: u64 [sp + 0x18] = a3\n  5592: i32 a3 = sp + 0x140\n  5596: u64 [sp + 0x10] = a3\n  5599: fallthrough\n      : @121 (gas: 20)\n  5600: u64 [sp + 0x88] = a5\n  5604: u64 [sp + 0x110] = a5\n  5608: u64 [sp + 0xb8] = a1\n  5612: u64 [sp + 0x108] = a1\n  5616: u64 [sp + 0x90] = t2\n  5620: u64 [sp + 0x100] = t2\n  5624: u64 [sp + 0x98] = a0\n  5628: u64 [sp + 0x118] = a0\n  5632: u64 [sp + 312] = 0\n  5636: u64 [sp + 304] = 0\n  5640: u64 [sp + 296] = 0\n  5644: u64 [sp + 288] = 0\n  5648: u32 [sp + 320] = 0x20\n  5653: a2 = 0xffffffffffffffff\n  5656: a0 = 0\n  5658: a1 = u64 [sp + 0x20]\n  5661: a3 = u64 [sp + 0x18]\n  5664: a4 = u64 [sp + 0x10]\n  5667: ecalli 6 // 'get_storage'\n  5669: fallthrough\n      : @122 (gas: 30)\n  5670: a0 = u64 [sp + 0x60]\n  5673: a1 = u64 [sp + 0xa8]\n  5677: a0 = a0 + a1\n  5680: a1 = a0 <u a1\n  5683: a2 = u64 [sp + 0x28]\n  5686: a4 = u64 [sp + 0xa0]\n  5690: a2 = a2 + a4\n  5693: a2 = a2 + a1\n  5696: a3 = a2 ^ a4\n  5699: a4 = a2 <u a4\n  5702: a4 = a1 if a3 == 0\n  5705: a1 = u64 [sp + 0x30]\n  5708: a1 = a1 + s1\n  5711: u64 [sp + 0x80] = s1\n  5715: a3 = a1 <u s1\n  5718: a5 = u64 [sp + 0x38]\n  5721: s1 = u64 [sp + 0xb0]\n  5725: a5 = a5 + s1\n  5728: a3 = a3 + a5\n  5731: a4 = a4 + a1\n  5734: a1 = a4 <u a1\n  5737: a1 = a1 + a3\n  5740: a1 = a1 | a2\n  5743: a2 = a0 | a4\n  5746: a2 = a2 | a1\n  5749: a1 = a1 | a4\n  5752: a2 = a2 >> 0x20\n  5755: a1 = a1 << 0x20\n  5758: a1 = a1 | a2\n  5761: jump @126 if a1 != 0\n      : @123 (gas: 10)\n  5765: a1 = u64 [sp + 0x138]\n  5769: u64 [sp + 0x70] = a1\n  5772: a1 = u64 [sp + 0x130]\n  5776: u64 [sp + 0x78] = a1\n  5779: a1 = u64 [sp + 0x128]\n  5783: u64 [sp + 0x68] = a1\n  5786: s1 = u64 [sp + 0x120]\n  5790: i32 a0 = a0 + 0\n  5792: a1 = 0x20\n  5795: ra = 88, jump @0\n      : @124 [@dyn 44] (gas: 115)\n  5800: a1 = reverse s1\n  5802: a2 = a1 >> 0x38\n  5805: u8 [a0 + 0x1f] = a2\n  5808: a2 = a1 >> 0x30\n  5811: u8 [a0 + 0x1e] = a2\n  5814: a2 = a1 >> 0x28\n  5817: u8 [a0 + 0x1d] = a2\n  5820: a2 = a1 >> 0x20\n  5823: u8 [a0 + 0x1c] = a2\n  5826: a2 = a1 >> 0x18\n  5829: u8 [a0 + 0x1b] = a2\n  5832: a2 = a1 >> 0x10\n  5835: u8 [a0 + 0x1a] = a2\n  5838: a2 = a1 >> 0x8\n  5841: u8 [a0 + 0x19] = a2\n  5844: a2 = u64 [sp + 0x68]\n  5847: a2 = reverse a2\n  5849: u8 [a0 + 0x18] = a1\n  5852: a1 = a2 >> 0x38\n  5855: u8 [a0 + 0x17] = a1\n  5858: a1 = a2 >> 0x30\n  5861: u8 [a0 + 0x16] = a1\n  5864: a1 = a2 >> 0x28\n  5867: u8 [a0 + 0x15] = a1\n  5870: a1 = a2 >> 0x20\n  5873: u8 [a0 + 0x14] = a1\n  5876: a1 = a2 >> 0x18\n  5879: u8 [a0 + 0x13] = a1\n  5882: a1 = a2 >> 0x10\n  5885: u8 [a0 + 0x12] = a1\n  5888: a1 = u64 [sp + 0x70]\n  5891: a1 = reverse a1\n  5893: a3 = u64 [sp + 0x78]\n  5896: a3 = reverse a3\n  5898: u8 [a0 + 0x10] = a2\n  5901: a2 = a2 >> 0x8\n  5904: u8 [a0 + 0x11] = a2\n  5907: u8 [a0 + 0x8] = a3\n  5910: a2 = a3 >> 0x38\n  5913: u8 [a0 + 0xf] = a2\n  5916: a2 = a3 >> 0x30\n  5919: u8 [a0 + 0xe] = a2\n  5922: a2 = a3 >> 0x28\n  5925: u8 [a0 + 0xd] = a2\n  5928: a2 = a3 >> 0x20\n  5931: u8 [a0 + 0xc] = a2\n  5934: a2 = a3 >> 0x18\n  5937: u8 [a0 + 0xb] = a2\n  5940: a2 = a3 >> 0x10\n  5943: u8 [a0 + 0xa] = a2\n  5946: a3 = a3 >> 0x8\n  5949: u8 [a0 + 0x9] = a3\n  5952: u8 [a0] = a1\n  5954: a2 = a1 >> 0x38\n  5957: u8 [a0 + 0x7] = a2\n  5960: a2 = a1 >> 0x30\n  5963: u8 [a0 + 0x6] = a2\n  5966: a2 = a1 >> 0x28\n  5969: u8 [a0 + 0x5] = a2\n  5972: a2 = a1 >> 0x20\n  5975: u8 [a0 + 0x4] = a2\n  5978: a2 = a1 >> 0x18\n  5981: u8 [a0 + 0x3] = a2\n  5984: a2 = a1 >> 0x10\n  5987: u8 [a0 + 0x2] = a2\n  5990: a1 = a1 >> 0x8\n  5993: u8 [a0 + 0x1] = a1\n  5996: t2 = u64 [sp + 0x90]\n  6000: t2 = t2 + 0x1\n  6003: a0 = t2 <u 0x1\n  6006: a1 = u64 [sp + 0xb8]\n  6010: a1 = a1 + a0\n  6013: u64 [sp + 0xb8] = a1\n  6017: a0 = u64 [sp + 0xa8]\n  6021: ra = a0 + 0x20\n  6024: a2 = ra <u a0\n  6027: a0 = u64 [sp + 0xa0]\n  6031: t0 = a0 + a2\n  6034: a3 = t0 <u a0\n  6037: a3 = a2 if a2 == 0\n  6040: a0 = u64 [sp + 0x80]\n  6044: t1 = a0 + a3\n  6047: a3 = t1 <u a0\n  6050: a5 = u64 [sp + 0xb0]\n  6054: a5 = a5 + a3\n  6057: a1 = u64 [sp + 0x50]\n  6060: a0 = t1 <u a1\n  6063: u64 [sp + 0xa8] = a0\n  6067: a2 = u64 [sp + 0x58]\n  6070: a4 = ra <u a2\n  6073: a2 = u64 [sp + 0x48]\n  6076: s1 = t0 ^ a2\n  6079: a3 = t0 <u a2\n  6082: a3 = a4 if s1 == 0\n  6085: a2 = u64 [sp + 0x40]\n  6088: a0 = a5 ^ a2\n  6091: u64 [sp + 0xb0] = a5\n  6095: s1 = a5 <u a2\n  6098: a2 = u64 [sp + 0xa8]\n  6102: s1 = a2 if a0 == 0\n  6105: a4 = t1 ^ a1\n  6108: a1 = u64 [sp + 0xb8]\n  6112: a0 = a0 | a4\n  6115: a5 = t2 | a1\n  6118: a5 = a5 <u 0x1\n  6121: a4 = u64 [sp + 0x88]\n  6125: a5 = a5 + a4\n  6128: a4 = a5 <u a4\n  6131: a3 = s1 if a0 != 0\n  6134: a0 = u64 [sp + 0x98]\n  6138: a0 = a0 + a4\n  6141: u64 [sp + 0xa8] = ra\n  6145: u64 [sp + 0xa0] = t0\n  6149: s1 = t1\n  6151: jump @121 if a3 != 0\n      : @125 (gas: 30)\n  6155: a3 = u64 [sp + 0x60]\n  6158: a3 = a3 + ra\n  6161: a0 = a3 <u ra\n  6164: a4 = u64 [sp + 0x28]\n  6167: a4 = a4 + t0\n  6170: a4 = a4 + a0\n  6173: a5 = a4 ^ t0\n  6176: a1 = a4 <u t0\n  6179: a1 = a0 if a5 == 0\n  6182: a0 = u64 [sp + 0x30]\n  6185: a0 = a0 + t1\n  6188: a1 = a1 + a0\n  6191: a5 = a1 <u a0\n  6194: a0 = a0 <u t1\n  6197: a2 = u64 [sp + 0x38]\n  6200: s1 = u64 [sp + 0xb0]\n  6204: a2 = a2 + s1\n  6207: a0 = a0 + a2\n  6210: a0 = a0 + a5\n  6213: a2 = u64 [sp + 0x8]\n  6216: u64 [a2] = a3\n  6218: u64 [a2 + 0x8] = a4\n  6221: u64 [a2 + 0x10] = a1\n  6224: u64 [a2 + 0x18] = a0\n  6227: sp = s0 + 0xfffffffffffffea0\n  6231: ra = u64 [sp + 0x158]\n  6235: s0 = u64 [sp + 0x150]\n  6239: s1 = u64 [sp + 0x148]\n  6243: sp = sp + 0x160\n  6247: ret\n      : @126 (gas: 1)\n  6249: trap\n      : @127 (gas: 8)\n  6250: u64 [sp + 240] = 0\n  6254: u64 [sp + 232] = 0\n  6258: u64 [sp + 224] = 0\n  6262: a0 = 0x4e487b7100000000\n  6272: a1 = sp + 0xe0\n  6276: u64 [sp + 0xf8] = a0\n  6280: a0 = 0\n  6282: ra = 90, jump @23\n      : @128 [@dyn 45] (gas: 7)\n  6287: u64 [sp + 216] = 0\n  6291: u64 [sp + 208] = 0\n  6295: u64 [sp + 192] = 0x22\n  6300: a0 = 0x4\n  6303: a1 = sp + 0xc0\n  6307: u64 [sp + 200] = 0\n  6311: ra = 92, jump @23\n      : @129 [@dyn 46] (gas: 3)\n  6316: a1 = 0x24\n  6319: a0 = 0\n  6321: ra = 94, jump @0\n      : @130 [@dyn 47] (gas: 6)\n  6326: i32 a1 = a0 + 0\n  6328: a0 = 0x1\n  6331: a2 = 0x24\n  6334: ra = 0x60\n  6337: ecalli 10 // 'seal_return'\n  6339: fallthrough\n      : @131 [@dyn 48] (gas: 27)\n  6340: sp = sp + 0xffffffffffffff80\n  6343: u64 [sp + 0x78] = ra\n  6346: u64 [sp + 0x70] = s0\n  6349: u64 [sp + 0x68] = s1\n  6352: s0 = sp + 0x80\n  6356: sp = sp & 0xfffffffffffffff0\n  6359: t0 = u64 [a1]\n  6361: t1 = u64 [a1 + 0x8]\n  6364: t2 = u64 [a1 + 0x10]\n  6367: a1 = u64 [a1 + 0x18]\n  6370: a3 = u64 [a2]\n  6372: a4 = u64 [a2 + 0x8]\n  6375: a5 = u64 [a2 + 0x10]\n  6378: a2 = u64 [a2 + 0x18]\n  6381: s1 = a0\n  6383: u64 [sp + 0x18] = a2\n  6386: u64 [sp + 0x10] = a5\n  6389: u64 [sp + 0x8] = a4\n  6392: u64 [sp] = a3\n  6394: u64 [sp + 0x38] = a1\n  6397: u64 [sp + 0x30] = t2\n  6400: u64 [sp + 0x28] = t1\n  6403: a0 = sp + 0x40\n  6406: a1 = sp + 0x20\n  6409: a2 = sp\n  6411: u64 [sp + 0x20] = t0\n  6414: ra = 98, jump @107\n      : @132 [@dyn 49] (gas: 14)\n  6419: a0 = u64 [sp + 0x50]\n  6422: a1 = u64 [sp + 0x58]\n  6425: a2 = u64 [sp + 0x40]\n  6428: a3 = u64 [sp + 0x48]\n  6431: u64 [s1 + 0x10] = a0\n  6434: u64 [s1 + 0x18] = a1\n  6437: u64 [s1] = a2\n  6439: u64 [s1 + 0x8] = a3\n  6442: sp = s0 + 0xffffffffffffff80\n  6445: ra = u64 [sp + 0x78]\n  6448: s0 = u64 [sp + 0x70]\n  6451: s1 = u64 [sp + 0x68]\n  6454: sp = sp + 0x80\n  6458: ret\n      : @133 (gas: 18)\n  6460: sp = sp + 0xffffffffffffff00\n  6464: u64 [sp + 0xf8] = ra\n  6468: u64 [sp + 0xf0] = s0\n  6472: u64 [sp + 0xe8] = s1\n  6476: s0 = sp + 0x100\n  6480: sp = sp & 0xfffffffffffffff0\n  6483: a2 = u64 [a1]\n  6485: u64 [sp + 0x20] = a2\n  6488: a2 = u64 [a1 + 0x8]\n  6491: u64 [sp + 0x10] = a2\n  6494: a2 = u64 [a1 + 0x10]\n  6497: u64 [sp + 0x8] = a2\n  6500: a1 = u64 [a1 + 0x18]\n  6503: u64 [sp] = a1\n  6505: u64 [sp + 0x18] = a0\n  6508: a0 = 0x40\n  6511: a1 = 0x20\n  6514: ra = 100, jump @0\n      : @134 [@dyn 50] (gas: 111)\n  6519: a1 = u8 [a0 + 0x1]\n  6522: a2 = u8 [a0]\n  6524: a3 = u8 [a0 + 0x2]\n  6527: a4 = u8 [a0 + 0x3]\n  6530: a1 = a1 << 0x8\n  6533: a1 = a1 | a2\n  6536: a3 = a3 << 0x10\n  6539: a4 = a4 << 0x18\n  6542: a3 = a3 | a4\n  6545: a1 = a1 | a3\n  6548: a2 = u8 [a0 + 0x5]\n  6551: a3 = u8 [a0 + 0x4]\n  6554: a4 = u8 [a0 + 0x6]\n  6557: a5 = u8 [a0 + 0x7]\n  6560: a2 = a2 << 0x8\n  6563: a2 = a2 | a3\n  6566: a4 = a4 << 0x10\n  6569: a5 = a5 << 0x18\n  6572: a4 = a4 | a5\n  6575: a2 = a2 | a4\n  6578: a2 = a2 << 0x20\n  6581: t0 = a2 | a1\n  6584: a2 = u8 [a0 + 0x9]\n  6587: a3 = u8 [a0 + 0x8]\n  6590: a4 = u8 [a0 + 0xa]\n  6593: a5 = u8 [a0 + 0xb]\n  6596: a2 = a2 << 0x8\n  6599: a2 = a2 | a3\n  6602: a4 = a4 << 0x10\n  6605: a5 = a5 << 0x18\n  6608: a4 = a4 | a5\n  6611: a2 = a2 | a4\n  6614: a3 = u8 [a0 + 0xd]\n  6617: a4 = u8 [a0 + 0xc]\n  6620: a5 = u8 [a0 + 0xe]\n  6623: s1 = u8 [a0 + 0xf]\n  6626: a3 = a3 << 0x8\n  6629: a3 = a3 | a4\n  6632: a5 = a5 << 0x10\n  6635: s1 = s1 << 0x18\n  6638: a5 = a5 | s1\n  6641: a3 = a3 | a5\n  6644: a3 = a3 << 0x20\n  6647: a2 = a2 | a3\n  6650: a3 = u8 [a0 + 0x11]\n  6653: a4 = u8 [a0 + 0x10]\n  6656: a5 = u8 [a0 + 0x12]\n  6659: s1 = u8 [a0 + 0x13]\n  6662: a3 = a3 << 0x8\n  6665: a3 = a3 | a4\n  6668: a5 = a5 << 0x10\n  6671: s1 = s1 << 0x18\n  6674: a5 = a5 | s1\n  6677: a3 = a3 | a5\n  6680: a4 = u8 [a0 + 0x15]\n  6683: a5 = u8 [a0 + 0x14]\n  6686: s1 = u8 [a0 + 0x16]\n  6689: a1 = u8 [a0 + 0x17]\n  6692: a4 = a4 << 0x8\n  6695: a4 = a4 | a5\n  6698: s1 = s1 << 0x10\n  6701: a1 = a1 << 0x18\n  6704: a1 = a1 | s1\n  6707: a1 = a1 | a4\n  6710: a1 = a1 << 0x20\n  6713: a3 = a3 | a1\n  6716: a1 = u8 [a0 + 0x19]\n  6719: a4 = u8 [a0 + 0x18]\n  6722: a5 = u8 [a0 + 0x1a]\n  6725: s1 = u8 [a0 + 0x1b]\n  6728: a1 = a1 << 0x8\n  6731: a1 = a1 | a4\n  6734: a5 = a5 << 0x10\n  6737: s1 = s1 << 0x18\n  6740: a5 = a5 | s1\n  6743: a1 = a1 | a5\n  6746: a4 = u8 [a0 + 0x1d]\n  6749: a5 = u8 [a0 + 0x1c]\n  6752: s1 = u8 [a0 + 0x1e]\n  6755: a0 = u8 [a0 + 0x1f]\n  6758: a4 = a4 << 0x8\n  6761: a4 = a4 | a5\n  6764: s1 = s1 << 0x10\n  6767: a0 = a0 << 0x18\n  6770: a0 = a0 | s1\n  6773: a0 = a0 | a4\n  6776: a0 = a0 << 0x20\n  6779: a0 = a0 | a1\n  6782: a4 = reverse a0\n  6784: u64 [sp + 0x38] = a4\n  6787: s1 = reverse a3\n  6789: a2 = reverse a2\n  6791: u64 [sp + 0x30] = a2\n  6794: a1 = reverse t0\n  6796: u64 [sp + 0x28] = a1\n  6799: a0 = u64 [sp]\n  6801: u64 [sp + 0xb8] = a0\n  6805: a0 = u64 [sp + 0x8]\n  6808: u64 [sp + 0xb0] = a0\n  6812: a0 = u64 [sp + 0x10]\n  6815: u64 [sp + 0xa8] = a0\n  6819: a0 = u64 [sp + 0x20]\n  6822: u64 [sp + 0xa0] = a0\n  6826: u64 [sp + 0x98] = a1\n  6830: u64 [sp + 0x90] = a2\n  6834: u64 [sp + 0x88] = s1\n  6838: a0 = sp + 0xc0\n  6842: a1 = sp + 0xa0\n  6846: a2 = sp + 0x80\n  6850: u64 [sp + 0x80] = a4\n  6854: ra = 102, jump @107\n      : @135 [@dyn 51] (gas: 58)\n  6859: t2 = s1\n  6861: a3 = u64 [sp + 0xc8]\n  6865: a0 = u64 [sp + 0xd8]\n  6869: u64 [sp + 0x10] = a0\n  6872: a4 = u64 [sp + 0xc0]\n  6876: t1 = u64 [sp + 0xd0]\n  6880: a5 = a3 ^ s1\n  6883: a1 = a3 <u s1\n  6886: a2 = u64 [sp + 0x38]\n  6889: s1 = a4 <u a2\n  6892: a1 = s1 if a5 == 0\n  6895: a3 = a3 - t2\n  6898: a3 = a3 - s1\n  6901: u64 [sp + 0x8] = a3\n  6904: a4 = a4 - a2\n  6907: a5 = a4 + 0x1f\n  6910: a4 = a5 <u a4\n  6913: a3 = a3 + a4\n  6916: a5 = a5 & 0xffffffffffffffe0\n  6919: a0 = a3 + t2\n  6922: a2 = a2 + a5\n  6925: u64 [sp + 0x20] = a2\n  6928: a5 = a2 <u a5\n  6931: t0 = a0 + a5\n  6934: a0 = t0 ^ a3\n  6937: a2 = t0 <u a3\n  6940: a2 = a5 if a0 == 0\n  6943: s1 = u64 [sp + 0x30]\n  6946: a0 = t1 - s1\n  6949: a5 = t1 <u s1\n  6952: t1 = s1\n  6954: ra = u64 [sp + 0x28]\n  6957: s1 = u64 [sp + 0x10]\n  6960: s1 = s1 - ra\n  6963: s1 = s1 - a5\n  6966: a5 = a0 <u a1\n  6969: s1 = s1 - a5\n  6972: a0 = a0 - a1\n  6975: a1 = u64 [sp + 0x8]\n  6978: a1 = a3 <u a1\n  6981: a1 = a4 if a4 == 0\n  6984: a1 = a1 + a0\n  6987: a0 = a1 <u a0\n  6990: a3 = a1 + t1\n  6993: a5 = a3 + a2\n  6996: a1 = a3 <u a1\n  6999: a2 = a5 <u a3\n  7002: s1 = s1 + ra\n  7005: a0 = a0 + s1\n  7008: a0 = a0 + a1\n  7011: s1 = a0 + a2\n  7014: a0 = s1 >u 0\n  7016: a1 = a5 >u 0\n  7018: a1 = a0 if s1 != 0\n  7021: a0 = a5 | s1\n  7024: a2 = t0 >u 0\n  7026: a2 = a1 if a0 != 0\n  7029: jump @139 if a2 != 0\n      : @136 (gas: 15)\n  7033: a4 = t1\n  7035: a0 = u64 [sp + 0x38]\n  7038: a1 = u64 [sp + 0x20]\n  7041: a0 = a1 <u a0\n  7044: a1 = t0 ^ t2\n  7047: a2 = t0 <u t2\n  7050: a2 = a0 if a1 == 0\n  7053: a0 = a5 <u t1\n  7056: a1 = s1 ^ ra\n  7059: a3 = s1 <u ra\n  7062: a3 = a0 if a1 == 0\n  7065: a0 = a5 ^ t1\n  7068: a0 = a0 | a1\n  7071: a3 = a2 if a0 == 0\n  7074: jump @139 if a3 != 0\n      : @137 (gas: 6)\n  7078: a0 = 0x40\n  7081: a1 = 0x20\n  7084: u64 [sp + 0x10] = t2\n  7087: u64 [sp + 0x8] = t0\n  7090: u64 [sp] = a5\n  7092: ra = 104, jump @0\n      : @138 [@dyn 52] (gas: 82)\n  7097: a1 = reverse s1\n  7099: a2 = u64 [sp]\n  7101: a2 = reverse a2\n  7103: a3 = u64 [sp + 0x8]\n  7106: a3 = reverse a3\n  7108: a4 = u64 [sp + 0x20]\n  7111: a4 = reverse a4\n  7113: u8 [a0 + 0x18] = a4\n  7116: a5 = a4 >> 0x38\n  7119: u8 [a0 + 0x1f] = a5\n  7122: a5 = a4 >> 0x30\n  7125: u8 [a0 + 0x1e] = a5\n  7128: a5 = a4 >> 0x28\n  7131: u8 [a0 + 0x1d] = a5\n  7134: a5 = a4 >> 0x20\n  7137: u8 [a0 + 0x1c] = a5\n  7140: a5 = a4 >> 0x18\n  7143: u8 [a0 + 0x1b] = a5\n  7146: a5 = a4 >> 0x10\n  7149: u8 [a0 + 0x1a] = a5\n  7152: a4 = a4 >> 0x8\n  7155: u8 [a0 + 0x19] = a4\n  7158: u8 [a0 + 0x10] = a3\n  7161: a4 = a3 >> 0x38\n  7164: u8 [a0 + 0x17] = a4\n  7167: a4 = a3 >> 0x30\n  7170: u8 [a0 + 0x16] = a4\n  7173: a4 = a3 >> 0x28\n  7176: u8 [a0 + 0x15] = a4\n  7179: a4 = a3 >> 0x20\n  7182: u8 [a0 + 0x14] = a4\n  7185: a4 = a3 >> 0x18\n  7188: u8 [a0 + 0x13] = a4\n  7191: a4 = a3 >> 0x10\n  7194: u8 [a0 + 0x12] = a4\n  7197: a3 = a3 >> 0x8\n  7200: u8 [a0 + 0x11] = a3\n  7203: u8 [a0 + 0x8] = a2\n  7206: a3 = a2 >> 0x38\n  7209: u8 [a0 + 0xf] = a3\n  7212: a3 = a2 >> 0x30\n  7215: u8 [a0 + 0xe] = a3\n  7218: a3 = a2 >> 0x28\n  7221: u8 [a0 + 0xd] = a3\n  7224: a3 = a2 >> 0x20\n  7227: u8 [a0 + 0xc] = a3\n  7230: a3 = a2 >> 0x18\n  7233: u8 [a0 + 0xb] = a3\n  7236: a3 = a2 >> 0x10\n  7239: u8 [a0 + 0xa] = a3\n  7242: a2 = a2 >> 0x8\n  7245: u8 [a0 + 0x9] = a2\n  7248: u8 [a0] = a1\n  7250: a2 = a1 >> 0x38\n  7253: u8 [a0 + 0x7] = a2\n  7256: a2 = a1 >> 0x30\n  7259: u8 [a0 + 0x6] = a2\n  7262: a2 = a1 >> 0x28\n  7265: u8 [a0 + 0x5] = a2\n  7268: a2 = a1 >> 0x20\n  7271: u8 [a0 + 0x4] = a2\n  7274: a2 = a1 >> 0x18\n  7277: u8 [a0 + 0x3] = a2\n  7280: a2 = a1 >> 0x10\n  7283: u8 [a0 + 0x2] = a2\n  7286: a1 = a1 >> 0x8\n  7289: u8 [a0 + 0x1] = a1\n  7292: a0 = u64 [sp + 0x18]\n  7295: a1 = u64 [sp + 0x38]\n  7298: u64 [a0] = a1\n  7300: a1 = u64 [sp + 0x28]\n  7303: u64 [a0 + 0x18] = a1\n  7306: a1 = u64 [sp + 0x10]\n  7309: u64 [a0 + 0x8] = a1\n  7312: a1 = u64 [sp + 0x30]\n  7315: u64 [a0 + 0x10] = a1\n  7318: sp = s0 + 0xffffffffffffff00\n  7322: ra = u64 [sp + 0xf8]\n  7326: s0 = u64 [sp + 0xf0]\n  7330: s1 = u64 [sp + 0xe8]\n  7334: sp = sp + 0x100\n  7338: ret\n      : @139 (gas: 8)\n  7340: u64 [sp + 112] = 0\n  7343: u64 [sp + 104] = 0\n  7346: u64 [sp + 96] = 0\n  7349: a0 = 0x4e487b7100000000\n  7359: a1 = sp + 0x60\n  7362: u64 [sp + 0x78] = a0\n  7365: a0 = 0\n  7367: ra = 106, jump @23\n      : @140 [@dyn 53] (gas: 7)\n  7372: u64 [sp + 88] = 0\n  7375: u64 [sp + 80] = 0\n  7378: u64 [sp + 64] = 0x41\n  7382: a0 = 0x4\n  7385: a1 = sp + 0x40\n  7388: u64 [sp + 72] = 0\n  7391: ra = 108, jump @23\n      : @141 [@dyn 54] (gas: 3)\n  7396: a1 = 0x24\n  7399: a0 = 0\n  7401: ra = 110, jump @0\n      : @142 [@dyn 55] (gas: 6)\n  7406: i32 a1 = a0 + 0\n  7408: a0 = 0x1\n  7411: a2 = 0x24\n  7414: ra = 0x70\n  7417: ecalli 10 // 'seal_return'\n  7419: fallthrough\n      : @143 [@dyn 56] (gas: 14)\n  7420: sp = sp + 0xffffffffffffff60\n  7424: u64 [sp + 0x98] = ra\n  7428: u64 [sp + 0x90] = s0\n  7432: u64 [sp + 0x88] = s1\n  7436: s0 = sp + 0xa0\n  7440: sp = sp & 0xfffffffffffffff0\n  7443: a3 = u64 [a2 + 0x10]\n  7446: a4 = u64 [a2 + 0x18]\n  7449: a5 = u64 [a2 + 0x8]\n  7452: a2 = u64 [a2]\n  7454: a4 = a4 | a5\n  7457: a2 = a2 | a3\n  7460: a2 = a2 | a4\n  7463: jump @146 if a2 != 0\n      : @144 (gas: 12)\n  7466: s1 = a0\n  7468: a2 = u64 [a1 + 0x18]\n  7471: a0 = u64 [a1 + 0x10]\n  7474: a3 = u64 [a1 + 0x8]\n  7477: a1 = u64 [a1]\n  7479: u64 [sp] = a1\n  7481: u64 [sp + 0x8] = a3\n  7484: u64 [sp + 0x10] = a0\n  7487: a0 = sp + 0x20\n  7490: a1 = sp\n  7492: u64 [sp + 0x18] = a2\n  7495: ra = 114, jump @133\n      : @145 [@dyn 57] (gas: 14)\n  7500: a0 = u64 [sp + 0x30]\n  7503: a1 = u64 [sp + 0x38]\n  7506: a2 = u64 [sp + 0x20]\n  7509: a3 = u64 [sp + 0x28]\n  7512: u64 [s1 + 0x10] = a0\n  7515: u64 [s1 + 0x18] = a1\n  7518: u64 [s1] = a2\n  7520: u64 [s1 + 0x8] = a3\n  7523: sp = s0 + 0xffffffffffffff60\n  7527: ra = u64 [sp + 0x98]\n  7531: s0 = u64 [sp + 0x90]\n  7535: s1 = u64 [sp + 0x88]\n  7539: sp = sp + 0xa0\n  7543: ret\n      : @146 (gas: 8)\n  7545: u64 [sp + 112] = 0\n  7548: u64 [sp + 104] = 0\n  7551: u64 [sp + 96] = 0\n  7554: a0 = 0x4e487b7100000000\n  7564: a1 = sp + 0x60\n  7567: u64 [sp + 0x78] = a0\n  7570: a0 = 0\n  7572: ra = 116, jump @23\n      : @147 [@dyn 58] (gas: 7)\n  7577: u64 [sp + 88] = 0\n  7580: u64 [sp + 80] = 0\n  7583: u64 [sp + 72] = 0\n  7586: a0 = 0x4\n  7589: a1 = sp + 0x40\n  7592: u64 [sp + 64] = 0\n  7595: ra = 118, jump @23\n      : @148 [@dyn 59] (gas: 3)\n  7600: a1 = 0x24\n  7603: a0 = 0\n  7605: ra = 120, jump @0\n      : @149 [@dyn 60] (gas: 6)\n  7610: i32 a1 = a0 + 0\n  7612: a0 = 0x1\n  7615: a2 = 0x24\n  7618: ra = 0x7a\n  7621: ecalli 10 // 'seal_return'\n  7623: fallthrough\n      : @150 [@dyn 61] (gas: 14)\n  7624: sp = sp + 0xffffffffffffffa0\n  7627: u64 [sp + 0x58] = ra\n  7630: u64 [sp + 0x50] = s0\n  7633: u64 [sp + 0x48] = s1\n  7636: s0 = sp + 0x60\n  7639: sp = sp & 0xfffffffffffffff0\n  7642: s1 = a0\n  7644: u64 [sp + 24] = 0\n  7647: u64 [sp + 16] = 0\n  7650: u64 [sp + 0] = 0x1\n  7653: a0 = sp + 0x20\n  7656: a1 = sp\n  7658: u64 [sp + 8] = 0\n  7661: ra = 124, jump @133\n      : @151 [@dyn 62] (gas: 14)\n  7666: a0 = u64 [sp + 0x30]\n  7669: a1 = u64 [sp + 0x38]\n  7672: a2 = u64 [sp + 0x20]\n  7675: a3 = u64 [sp + 0x28]\n  7678: u64 [s1 + 0x10] = a0\n  7681: u64 [s1 + 0x18] = a1\n  7684: u64 [s1] = a2\n  7686: u64 [s1 + 0x8] = a3\n  7689: sp = s0 + 0xffffffffffffffa0\n  7692: ra = u64 [sp + 0x58]\n  7695: s0 = u64 [sp + 0x50]\n  7698: s1 = u64 [sp + 0x48]\n  7701: sp = sp + 0x60\n  7704: ret\n      : @152 (gas: 16)\n  7706: sp = sp + 0xffffffffffffff88\n  7709: u64 [sp + 0x70] = ra\n  7712: u64 [sp + 0x68] = s0\n  7715: u64 [sp + 0x60] = s1\n  7718: a5 = u64 [a1 + 0x10]\n  7721: s1 = u64 [a1 + 0x18]\n  7724: a4 = u64 [a1 + 0x8]\n  7727: s0 = u64 [a1]\n  7729: a1 = a4 | s1\n  7732: a3 = s0 | a5\n  7735: a3 = a3 | a1\n  7738: a3 = a3 >> 0x20\n  7741: a1 = a1 | a5\n  7744: a1 = a1 << 0x20\n  7747: a1 = a1 | a3\n  7750: jump @165 if a1 != 0\n      : @153 (gas: 16)\n  7754: u64 [sp + 0x28] = s1\n  7757: u64 [sp + 0x30] = a5\n  7760: u64 [sp + 0x40] = a4\n  7763: u64 [sp] = a0\n  7765: a0 = u64 [a2 + 0x18]\n  7768: u64 [sp + 0x58] = a0\n  7771: s1 = u64 [a2 + 0x10]\n  7774: a0 = u64 [a2 + 0x8]\n  7777: u64 [sp + 0x50] = a0\n  7780: a0 = u64 [a2]\n  7782: u64 [sp + 0x48] = a0\n  7785: u64 [sp + 0x20] = s0\n  7788: i32 a0 = s0 + 0\n  7790: a1 = 0x20\n  7793: u64 [sp + 0x8] = a0\n  7796: ra = 126, jump @0\n      : @154 [@dyn 63] (gas: 12)\n  7801: t0 = u64 [sp + 0x48]\n  7804: a1 = t0 | s1\n  7807: a2 = u64 [sp + 0x58]\n  7810: a3 = u64 [sp + 0x50]\n  7813: a2 = a2 | a3\n  7816: a1 = a1 | a2\n  7819: a1 = a1 >> 0x20\n  7822: u64 [sp + 0x38] = s1\n  7825: a2 = a2 | s1\n  7828: a2 = a2 << 0x20\n  7831: a1 = a1 | a2\n  7834: jump @165 if a1 != 0\n      : @155 (gas: 93)\n  7838: a1 = u8 [a0 + 0x19]\n  7841: a2 = u8 [a0 + 0x18]\n  7844: a3 = u8 [a0 + 0x1a]\n  7847: a4 = u8 [a0 + 0x1b]\n  7850: a1 = a1 << 0x8\n  7853: a1 = a1 | a2\n  7856: a3 = a3 << 0x10\n  7859: a4 = a4 << 0x18\n  7862: a3 = a3 | a4\n  7865: a1 = a1 | a3\n  7868: a2 = u8 [a0 + 0x1d]\n  7871: a3 = u8 [a0 + 0x1c]\n  7874: a4 = u8 [a0 + 0x1e]\n  7877: a5 = u8 [a0 + 0x1f]\n  7880: a2 = a2 << 0x8\n  7883: a2 = a2 | a3\n  7886: a4 = a4 << 0x10\n  7889: a5 = a5 << 0x18\n  7892: a4 = a4 | a5\n  7895: a2 = a2 | a4\n  7898: a2 = a2 << 0x20\n  7901: a1 = a1 | a2\n  7904: u64 [sp + 0x18] = a1\n  7907: a1 = u8 [a0 + 0x11]\n  7910: a2 = u8 [a0 + 0x10]\n  7913: a3 = u8 [a0 + 0x12]\n  7916: a4 = u8 [a0 + 0x13]\n  7919: a1 = a1 << 0x8\n  7922: a1 = a1 | a2\n  7925: a3 = a3 << 0x10\n  7928: a4 = a4 << 0x18\n  7931: a3 = a3 | a4\n  7934: a1 = a1 | a3\n  7937: a2 = u8 [a0 + 0x15]\n  7940: a3 = u8 [a0 + 0x14]\n  7943: a4 = u8 [a0 + 0x16]\n  7946: a5 = u8 [a0 + 0x17]\n  7949: a2 = a2 << 0x8\n  7952: a2 = a2 | a3\n  7955: a4 = a4 << 0x10\n  7958: a5 = a5 << 0x18\n  7961: a4 = a4 | a5\n  7964: a2 = a2 | a4\n  7967: a2 = a2 << 0x20\n  7970: a1 = a1 | a2\n  7973: u64 [sp + 0x10] = a1\n  7976: a1 = u8 [a0 + 0x9]\n  7979: a2 = u8 [a0 + 0x8]\n  7982: a3 = u8 [a0 + 0xa]\n  7985: a4 = u8 [a0 + 0xb]\n  7988: a1 = a1 << 0x8\n  7991: a1 = a1 | a2\n  7994: a3 = a3 << 0x10\n  7997: a4 = a4 << 0x18\n  8000: a3 = a3 | a4\n  8003: a1 = a1 | a3\n  8006: a2 = u8 [a0 + 0xd]\n  8009: a3 = u8 [a0 + 0xc]\n  8012: a4 = u8 [a0 + 0xe]\n  8015: a5 = u8 [a0 + 0xf]\n  8018: a2 = a2 << 0x8\n  8021: a2 = a2 | a3\n  8024: a4 = a4 << 0x10\n  8027: a5 = a5 << 0x18\n  8030: a4 = a4 | a5\n  8033: a2 = a2 | a4\n  8036: a2 = a2 << 0x20\n  8039: s1 = a2 | a1\n  8042: a1 = u8 [a0 + 0x1]\n  8045: a2 = u8 [a0]\n  8047: a3 = u8 [a0 + 0x2]\n  8050: a4 = u8 [a0 + 0x3]\n  8053: a1 = a1 << 0x8\n  8056: a1 = a1 | a2\n  8059: a3 = a3 << 0x10\n  8062: a4 = a4 << 0x18\n  8065: a3 = a3 | a4\n  8068: a1 = a1 | a3\n  8071: a2 = u8 [a0 + 0x5]\n  8074: a3 = u8 [a0 + 0x4]\n  8077: a4 = u8 [a0 + 0x6]\n  8080: a0 = u8 [a0 + 0x7]\n  8083: a2 = a2 << 0x8\n  8086: a2 = a2 | a3\n  8089: a4 = a4 << 0x10\n  8092: a0 = a0 << 0x18\n  8095: a0 = a0 | a4\n  8098: a0 = a0 | a2\n  8101: a0 = a0 << 0x20\n  8104: s0 = a0 | a1\n  8107: i32 a0 = t0 + 0\n  8109: a1 = 0x20\n  8112: ra = 128, jump @0\n      : @156 [@dyn 64] (gas: 73)\n  8118: a4 = s1\n  8120: a2 = u64 [sp + 0x10]\n  8123: s1 = u64 [sp + 0x18]\n  8126: t0 = u64 [sp + 0x48]\n  8129: a1 = a4 >> 0x38\n  8132: u8 [a0 + 0xf] = a1\n  8135: a1 = a4 >> 0x30\n  8138: u8 [a0 + 0xe] = a1\n  8141: a1 = a4 >> 0x28\n  8144: u8 [a0 + 0xd] = a1\n  8147: a1 = a4 >> 0x20\n  8150: u8 [a0 + 0xc] = a1\n  8153: a1 = a4 >> 0x18\n  8156: u8 [a0 + 0xb] = a1\n  8159: a1 = a4 >> 0x10\n  8162: u8 [a0 + 0xa] = a1\n  8165: a1 = a4 >> 0x8\n  8168: u8 [a0 + 0x9] = a1\n  8171: a1 = s0 >> 0x38\n  8174: u8 [a0 + 0x7] = a1\n  8177: a1 = s0 >> 0x30\n  8180: u8 [a0 + 0x6] = a1\n  8183: a1 = s0 >> 0x28\n  8186: u8 [a0 + 0x5] = a1\n  8189: a1 = s0 >> 0x20\n  8192: u8 [a0 + 0x4] = a1\n  8195: a1 = s0 >> 0x18\n  8198: u8 [a0 + 0x3] = a1\n  8201: a1 = s0 >> 0x10\n  8204: u8 [a0 + 0x2] = a1\n  8207: a1 = s0 >> 0x8\n  8210: u8 [a0 + 0x1] = a1\n  8213: a1 = a2 >> 0x38\n  8216: u8 [a0 + 0x17] = a1\n  8219: a1 = a2 >> 0x30\n  8222: u8 [a0 + 0x16] = a1\n  8225: a1 = a2 >> 0x28\n  8228: u8 [a0 + 0x15] = a1\n  8231: a1 = a2 >> 0x20\n  8234: u8 [a0 + 0x14] = a1\n  8237: a1 = a2 >> 0x18\n  8240: u8 [a0 + 0x13] = a1\n  8243: a1 = a2 >> 0x10\n  8246: u8 [a0 + 0x12] = a1\n  8249: a1 = a2 >> 0x8\n  8252: u8 [a0 + 0x11] = a1\n  8255: a1 = s1 >> 0x38\n  8258: u8 [a0 + 0x1f] = a1\n  8261: a1 = s1 >> 0x30\n  8264: u8 [a0 + 0x1e] = a1\n  8267: a1 = s1 >> 0x28\n  8270: u8 [a0 + 0x1d] = a1\n  8273: a1 = s1 >> 0x20\n  8276: u8 [a0 + 0x1c] = a1\n  8279: a1 = s1 >> 0x18\n  8282: u8 [a0 + 0x1b] = a1\n  8285: a1 = s1 >> 0x10\n  8288: u8 [a0 + 0x1a] = a1\n  8291: a1 = s1 >> 0x8\n  8294: u8 [a0 + 0x19] = a1\n  8297: ra = u64 [sp + 0x58]\n  8300: t2 = u64 [sp + 0x38]\n  8303: t1 = t2 | ra\n  8306: a1 = 0xffffffe0\n  8316: a3 = t0 <u a1\n  8319: a5 = u64 [sp + 0x50]\n  8322: a3 = 0 if a5 != 0\n  8324: a3 = 0 if t1 != 0\n  8326: u8 [a0 + 0x10] = a2\n  8329: u8 [a0 + 0x8] = a4\n  8332: u8 [a0] = s0\n  8334: u8 [a0 + 0x18] = s1\n  8337: jump @165 if a3 == 0\n      : @157 (gas: 9)\n  8341: a0 = u64 [sp + 0x30]\n  8344: a3 = u64 [sp + 0x28]\n  8347: a0 = a0 | a3\n  8350: a3 = u64 [sp + 0x20]\n  8353: a1 = a3 <u a1\n  8356: a3 = u64 [sp + 0x40]\n  8359: a1 = 0 if a3 != 0\n  8361: a1 = 0 if a0 != 0\n  8363: jump @165 if a1 == 0\n      : @158 (gas: 15)\n  8367: a1 = reverse s0\n  8369: a3 = reverse a4\n  8371: a4 = reverse a2\n  8373: s0 = reverse s1\n  8375: a0 = s0 | a3\n  8378: u64 [sp + 0x30] = a1\n  8381: u64 [sp + 0x20] = a4\n  8384: a1 = a1 | a4\n  8387: a0 = a0 | a1\n  8390: a0 = a0 >> 0x20\n  8393: u64 [sp + 0x28] = a3\n  8396: a1 = a1 | a3\n  8399: a1 = a1 << 0x20\n  8402: a0 = a0 | a1\n  8405: jump @165 if a0 != 0\n      : @159 (gas: 19)\n  8409: a3 = t0 + 0x20\n  8412: u64 [sp + 0x40] = a3\n  8415: a0 = a3 <u t0\n  8418: a1 = a5 + a0\n  8421: u64 [sp + 0x48] = a1\n  8424: a1 = a1 <u a5\n  8427: a1 = a0 if a0 == 0\n  8430: a1 = a1 + t2\n  8433: u64 [sp + 0x50] = a1\n  8436: a0 = a1 <u t2\n  8439: a0 = a0 + ra\n  8442: u64 [sp + 0x58] = a0\n  8445: i32 a0 = a3 + 0\n  8447: a1 = u64 [sp + 0x8]\n  8450: i32 a1 = a1 + 0x20\n  8453: u64 [sp + 0x38] = a1\n  8456: i32 s1 = s0 + 0\n  8458: a1 = s1\n  8460: ra = 130, jump @0\n      : @160 [@dyn 65] (gas: 5)\n  8466: u64 [sp + 0x18] = a0\n  8469: a0 = u64 [sp + 0x38]\n  8472: a1 = s1\n  8474: s1 = s0\n  8476: ra = 132, jump @0\n      : @161 [@dyn 66] (gas: 4)\n  8482: a1 = a0\n  8484: a0 = u64 [sp + 0x18]\n  8487: a2 = s0\n  8489: ra = 134, jump @8\n      : @162 [@dyn 67] (gas: 29)\n  8495: a0 = u64 [sp + 0x40]\n  8498: a0 = a0 + s0\n  8501: a1 = a0 <u s0\n  8504: a4 = u64 [sp + 0x20]\n  8507: a2 = u64 [sp + 0x48]\n  8510: a2 = a2 + a4\n  8513: a2 = a2 + a1\n  8516: a3 = a2 ^ a4\n  8519: a4 = a2 <u a4\n  8522: a4 = a1 if a3 == 0\n  8525: a5 = u64 [sp + 0x28]\n  8528: a1 = u64 [sp + 0x50]\n  8531: a1 = a1 + a5\n  8534: a4 = a4 + a1\n  8537: a3 = a4 <u a1\n  8540: a1 = a1 <u a5\n  8543: a5 = u64 [sp + 0x30]\n  8546: s0 = u64 [sp + 0x58]\n  8549: a5 = a5 + s0\n  8552: a1 = a1 + a5\n  8555: a1 = a1 + a3\n  8558: a3 = a0 | a4\n  8561: a1 = a1 | a2\n  8564: a3 = a3 | a1\n  8567: a3 = a3 >> 0x20\n  8570: a1 = a1 | a4\n  8573: a1 = a1 << 0x20\n  8576: a1 = a1 | a3\n  8579: jump @165 if a1 != 0\n      : @163 (gas: 3)\n  8583: i32 a0 = a0 + 0\n  8585: a1 = 0x20\n  8588: ra = 136, jump @0\n      : @164 [@dyn 68] (gas: 56)\n  8594: u8 [a0 + 31] = 0\n  8597: u8 [a0 + 30] = 0\n  8600: u8 [a0 + 29] = 0\n  8603: u8 [a0 + 28] = 0\n  8606: u8 [a0 + 27] = 0\n  8609: u8 [a0 + 26] = 0\n  8612: u8 [a0 + 25] = 0\n  8615: u8 [a0 + 24] = 0\n  8618: u8 [a0 + 23] = 0\n  8621: u8 [a0 + 22] = 0\n  8624: u8 [a0 + 21] = 0\n  8627: u8 [a0 + 20] = 0\n  8630: u8 [a0 + 19] = 0\n  8633: u8 [a0 + 18] = 0\n  8636: u8 [a0 + 17] = 0\n  8639: u8 [a0 + 16] = 0\n  8642: u8 [a0 + 15] = 0\n  8645: u8 [a0 + 14] = 0\n  8648: u8 [a0 + 13] = 0\n  8651: u8 [a0 + 12] = 0\n  8654: u8 [a0 + 11] = 0\n  8657: u8 [a0 + 10] = 0\n  8660: u8 [a0 + 9] = 0\n  8663: u8 [a0 + 8] = 0\n  8666: u8 [a0 + 7] = 0\n  8669: u8 [a0 + 6] = 0\n  8672: u8 [a0 + 5] = 0\n  8675: u8 [a0 + 4] = 0\n  8678: u8 [a0 + 3] = 0\n  8681: u8 [a0 + 2] = 0\n  8684: u8 [a0 + 1] = 0\n  8687: u8 [a0 + 0] = 0\n  8689: a0 = s1 + 0x1f\n  8692: a1 = 0x1ffffffe0\n  8702: a0 = a0 & a1\n  8705: a1 = u64 [sp + 0x40]\n  8708: a1 = a1 + a0\n  8711: a0 = a1 <u a0\n  8714: a2 = u64 [sp + 0x48]\n  8717: a2 = a2 + a0\n  8720: a0 = 0 if a2 != 0\n  8722: a3 = u64 [sp + 0x50]\n  8725: a0 = a0 + a3\n  8728: a3 = a0 <u a3\n  8731: a4 = u64 [sp + 0x58]\n  8734: a3 = a3 + a4\n  8737: a4 = u64 [sp]\n  8739: u64 [a4] = a1\n  8741: u64 [a4 + 0x8] = a2\n  8744: u64 [a4 + 0x10] = a0\n  8747: u64 [a4 + 0x18] = a3\n  8750: ra = u64 [sp + 0x70]\n  8753: s0 = u64 [sp + 0x68]\n  8756: s1 = u64 [sp + 0x60]\n  8759: sp = sp + 0x78\n  8762: ret\n      : @165 (gas: 1)\n  8764: trap\n      : @166 (gas: 8)\n  8765: a0 = u64 [sp + 0x110]\n  8769: a1 = u64 [sp + 0x118]\n  8773: a2 = u64 [sp + 0x108]\n  8777: a3 = u64 [sp + 0x100]\n  8781: a1 = a1 | a2\n  8784: a0 = a0 | a3\n  8787: a0 = a0 | a1\n  8790: jump @175 if a0 != 0\n      : @167 (gas: 2)\n  8794: a0 = i32 [0x20064]\n  8799: jump @175 if a0 <=u 3\n      : @168 (gas: 7)\n  8804: u64 [sp + 216] = 0\n  8808: u64 [sp + 208] = 0\n  8812: u64 [sp + 192] = 0x1\n  8817: a0 = sp + 0xe0\n  8821: a1 = sp + 0xc0\n  8825: u64 [sp + 200] = 0\n  8829: ra = 138, jump @133\n      : @169 [@dyn 69] (gas: 11)\n  8835: a0 = u64 [sp + 0xf8]\n  8839: u64 [sp + 0x40] = a0\n  8842: a0 = u64 [sp + 0xf0]\n  8846: u64 [sp + 0x48] = a0\n  8849: a0 = u64 [sp + 0xe8]\n  8853: u64 [sp + 0x50] = a0\n  8856: a0 = u64 [sp + 0xe0]\n  8860: u64 [sp + 0x58] = a0\n  8863: a0 = 0x40\n  8866: a1 = 0x20\n  8869: ra = 140, jump @0\n      : @170 [@dyn 70] (gas: 100)\n  8875: a1 = u8 [a0 + 0x11]\n  8878: a2 = u8 [a0 + 0x10]\n  8881: a3 = u8 [a0 + 0x12]\n  8884: a4 = u8 [a0 + 0x13]\n  8887: a1 = a1 << 0x8\n  8890: a1 = a1 | a2\n  8893: a3 = a3 << 0x10\n  8896: a4 = a4 << 0x18\n  8899: a3 = a3 | a4\n  8902: a1 = a1 | a3\n  8905: a2 = u8 [a0 + 0x15]\n  8908: a3 = u8 [a0 + 0x14]\n  8911: a4 = u8 [a0 + 0x16]\n  8914: a5 = u8 [a0 + 0x17]\n  8917: a2 = a2 << 0x8\n  8920: a2 = a2 | a3\n  8923: a4 = a4 << 0x10\n  8926: a5 = a5 << 0x18\n  8929: a4 = a4 | a5\n  8932: a2 = a2 | a4\n  8935: a2 = a2 << 0x20\n  8938: t0 = a2 | a1\n  8941: a2 = u8 [a0 + 0x1]\n  8944: a3 = u8 [a0]\n  8946: a4 = u8 [a0 + 0x2]\n  8949: a5 = u8 [a0 + 0x3]\n  8952: a2 = a2 << 0x8\n  8955: a2 = a2 | a3\n  8958: a4 = a4 << 0x10\n  8961: a5 = a5 << 0x18\n  8964: a4 = a4 | a5\n  8967: a2 = a2 | a4\n  8970: a3 = u8 [a0 + 0x5]\n  8973: a4 = u8 [a0 + 0x4]\n  8976: a5 = u8 [a0 + 0x6]\n  8979: s1 = u8 [a0 + 0x7]\n  8982: a3 = a3 << 0x8\n  8985: a3 = a3 | a4\n  8988: a5 = a5 << 0x10\n  8991: s1 = s1 << 0x18\n  8994: a5 = a5 | s1\n  8997: a3 = a3 | a5\n  9000: a3 = a3 << 0x20\n  9003: a2 = a2 | a3\n  9006: a3 = u8 [a0 + 0x19]\n  9009: a4 = u8 [a0 + 0x18]\n  9012: a5 = u8 [a0 + 0x1a]\n  9015: s1 = u8 [a0 + 0x1b]\n  9018: a3 = a3 << 0x8\n  9021: a3 = a3 | a4\n  9024: a5 = a5 << 0x10\n  9027: s1 = s1 << 0x18\n  9030: a5 = a5 | s1\n  9033: a3 = a3 | a5\n  9036: a4 = u8 [a0 + 0x1d]\n  9039: a5 = u8 [a0 + 0x1c]\n  9042: s1 = u8 [a0 + 0x1e]\n  9045: a1 = u8 [a0 + 0x1f]\n  9048: a4 = a4 << 0x8\n  9051: a4 = a4 | a5\n  9054: s1 = s1 << 0x10\n  9057: a1 = a1 << 0x18\n  9060: a1 = a1 | s1\n  9063: a1 = a1 | a4\n  9066: a1 = a1 << 0x20\n  9069: a3 = a3 | a1\n  9072: a1 = u8 [a0 + 0x9]\n  9075: a4 = u8 [a0 + 0x8]\n  9078: a5 = u8 [a0 + 0xa]\n  9081: s1 = u8 [a0 + 0xb]\n  9084: a1 = a1 << 0x8\n  9087: a1 = a1 | a4\n  9090: a5 = a5 << 0x10\n  9093: s1 = s1 << 0x18\n  9096: a5 = a5 | s1\n  9099: a1 = a1 | a5\n  9102: a4 = u8 [a0 + 0xd]\n  9105: a5 = u8 [a0 + 0xc]\n  9108: s1 = u8 [a0 + 0xe]\n  9111: a0 = u8 [a0 + 0xf]\n  9114: a4 = a4 << 0x8\n  9117: a4 = a4 | a5\n  9120: s1 = s1 << 0x10\n  9123: a0 = a0 << 0x18\n  9126: a0 = a0 | s1\n  9129: a0 = a0 | a4\n  9132: a0 = a0 << 0x20\n  9135: a0 = a0 | a1\n  9138: s1 = reverse a0\n  9140: a3 = reverse a3\n  9142: a4 = reverse a2\n  9144: a2 = reverse t0\n  9146: a0 = a2 | a4\n  9149: a1 = a3 | s1\n  9152: a1 = a1 | a0\n  9155: a1 = a1 >> 0x20\n  9158: a0 = a0 | s1\n  9161: a0 = a0 << 0x20\n  9164: a0 = a0 | a1\n  9167: jump @174 if a0 != 0\n      : @171 (gas: 19)\n  9171: a0 = a3 + 0x20\n  9174: u64 [sp + 0x18] = a0\n  9177: a0 = a0 <u a3\n  9180: a1 = a2 + a0\n  9183: u64 [sp + 0x8] = a1\n  9186: a1 = a1 <u a2\n  9189: a1 = a0 if a0 == 0\n  9192: a1 = a1 + s1\n  9195: u64 [sp + 0x10] = a1\n  9198: a0 = a1 <u s1\n  9201: a0 = a0 + a4\n  9204: u64 [sp + 0x20] = a0\n  9207: i32 a0 = a3 + 0\n  9209: a1 = 0x20\n  9212: u64 [sp] = a0\n  9214: u64 [sp + 0x30] = a3\n  9217: u64 [sp + 0x28] = a2\n  9220: u64 [sp + 0x38] = a4\n  9223: ra = 142, jump @0\n      : @172 [@dyn 71] (gas: 52)\n  9229: u8 [a0 + 31] = 0x20\n  9233: u8 [a0 + 30] = 0\n  9236: u8 [a0 + 29] = 0\n  9239: u8 [a0 + 28] = 0\n  9242: u8 [a0 + 27] = 0\n  9245: u8 [a0 + 26] = 0\n  9248: u8 [a0 + 25] = 0\n  9251: u8 [a0 + 24] = 0\n  9254: u8 [a0 + 23] = 0\n  9257: u8 [a0 + 22] = 0\n  9260: u8 [a0 + 21] = 0\n  9263: u8 [a0 + 20] = 0\n  9266: u8 [a0 + 19] = 0\n  9269: u8 [a0 + 18] = 0\n  9272: u8 [a0 + 17] = 0\n  9275: u8 [a0 + 16] = 0\n  9278: u8 [a0 + 15] = 0\n  9281: u8 [a0 + 14] = 0\n  9284: u8 [a0 + 13] = 0\n  9287: u8 [a0 + 12] = 0\n  9290: u8 [a0 + 11] = 0\n  9293: u8 [a0 + 10] = 0\n  9296: u8 [a0 + 9] = 0\n  9299: u8 [a0 + 8] = 0\n  9302: u8 [a0 + 7] = 0\n  9305: u8 [a0 + 6] = 0\n  9308: u8 [a0 + 5] = 0\n  9311: u8 [a0 + 4] = 0\n  9314: u8 [a0 + 3] = 0\n  9317: u8 [a0 + 2] = 0\n  9320: u8 [a0 + 1] = 0\n  9323: u8 [a0 + 0] = 0\n  9325: a0 = u64 [sp + 0x8]\n  9328: u64 [sp + 0x68] = a0\n  9331: a0 = u64 [sp + 0x18]\n  9334: u64 [sp + 0x60] = a0\n  9337: a0 = u64 [sp + 0x40]\n  9340: u64 [sp + 0x98] = a0\n  9344: a0 = u64 [sp + 0x48]\n  9347: u64 [sp + 0x90] = a0\n  9351: a0 = u64 [sp + 0x50]\n  9354: u64 [sp + 0x88] = a0\n  9358: a0 = u64 [sp + 0x58]\n  9361: u64 [sp + 0x80] = a0\n  9365: a0 = u64 [sp + 0x10]\n  9368: u64 [sp + 0x70] = a0\n  9371: a0 = sp + 0xa0\n  9375: a1 = sp + 0x80\n  9379: a2 = sp + 0x60\n  9382: a3 = u64 [sp + 0x20]\n  9385: u64 [sp + 0x78] = a3\n  9388: ra = 144, jump @152\n      : @173 [@dyn 72] (gas: 30)\n  9394: a0 = u64 [sp + 0xa8]\n  9398: t0 = u64 [sp + 0xb8]\n  9402: t1 = u64 [sp + 0xa0]\n  9406: a3 = u64 [sp + 0xb0]\n  9410: a1 = u64 [sp + 0x28]\n  9413: a4 = a0 ^ a1\n  9416: a5 = a0 <u a1\n  9419: t2 = a1\n  9421: a2 = u64 [sp + 0x30]\n  9424: a1 = t1 <u a2\n  9427: a5 = a1 if a4 == 0\n  9430: a4 = a3 - s1\n  9433: a3 = a3 <u s1\n  9436: s1 = u64 [sp + 0x38]\n  9439: s1 = t0 - s1\n  9442: s1 = s1 - a3\n  9445: a3 = a4 <u a5\n  9448: s1 = s1 - a3\n  9451: a4 = a4 - a5\n  9454: a0 = a0 - t2\n  9457: a1 = a0 - a1\n  9460: a0 = t1 - a2\n  9463: a1 = a1 | s1\n  9466: a2 = a0 | a4\n  9469: a2 = a2 | a1\n  9472: a1 = a1 | a4\n  9475: a2 = a2 >> 0x20\n  9478: a1 = a1 << 0x20\n  9481: a1 = a1 | a2\n  9484: jump @177 if a1 == 0\n      : @174 (gas: 1)\n  9487: trap\n      : @175 (gas: 3)\n  9488: a0 = 0\n  9490: a1 = 0\n  9492: ra = 146, jump @0\n      : @176 [@dyn 73] (gas: 5)\n  9498: i32 a1 = a0 + 0\n  9500: a0 = 0x1\n  9503: a2 = 0\n  9505: ecalli 10 // 'seal_return'\n  9507: fallthrough\n      : @177 (gas: 4)\n  9508: i32 s1 = a0 + 0\n  9510: a0 = u64 [sp]\n  9512: a1 = s1\n  9514: ra = 148, jump @0\n      : @178 [@dyn 74] (gas: 6)\n  9520: i32 a1 = a0 + 0\n  9522: a0 = 0\n  9524: a2 = s1\n  9526: ra = 0x96\n  9530: ecalli 10 // 'seal_return'\n  9532: fallthrough\n      : @179 [@dyn 75] (gas: 236)\n  9533: sp = sp + 0xffffffffffffffa0\n  9536: u64 [sp + 0x58] = ra\n  9539: u64 [sp + 0x50] = s0\n  9542: u64 [sp + 0x48] = s1\n  9545: u64 [sp] = a0\n  9547: t0 = u64 [a1]\n  9549: t1 = u64 [a2]\n  9551: a0 = u64 [a2 + 0x8]\n  9554: a3 = u64 [a2 + 0x10]\n  9557: a4 = u64 [a1 + 0x18]\n  9560: s0 = u64 [a1 + 0x10]\n  9563: a2 = u64 [a2 + 0x18]\n  9566: a1 = u64 [a1 + 0x8]\n  9569: t2 = a4 >u 0\n  9571: s1 = s0 >u 0\n  9573: s1 = t2 if a4 != 0\n  9576: ra = a1 >u 0\n  9578: a5 = t0 <u 0x100\n  9582: t2 = a5 ^ 0x1\n  9585: t2 = ra if a1 != 0\n  9588: a4 = a4 | s0\n  9591: t2 = s1 if a4 != 0\n  9594: u8 [sp + 71] = 0\n  9597: u8 [sp + 70] = 0\n  9600: u8 [sp + 69] = 0\n  9603: u8 [sp + 68] = 0\n  9606: u8 [sp + 67] = 0\n  9609: u8 [sp + 66] = 0\n  9612: u8 [sp + 65] = 0\n  9615: u8 [sp + 64] = 0\n  9618: u8 [sp + 63] = 0\n  9621: u8 [sp + 62] = 0\n  9624: u8 [sp + 61] = 0\n  9627: u8 [sp + 60] = 0\n  9630: u8 [sp + 59] = 0\n  9633: u8 [sp + 58] = 0\n  9636: u8 [sp + 57] = 0\n  9639: u8 [sp + 56] = 0\n  9642: u8 [sp + 55] = 0\n  9645: u8 [sp + 54] = 0\n  9648: u8 [sp + 53] = 0\n  9651: u8 [sp + 52] = 0\n  9654: u8 [sp + 51] = 0\n  9657: u8 [sp + 50] = 0\n  9660: u8 [sp + 49] = 0\n  9663: u8 [sp + 48] = 0\n  9666: u8 [sp + 47] = 0\n  9669: u8 [sp + 46] = 0\n  9672: u8 [sp + 45] = 0\n  9675: u8 [sp + 44] = 0\n  9678: u8 [sp + 43] = 0\n  9681: u8 [sp + 42] = 0\n  9684: u8 [sp + 41] = 0\n  9687: u8 [sp + 40] = 0\n  9690: u8 [sp + 0x20] = a2\n  9693: u8 [sp + 0x18] = a3\n  9696: u8 [sp + 0x10] = a0\n  9699: u8 [sp + 0x8] = t1\n  9702: a1 = a2 >> 0x38\n  9705: u8 [sp + 0x27] = a1\n  9708: a1 = a2 >> 0x30\n  9711: u8 [sp + 0x26] = a1\n  9714: a1 = a2 >> 0x28\n  9717: u8 [sp + 0x25] = a1\n  9720: a1 = a2 >> 0x20\n  9723: u8 [sp + 0x24] = a1\n  9726: a1 = a2 >> 0x18\n  9729: u8 [sp + 0x23] = a1\n  9732: a1 = a2 >> 0x10\n  9735: u8 [sp + 0x22] = a1\n  9738: a2 = a2 >> 0x8\n  9741: u8 [sp + 0x21] = a2\n  9744: a1 = a3 >> 0x38\n  9747: u8 [sp + 0x1f] = a1\n  9750: a1 = a3 >> 0x30\n  9753: u8 [sp + 0x1e] = a1\n  9756: a1 = a3 >> 0x28\n  9759: u8 [sp + 0x1d] = a1\n  9762: a1 = a3 >> 0x20\n  9765: u8 [sp + 0x1c] = a1\n  9768: a1 = a3 >> 0x18\n  9771: u8 [sp + 0x1b] = a1\n  9774: a1 = a3 >> 0x10\n  9777: u8 [sp + 0x1a] = a1\n  9780: a3 = a3 >> 0x8\n  9783: u8 [sp + 0x19] = a3\n  9786: a1 = a0 >> 0x38\n  9789: u8 [sp + 0x17] = a1\n  9792: a1 = a0 >> 0x30\n  9795: u8 [sp + 0x16] = a1\n  9798: a1 = a0 >> 0x28\n  9801: u8 [sp + 0x15] = a1\n  9804: a1 = a0 >> 0x20\n  9807: u8 [sp + 0x14] = a1\n  9810: a1 = a0 >> 0x18\n  9813: u8 [sp + 0x13] = a1\n  9816: a1 = a0 >> 0x10\n  9819: u8 [sp + 0x12] = a1\n  9822: a0 = a0 >> 0x8\n  9825: u8 [sp + 0x11] = a0\n  9828: a0 = t1 >> 0x38\n  9831: u8 [sp + 0xf] = a0\n  9834: a0 = t1 >> 0x30\n  9837: u8 [sp + 0xe] = a0\n  9840: a0 = t1 >> 0x28\n  9843: u8 [sp + 0xd] = a0\n  9846: a0 = t1 >> 0x20\n  9849: u8 [sp + 0xc] = a0\n  9852: a0 = t1 >> 0x18\n  9855: u8 [sp + 0xb] = a0\n  9858: a0 = t1 >> 0x10\n  9861: u8 [sp + 0xa] = a0\n  9864: a0 = t1 >> 0x8\n  9867: u8 [sp + 0x9] = a0\n  9870: a0 = t0 << 0x38\n  9873: a0 = a0 >> 0x3b\n  9876: a2 = sp + 0x8\n  9879: a2 = a2 + a0\n  9882: a0 = u8 [a2 + 0x11]\n  9885: a1 = u8 [a2 + 0x10]\n  9888: a3 = u8 [a2 + 0x12]\n  9891: a4 = u8 [a2 + 0x13]\n  9894: a0 = a0 << 0x8\n  9897: a0 = a0 | a1\n  9900: a3 = a3 << 0x10\n  9903: a4 = a4 << 0x18\n  9906: a3 = a3 | a4\n  9909: a0 = a0 | a3\n  9912: a1 = u8 [a2 + 0x15]\n  9915: a3 = u8 [a2 + 0x14]\n  9918: a4 = u8 [a2 + 0x16]\n  9921: a5 = u8 [a2 + 0x17]\n  9924: a1 = a1 << 0x8\n  9927: a1 = a1 | a3\n  9930: a4 = a4 << 0x10\n  9933: a5 = a5 << 0x18\n  9936: a4 = a4 | a5\n  9939: a1 = a1 | a4\n  9942: a1 = a1 << 0x20\n  9945: ra = a1 | a0\n  9948: a3 = t0 & 0x7\n  9951: a1 = ra >> a3\n  9954: a0 = u8 [a2 + 0x19]\n  9957: a4 = u8 [a2 + 0x18]\n  9960: s1 = u8 [a2 + 0x1a]\n  9963: s0 = u8 [a2 + 0x1b]\n  9966: a0 = a0 << 0x8\n  9969: a0 = a0 | a4\n  9972: s1 = s1 << 0x10\n  9975: s0 = s0 << 0x18\n  9978: s0 = s0 | s1\n  9981: a0 = a0 | s0\n  9984: a4 = u8 [a2 + 0x1d]\n  9987: s1 = u8 [a2 + 0x1c]\n  9990: s0 = u8 [a2 + 0x1e]\n  9993: a5 = u8 [a2 + 0x1f]\n  9996: a4 = a4 << 0x8\n  9999: a4 = a4 | s1\n 10002: s0 = s0 << 0x10\n 10005: a5 = a5 << 0x18\n 10008: a5 = a5 | s0\n 10011: a4 = a4 | a5\n 10014: a4 = a4 << 0x20\n 10017: t0 = a4 | a0\n 10020: a0 = t0 << 0x1\n 10023: t1 = a3 ^ 0x3f\n 10026: a4 = a0 << t1\n 10029: a4 = a4 | a1\n 10032: a0 = u8 [a2 + 0x9]\n 10035: a1 = u8 [a2 + 0x8]\n 10038: a5 = u8 [a2 + 0xa]\n 10041: s0 = u8 [a2 + 0xb]\n 10044: a0 = a0 << 0x8\n 10047: a0 = a0 | a1\n 10050: a5 = a5 << 0x10\n 10053: s0 = s0 << 0x18\n 10056: a5 = a5 | s0\n 10059: a0 = a0 | a5\n 10062: a1 = u8 [a2 + 0xd]\n 10065: a5 = u8 [a2 + 0xc]\n 10068: s0 = u8 [a2 + 0xe]\n 10071: s1 = u8 [a2 + 0xf]\n 10074: a1 = a1 << 0x8\n 10077: a1 = a1 | a5\n 10080: s0 = s0 << 0x10\n 10083: s1 = s1 << 0x18\n 10086: s0 = s0 | s1\n 10089: a1 = a1 | s0\n 10092: a1 = a1 << 0x20\n 10095: a1 = a1 | a0\n 10098: a0 = a1 >> a3\n 10101: ra = ra << 0x1\n 10104: a5 = a3 ^ 0xffffffffffffffff\n 10107: a5 = ra << a5\n 10110: ra = a0 | a5\n 10113: a0 = u8 [a2 + 0x1]\n 10116: s0 = u8 [a2]\n 10118: s1 = u8 [a2 + 0x2]\n 10121: a5 = u8 [a2 + 0x3]\n 10124: a0 = a0 << 0x8\n 10127: a0 = a0 | s0\n 10130: s1 = s1 << 0x10\n 10133: a5 = a5 << 0x18\n 10136: a5 = a5 | s1\n 10139: a0 = a0 | a5\n 10142: a5 = u8 [a2 + 0x5]\n 10145: s0 = u8 [a2 + 0x4]\n 10148: s1 = u8 [a2 + 0x6]\n 10151: a2 = u8 [a2 + 0x7]\n 10154: a5 = a5 << 0x8\n 10157: a5 = a5 | s0\n 10160: s1 = s1 << 0x10\n 10163: a2 = a2 << 0x18\n 10166: a2 = a2 | s1\n 10169: a2 = a2 | a5\n 10172: a2 = a2 << 0x20\n 10175: a0 = a0 | a2\n 10178: a0 = a0 >> a3\n 10181: a1 = a1 << 0x1\n 10184: a1 = a1 << t1\n 10187: a0 = a0 | a1\n 10190: a1 = t0 >> a3\n 10193: a0 = 0 if t2 != 0\n 10195: ra = 0 if t2 != 0\n 10197: a4 = 0 if t2 != 0\n 10199: a1 = 0 if t2 != 0\n 10201: a2 = u64 [sp]\n 10203: u64 [a2 + 0x18] = a1\n 10206: u64 [a2 + 0x10] = a4\n 10209: u64 [a2 + 0x8] = ra\n 10212: u64 [a2] = a0\n 10214: ra = u64 [sp + 0x58]\n 10217: s0 = u64 [sp + 0x50]\n 10220: s1 = u64 [sp + 0x48]\n 10223: sp = sp + 0x60\n 10226: ret\n      : @180 (gas: 8)\n 10228: a0 = u64 [sp + 0x30]\n 10231: a1 = u64 [sp + 0x38]\n 10234: a2 = u64 [sp + 0x28]\n 10237: a3 = u64 [sp + 0x20]\n 10240: a1 = a1 | a2\n 10243: a0 = a0 | a3\n 10246: a0 = a0 | a1\n 10249: jump @185 if a0 != 0\n      : @181 (gas: 2)\n 10253: a0 = i32 [0x20064]\n 10258: jump @185 if a0 <=u 3\n      : @182 (gas: 20)\n 10263: u64 [sp + 88] = 0\n 10266: u64 [sp + 80] = 0\n 10269: u64 [sp + 72] = 0\n 10272: u64 [sp + 64] = 0\n 10275: u64 [sp + 120] = 0\n 10278: u64 [sp + 112] = 0\n 10281: u64 [sp + 104] = 0\n 10284: u64 [sp + 96] = 0\n 10287: u32 [sp + 128] = 0x20\n 10292: i32 a1 = sp + 0x40\n 10295: i32 a3 = sp + 0x60\n 10298: i32 a4 = sp + 0x80\n 10302: a2 = 0xffffffffffffffff\n 10305: a0 = 0\n 10307: ecalli 6 // 'get_storage'\n 10309: a0 = u64 [sp + 0x60]\n 10312: u64 [sp + 0x18] = a0\n 10315: a0 = 0x40\n 10318: a1 = 0x20\n 10321: ra = 152, jump @0\n      : @183 [@dyn 76] (gas: 100)\n 10327: a1 = u8 [a0 + 0x11]\n 10330: a2 = u8 [a0 + 0x10]\n 10333: a3 = u8 [a0 + 0x12]\n 10336: a4 = u8 [a0 + 0x13]\n 10339: a1 = a1 << 0x8\n 10342: a1 = a1 | a2\n 10345: a3 = a3 << 0x10\n 10348: a4 = a4 << 0x18\n 10351: a3 = a3 | a4\n 10354: a1 = a1 | a3\n 10357: a2 = u8 [a0 + 0x15]\n 10360: a3 = u8 [a0 + 0x14]\n 10363: a4 = u8 [a0 + 0x16]\n 10366: a5 = u8 [a0 + 0x17]\n 10369: a2 = a2 << 0x8\n 10372: a2 = a2 | a3\n 10375: a4 = a4 << 0x10\n 10378: a5 = a5 << 0x18\n 10381: a4 = a4 | a5\n 10384: a2 = a2 | a4\n 10387: a2 = a2 << 0x20\n 10390: t0 = a2 | a1\n 10393: a2 = u8 [a0 + 0x1]\n 10396: a3 = u8 [a0]\n 10398: a4 = u8 [a0 + 0x2]\n 10401: a5 = u8 [a0 + 0x3]\n 10404: a2 = a2 << 0x8\n 10407: a2 = a2 | a3\n 10410: a4 = a4 << 0x10\n 10413: a5 = a5 << 0x18\n 10416: a4 = a4 | a5\n 10419: a2 = a2 | a4\n 10422: a3 = u8 [a0 + 0x5]\n 10425: a4 = u8 [a0 + 0x4]\n 10428: a5 = u8 [a0 + 0x6]\n 10431: s1 = u8 [a0 + 0x7]\n 10434: a3 = a3 << 0x8\n 10437: a3 = a3 | a4\n 10440: a5 = a5 << 0x10\n 10443: s1 = s1 << 0x18\n 10446: a5 = a5 | s1\n 10449: a3 = a3 | a5\n 10452: a3 = a3 << 0x20\n 10455: a2 = a2 | a3\n 10458: a3 = u8 [a0 + 0x19]\n 10461: a4 = u8 [a0 + 0x18]\n 10464: a5 = u8 [a0 + 0x1a]\n 10467: s1 = u8 [a0 + 0x1b]\n 10470: a3 = a3 << 0x8\n 10473: a3 = a3 | a4\n 10476: a5 = a5 << 0x10\n 10479: s1 = s1 << 0x18\n 10482: a5 = a5 | s1\n 10485: a3 = a3 | a5\n 10488: a4 = u8 [a0 + 0x1d]\n 10491: a5 = u8 [a0 + 0x1c]\n 10494: s1 = u8 [a0 + 0x1e]\n 10497: a1 = u8 [a0 + 0x1f]\n 10500: a4 = a4 << 0x8\n 10503: a4 = a4 | a5\n 10506: s1 = s1 << 0x10\n 10509: a1 = a1 << 0x18\n 10512: a1 = a1 | s1\n 10515: a1 = a1 | a4\n 10518: a1 = a1 << 0x20\n 10521: a3 = a3 | a1\n 10524: a1 = u8 [a0 + 0x9]\n 10527: a4 = u8 [a0 + 0x8]\n 10530: a5 = u8 [a0 + 0xa]\n 10533: s1 = u8 [a0 + 0xb]\n 10536: a1 = a1 << 0x8\n 10539: a1 = a1 | a4\n 10542: a5 = a5 << 0x10\n 10545: s1 = s1 << 0x18\n 10548: a5 = a5 | s1\n 10551: a1 = a1 | a5\n 10554: a4 = u8 [a0 + 0xd]\n 10557: a5 = u8 [a0 + 0xc]\n 10560: s1 = u8 [a0 + 0xe]\n 10563: a0 = u8 [a0 + 0xf]\n 10566: a4 = a4 << 0x8\n 10569: a4 = a4 | a5\n 10572: s1 = s1 << 0x10\n 10575: a0 = a0 << 0x18\n 10578: a0 = a0 | s1\n 10581: a0 = a0 | a4\n 10584: a0 = a0 << 0x20\n 10587: a0 = a0 | a1\n 10590: a1 = reverse a0\n 10592: a0 = reverse a3\n 10594: a2 = reverse a2\n 10596: a3 = reverse t0\n 10598: a2 = a2 | a3\n 10601: a3 = a0 | a1\n 10604: a3 = a3 | a2\n 10607: a3 = a3 >> 0x20\n 10610: a1 = a1 | a2\n 10613: a1 = a1 << 0x20\n 10616: a1 = a1 | a3\n 10619: jump @187 if a1 == 0\n      : @184 (gas: 1)\n 10622: trap\n      : @185 (gas: 3)\n 10623: a0 = 0\n 10625: a1 = 0\n 10627: ra = 154, jump @0\n      : @186 [@dyn 77] (gas: 5)\n 10633: i32 a1 = a0 + 0\n 10635: a0 = 0x1\n 10638: a2 = 0\n 10640: ecalli 10 // 'seal_return'\n 10642: fallthrough\n      : @187 (gas: 7)\n 10643: a1 = u64 [sp + 0x18]\n 10646: a1 = a1 << 0x20\n 10649: s1 = a1 >> 0x20\n 10652: i32 a0 = a0 + 0\n 10654: u64 [sp + 0x18] = a0\n 10657: a1 = 0x20\n 10660: ra = 156, jump @0\n      : @188 [@dyn 78] (gas: 40)\n 10666: a1 = reverse s1\n 10668: u8 [a0 + 27] = 0\n 10671: u8 [a0 + 26] = 0\n 10674: u8 [a0 + 25] = 0\n 10677: u8 [a0 + 23] = 0\n 10680: u8 [a0 + 22] = 0\n 10683: u8 [a0 + 21] = 0\n 10686: u8 [a0 + 20] = 0\n 10689: u8 [a0 + 19] = 0\n 10692: u8 [a0 + 18] = 0\n 10695: u8 [a0 + 17] = 0\n 10698: u8 [a0 + 16] = 0\n 10701: u8 [a0 + 15] = 0\n 10704: u8 [a0 + 14] = 0\n 10707: u8 [a0 + 13] = 0\n 10710: u8 [a0 + 12] = 0\n 10713: u8 [a0 + 11] = 0\n 10716: u8 [a0 + 10] = 0\n 10719: u8 [a0 + 9] = 0\n 10722: u8 [a0 + 8] = 0\n 10725: u8 [a0 + 7] = 0\n 10728: u8 [a0 + 6] = 0\n 10731: u8 [a0 + 5] = 0\n 10734: u8 [a0 + 4] = 0\n 10737: u8 [a0 + 3] = 0\n 10740: u8 [a0 + 2] = 0\n 10743: u8 [a0 + 1] = 0\n 10746: u8 [a0 + 0] = 0\n 10748: u8 [a0 + 0x18] = a1\n 10751: a2 = a1 >> 0x38\n 10754: u8 [a0 + 0x1f] = a2\n 10757: a2 = a1 >> 0x30\n 10760: u8 [a0 + 0x1e] = a2\n 10763: a2 = a1 >> 0x28\n 10766: u8 [a0 + 0x1d] = a2\n 10769: a1 = a1 >> 0x20\n 10772: u8 [a0 + 0x1c] = a1\n 10775: a1 = 0x20\n 10778: a0 = u64 [sp + 0x18]\n 10781: ra = 158, jump @0\n      : @189 [@dyn 79] (gas: 6)\n 10787: i32 a1 = a0 + 0\n 10789: a2 = 0x20\n 10792: a0 = 0\n 10794: ra = 0xa0\n 10798: ecalli 10 // 'seal_return'\n 10800: fallthrough\n      : @190 [@dyn 80] (gas: 8)\n 10801: a2 = u32 [a1 + 0x10]\n 10804: a3 = u64 [a1 + 0x8]\n 10807: a1 = u64 [a1]\n 10809: u64 [a0 + 24] = 0\n 10812: u64 [a0 + 0x10] = a2\n 10815: u64 [a0 + 0x8] = a3\n 10818: u64 [a0] = a1\n 10820: ret\n      : @191 (gas: 47)\n 10822: sp = sp + 0xffffffffffffff80\n 10825: u64 [sp + 0x78] = ra\n 10828: u64 [sp + 0x70] = s0\n 10831: u64 [sp + 0x68] = s1\n 10834: s0 = sp + 0x80\n 10838: sp = sp & 0xffffffffffffffe0\n 10841: ra = u64 [a1 + 0x10]\n 10844: a5 = u64 [a1 + 0x8]\n 10847: a3 = u64 [a2 + 0x8]\n 10850: t1 = u64 [a1]\n 10852: a4 = u64 [a2]\n 10854: u64 [sp + 0x28] = a4\n 10857: t2 = u64 [a2 + 0x10]\n 10860: t0 = a3 ^ a5\n 10863: s1 = a3 <u a5\n 10866: a4 = a4 <u t1\n 10869: u64 [sp + 0x20] = a4\n 10872: s1 = a4 if t0 == 0\n 10875: t0 = u64 [a1 + 0x18]\n 10878: a1 = u64 [a2 + 0x18]\n 10881: u64 [sp + 0x18] = a1\n 10884: a2 = t2 - ra\n 10887: a1 = a2 - s1\n 10890: u64 [sp + 0x30] = a1\n 10893: a1 = a2 <u s1\n 10896: a4 = t2 <u ra\n 10899: u64 [sp + 0x38] = t0\n 10902: a2 = u64 [sp + 0x18]\n 10905: a2 = a2 - t0\n 10908: a2 = a2 - a4\n 10911: a2 = a2 - a1\n 10914: a1 = a3 - a5\n 10917: a3 = u64 [sp + 0x20]\n 10920: a1 = a1 - a3\n 10923: a3 = u64 [sp + 0x28]\n 10926: a3 = a3 - t1\n 10929: a4 = a1 >u 0\n 10931: a3 = a3 <u 0x40\n 10934: a3 = a3 ^ 0x1\n 10937: a3 = a4 if a1 != 0\n 10940: s1 = a2 >s 0\n 10942: a1 = u64 [sp + 0x30]\n 10945: a4 = a1 >u 0\n 10947: a4 = s1 if a2 != 0\n 10950: a1 = a1 | a2\n 10953: a3 = a4 if a1 != 0\n 10956: jump @200 if a3 == 0\n      : @192 (gas: 12)\n 10960: s1 = a0\n 10962: a0 = t1 | ra\n 10965: u64 [sp + 0x30] = a5\n 10968: a1 = u64 [sp + 0x38]\n 10971: a1 = a1 | a5\n 10974: a0 = a0 | a1\n 10977: a0 = a0 >> 0x20\n 10980: u64 [sp + 0x28] = ra\n 10983: a1 = a1 | ra\n 10986: a1 = a1 << 0x20\n 10989: a0 = a0 | a1\n 10992: jump @199 if a0 != 0\n      : @193 (gas: 6)\n 10996: u64 [sp + 0x20] = t1\n 10999: i32 a1 = t1 + 0\n 11001: i32 a0 = sp + 0x40\n 11004: u64 [sp + 0x8] = a1\n 11007: ecalli 2 // 'call_data_load'\n 11009: fallthrough\n      : @194 (gas: 10)\n 11010: a4 = u64 [sp + 0x50]\n 11013: a3 = u64 [sp + 0x58]\n 11016: a0 = 0x100000000\n 11026: a1 = a4 ^ a0\n 11029: a1 = a1 | a3\n 11032: a2 = a4 >> 0x20\n 11035: a2 = a2 <u 0x1\n 11038: a2 = 0 if a3 != 0\n 11040: a2 = 0 if a1 == 0\n 11042: jump @200 if a2 == 0\n      : @195 (gas: 12)\n 11046: u64 [sp + 0x10] = a4\n 11049: u64 [sp + 0x18] = a3\n 11052: a1 = u64 [sp + 0x28]\n 11055: a2 = u64 [sp + 0x38]\n 11058: a1 = a1 | a2\n 11061: a0 = 0xffffffe0\n 11071: a2 = u64 [sp + 0x20]\n 11074: a0 = a2 <u a0\n 11077: a2 = u64 [sp + 0x30]\n 11080: a0 = 0 if a2 != 0\n 11082: a0 = 0 if a1 != 0\n 11084: jump @199 if a0 == 0\n      : @196 (gas: 9)\n 11087: a0 = u64 [sp + 0x48]\n 11090: u64 [sp + 0x30] = a0\n 11093: a0 = u64 [sp + 0x40]\n 11096: u64 [sp + 0x38] = a0\n 11099: a0 = u64 [sp + 0x8]\n 11102: i32 a1 = a0 + 0x20\n 11105: i32 a0 = sp + 0x40\n 11108: ecalli 2 // 'call_data_load'\n 11110: fallthrough\n      : @197 (gas: 9)\n 11111: a0 = u64 [sp + 0x58]\n 11114: a1 = u64 [sp + 0x50]\n 11117: a2 = u64 [sp + 0x40]\n 11120: a3 = u64 [sp + 0x48]\n 11123: a4 = a1 | a0\n 11126: a5 = a2 <u 0x2\n 11129: a5 = 0 if a3 != 0\n 11131: a5 = 0 if a4 != 0\n 11133: jump @200 if a5 == 0\n      : @198 (gas: 18)\n 11136: u64 [s1 + 0x28] = a3\n 11139: u64 [s1 + 0x20] = a2\n 11142: a2 = u64 [sp + 0x30]\n 11145: u64 [s1 + 0x8] = a2\n 11148: a2 = u64 [sp + 0x38]\n 11151: u64 [s1] = a2\n 11153: u64 [s1 + 0x30] = a1\n 11156: a1 = u64 [sp + 0x10]\n 11159: u64 [s1 + 0x10] = a1\n 11162: u64 [s1 + 0x38] = a0\n 11165: a0 = u64 [sp + 0x18]\n 11168: u64 [s1 + 0x18] = a0\n 11171: sp = s0 + 0xffffffffffffff80\n 11174: ra = u64 [sp + 0x78]\n 11177: s0 = u64 [sp + 0x70]\n 11180: s1 = u64 [sp + 0x68]\n 11183: sp = sp + 0x80\n 11187: ret\n      : @199 (gas: 1)\n 11189: trap\n      : @200 (gas: 3)\n 11190: a0 = 0\n 11192: a1 = 0\n 11194: ra = 162, jump @0\n      : @201 [@dyn 81] (gas: 6)\n 11200: i32 a1 = a0 + 0\n 11202: a0 = 0x1\n 11205: a2 = 0\n 11207: ra = 0xa4\n 11211: ecalli 10 // 'seal_return'\n 11213: fallthrough\n      : @202 [@dyn 82] (gas: 9)\n 11214: a2 = u64 [a1 + 0x18]\n 11217: a3 = u64 [a1 + 0x10]\n 11220: a4 = u64 [a1 + 0x8]\n 11223: a1 = u64 [a1]\n 11225: u64 [a0 + 0x18] = a2\n 11228: u64 [a0 + 0x10] = a3\n 11231: u64 [a0 + 0x8] = a4\n 11234: u64 [a0] = a1\n 11236: ret\n      : @203 (gas: 8)\n 11238: a0 = u64 [sp + 0x110]\n 11242: a1 = u64 [sp + 0x118]\n 11246: a2 = u64 [sp + 0x108]\n 11250: a3 = u64 [sp + 0x100]\n 11254: a1 = a1 | a2\n 11257: a0 = a0 | a3\n 11260: a0 = a0 | a1\n 11263: jump @209 if a0 != 0\n      : @204 (gas: 13)\n 11267: a0 = u32 [0x20064]\n 11272: u64 [sp + 152] = 0\n 11276: u64 [sp + 144] = 0\n 11280: u64 [sp + 136] = 0\n 11284: u64 [sp + 0x80] = a0\n 11288: u64 [sp + 184] = 0\n 11292: u64 [sp + 176] = 0\n 11296: u64 [sp + 160] = 0x4\n 11301: a0 = sp + 0xc0\n 11305: a1 = sp + 0xa0\n 11309: a2 = sp + 0x80\n 11313: u64 [sp + 168] = 0\n 11317: ra = 166, jump @191\n      : @205 [@dyn 83] (gas: 45)\n 11323: t0 = u64 [sp + 0xc0]\n 11327: a0 = u64 [sp + 0xc8]\n 11331: a1 = u64 [sp + 0xd0]\n 11335: a2 = u64 [sp + 0xd8]\n 11339: a4 = u64 [sp + 0xe0]\n 11343: a5 = u64 [sp + 0xe8]\n 11347: s1 = u64 [sp + 0xf0]\n 11351: a3 = u64 [sp + 0xf8]\n 11355: u64 [sp + 0x38] = a3\n 11358: u64 [sp + 0x30] = s1\n 11361: u64 [sp + 0x28] = a5\n 11364: u64 [sp + 0x20] = a4\n 11367: u64 [sp + 0x58] = a2\n 11370: u64 [sp + 0x50] = a1\n 11373: u64 [sp + 0x48] = a0\n 11376: a0 = sp + 0x60\n 11379: a1 = sp + 0x40\n 11382: a2 = sp + 0x20\n 11385: u64 [sp + 0x40] = t0\n 11388: ra = 0xa8\n 11392: sp = sp + 0xffffffffffffff60\n 11396: u64 [sp + 0x98] = ra\n 11400: u64 [sp + 0x90] = s0\n 11404: u64 [sp + 0x88] = s1\n 11408: s0 = sp + 0xa0\n 11412: sp = sp & 0xffffffffffffffe0\n 11415: a3 = u64 [a2 + 0x18]\n 11418: a4 = u64 [a2 + 0x8]\n 11421: u64 [sp + 0x38] = a0\n 11424: a3 = a3 | a4\n 11427: a0 = u64 [a2 + 0x10]\n 11430: a2 = u64 [a2]\n 11432: a4 = u64 [a1]\n 11434: u64 [sp + 0x28] = a4\n 11437: a4 = u64 [a1 + 0x8]\n 11440: u64 [sp + 0x20] = a4\n 11443: s1 = u32 [a1 + 0x10]\n 11446: a0 = a0 | a2\n 11449: a0 = a0 | a3\n 11452: a0 = a0 >u 0\n 11454: u64 [sp + 0x30] = a0\n 11457: a1 = 0x20\n 11460: a0 = 0\n 11462: ra = 0x106\n 11466: jump @0\n      : @206 [@dyn 84] (gas: 11)\n 11469: a0 = u64 [sp + 0x78]\n 11472: u64 [sp] = a0\n 11474: a0 = u64 [sp + 0x70]\n 11477: u64 [sp + 0x8] = a0\n 11480: a0 = u64 [sp + 0x68]\n 11483: u64 [sp + 0x10] = a0\n 11486: a0 = u64 [sp + 0x60]\n 11489: u64 [sp + 0x18] = a0\n 11492: a0 = 0x40\n 11495: a1 = 0x20\n 11498: ra = 170, jump @0\n      : @207 [@dyn 85] (gas: 100)\n 11504: a1 = u8 [a0 + 0x11]\n 11507: a2 = u8 [a0 + 0x10]\n 11510: a3 = u8 [a0 + 0x12]\n 11513: a4 = u8 [a0 + 0x13]\n 11516: a1 = a1 << 0x8\n 11519: a1 = a1 | a2\n 11522: a3 = a3 << 0x10\n 11525: a4 = a4 << 0x18\n 11528: a3 = a3 | a4\n 11531: a1 = a1 | a3\n 11534: a2 = u8 [a0 + 0x15]\n 11537: a3 = u8 [a0 + 0x14]\n 11540: a4 = u8 [a0 + 0x16]\n 11543: a5 = u8 [a0 + 0x17]\n 11546: a2 = a2 << 0x8\n 11549: a2 = a2 | a3\n 11552: a4 = a4 << 0x10\n 11555: a5 = a5 << 0x18\n 11558: a4 = a4 | a5\n 11561: a2 = a2 | a4\n 11564: a2 = a2 << 0x20\n 11567: t0 = a2 | a1\n 11570: a2 = u8 [a0 + 0x1]\n 11573: a3 = u8 [a0]\n 11575: a4 = u8 [a0 + 0x2]\n 11578: a5 = u8 [a0 + 0x3]\n 11581: a2 = a2 << 0x8\n 11584: a2 = a2 | a3\n 11587: a4 = a4 << 0x10\n 11590: a5 = a5 << 0x18\n 11593: a4 = a4 | a5\n 11596: a2 = a2 | a4\n 11599: a3 = u8 [a0 + 0x5]\n 11602: a4 = u8 [a0 + 0x4]\n 11605: a5 = u8 [a0 + 0x6]\n 11608: s1 = u8 [a0 + 0x7]\n 11611: a3 = a3 << 0x8\n 11614: a3 = a3 | a4\n 11617: a5 = a5 << 0x10\n 11620: s1 = s1 << 0x18\n 11623: a5 = a5 | s1\n 11626: a3 = a3 | a5\n 11629: a3 = a3 << 0x20\n 11632: a2 = a2 | a3\n 11635: a3 = u8 [a0 + 0x19]\n 11638: a4 = u8 [a0 + 0x18]\n 11641: a5 = u8 [a0 + 0x1a]\n 11644: s1 = u8 [a0 + 0x1b]\n 11647: a3 = a3 << 0x8\n 11650: a3 = a3 | a4\n 11653: a5 = a5 << 0x10\n 11656: s1 = s1 << 0x18\n 11659: a5 = a5 | s1\n 11662: a3 = a3 | a5\n 11665: a4 = u8 [a0 + 0x1d]\n 11668: a5 = u8 [a0 + 0x1c]\n 11671: s1 = u8 [a0 + 0x1e]\n 11674: a1 = u8 [a0 + 0x1f]\n 11677: a4 = a4 << 0x8\n 11680: a4 = a4 | a5\n 11683: s1 = s1 << 0x10\n 11686: a1 = a1 << 0x18\n 11689: a1 = a1 | s1\n 11692: a1 = a1 | a4\n 11695: a1 = a1 << 0x20\n 11698: a3 = a3 | a1\n 11701: a1 = u8 [a0 + 0x9]\n 11704: a4 = u8 [a0 + 0x8]\n 11707: a5 = u8 [a0 + 0xa]\n 11710: s1 = u8 [a0 + 0xb]\n 11713: a1 = a1 << 0x8\n 11716: a1 = a1 | a4\n 11719: a5 = a5 << 0x10\n 11722: s1 = s1 << 0x18\n 11725: a5 = a5 | s1\n 11728: a1 = a1 | a5\n 11731: a4 = u8 [a0 + 0xd]\n 11734: a5 = u8 [a0 + 0xc]\n 11737: s1 = u8 [a0 + 0xe]\n 11740: a0 = u8 [a0 + 0xf]\n 11743: a4 = a4 << 0x8\n 11746: a4 = a4 | a5\n 11749: s1 = s1 << 0x10\n 11752: a0 = a0 << 0x18\n 11755: a0 = a0 | s1\n 11758: a0 = a0 | a4\n 11761: a0 = a0 << 0x20\n 11764: a0 = a0 | a1\n 11767: a1 = reverse a0\n 11769: a0 = reverse a3\n 11771: a2 = reverse a2\n 11773: a3 = reverse t0\n 11775: a2 = a2 | a3\n 11778: a3 = a0 | a1\n 11781: a3 = a3 | a2\n 11784: a3 = a3 >> 0x20\n 11787: a1 = a1 | a2\n 11790: a1 = a1 << 0x20\n 11793: a1 = a1 | a3\n 11796: jump @211 if a1 == 0\n      : @208 (gas: 1)\n 11799: trap\n      : @209 (gas: 3)\n 11800: a0 = 0\n 11802: a1 = 0\n 11804: ra = 172, jump @0\n      : @210 [@dyn 86] (gas: 5)\n 11810: i32 a1 = a0 + 0\n 11812: a0 = 0x1\n 11815: a2 = 0\n 11817: ecalli 10 // 'seal_return'\n 11819: fallthrough\n      : @211 (gas: 4)\n 11820: i32 s1 = a0 + 0\n 11822: a1 = 0x20\n 11825: a0 = s1\n 11827: ra = 174, jump @0\n      : @212 [@dyn 87] (gas: 71)\n 11833: a1 = u64 [sp]\n 11835: a1 = reverse a1\n 11837: a2 = u64 [sp + 0x8]\n 11840: a2 = reverse a2\n 11842: a3 = u64 [sp + 0x10]\n 11845: a3 = reverse a3\n 11847: a4 = u64 [sp + 0x18]\n 11850: a4 = reverse a4\n 11852: a5 = a4 >> 0x38\n 11855: u8 [a0 + 0x1f] = a5\n 11858: a5 = a4 >> 0x30\n 11861: u8 [a0 + 0x1e] = a5\n 11864: a5 = a4 >> 0x28\n 11867: u8 [a0 + 0x1d] = a5\n 11870: a5 = a4 >> 0x20\n 11873: u8 [a0 + 0x1c] = a5\n 11876: a5 = a4 >> 0x18\n 11879: u8 [a0 + 0x1b] = a5\n 11882: a5 = a4 >> 0x10\n 11885: u8 [a0 + 0x1a] = a5\n 11888: a5 = a4 >> 0x8\n 11891: u8 [a0 + 0x19] = a5\n 11894: u8 [a0 + 0x18] = a4\n 11897: u8 [a0 + 0x10] = a3\n 11900: a4 = a3 >> 0x38\n 11903: u8 [a0 + 0x17] = a4\n 11906: a4 = a3 >> 0x30\n 11909: u8 [a0 + 0x16] = a4\n 11912: a4 = a3 >> 0x28\n 11915: u8 [a0 + 0x15] = a4\n 11918: a4 = a3 >> 0x20\n 11921: u8 [a0 + 0x14] = a4\n 11924: a4 = a3 >> 0x18\n 11927: u8 [a0 + 0x13] = a4\n 11930: a4 = a3 >> 0x10\n 11933: u8 [a0 + 0x12] = a4\n 11936: a3 = a3 >> 0x8\n 11939: u8 [a0 + 0x11] = a3\n 11942: u8 [a0 + 0x8] = a2\n 11945: a3 = a2 >> 0x38\n 11948: u8 [a0 + 0xf] = a3\n 11951: a3 = a2 >> 0x30\n 11954: u8 [a0 + 0xe] = a3\n 11957: a3 = a2 >> 0x28\n 11960: u8 [a0 + 0xd] = a3\n 11963: a3 = a2 >> 0x20\n 11966: u8 [a0 + 0xc] = a3\n 11969: a3 = a2 >> 0x18\n 11972: u8 [a0 + 0xb] = a3\n 11975: a3 = a2 >> 0x10\n 11978: u8 [a0 + 0xa] = a3\n 11981: a2 = a2 >> 0x8\n 11984: u8 [a0 + 0x9] = a2\n 11987: u8 [a0] = a1\n 11989: a2 = a1 >> 0x38\n 11992: u8 [a0 + 0x7] = a2\n 11995: a2 = a1 >> 0x30\n 11998: u8 [a0 + 0x6] = a2\n 12001: a2 = a1 >> 0x28\n 12004: u8 [a0 + 0x5] = a2\n 12007: a2 = a1 >> 0x20\n 12010: u8 [a0 + 0x4] = a2\n 12013: a2 = a1 >> 0x18\n 12016: u8 [a0 + 0x3] = a2\n 12019: a2 = a1 >> 0x10\n 12022: u8 [a0 + 0x2] = a2\n 12025: a1 = a1 >> 0x8\n 12028: u8 [a0 + 0x1] = a1\n 12031: a1 = 0x20\n 12034: a0 = s1\n 12036: ra = 176, jump @0\n      : @213 [@dyn 88] (gas: 6)\n 12042: i32 a1 = a0 + 0\n 12044: a2 = 0x20\n 12047: a0 = 0\n 12049: ra = 0xb2\n 12053: ecalli 10 // 'seal_return'\n 12055: fallthrough\n      : @214 [@dyn 89] (gas: 33)\n 12056: sp = sp + 0xffffffffffffffa0\n 12059: u64 [sp + 0x58] = ra\n 12062: u64 [sp + 0x50] = s0\n 12065: u64 [sp + 0x48] = s1\n 12068: s0 = sp + 0x60\n 12071: sp = sp & 0xffffffffffffffe0\n 12074: s1 = a0\n 12076: u64 [sp + 24] = 0\n 12079: u64 [sp + 16] = 0\n 12082: u64 [sp + 8] = 0\n 12085: u64 [sp + 0] = 0\n 12087: u64 [sp + 56] = 0\n 12090: u64 [sp + 48] = 0\n 12093: u64 [sp + 40] = 0\n 12096: u64 [sp + 32] = 0\n 12099: u32 [sp + 64] = 0x20\n 12103: i32 a1 = sp + 0\n 12105: i32 a3 = sp + 0x20\n 12108: i32 a4 = sp + 0x40\n 12111: a2 = 0xffffffffffffffff\n 12114: a0 = 0\n 12116: ecalli 6 // 'get_storage'\n 12118: a0 = u32 [sp + 0x24]\n 12121: u64 [s1 + 24] = 0\n 12124: u64 [s1 + 16] = 0\n 12127: u64 [s1 + 8] = 0\n 12130: u64 [s1] = a0\n 12132: sp = s0 + 0xffffffffffffffa0\n 12135: ra = u64 [sp + 0x58]\n 12138: s0 = u64 [sp + 0x50]\n 12141: s1 = u64 [sp + 0x48]\n 12144: sp = sp + 0x60\n 12147: ret\n      : @215 (gas: 8)\n 12149: a0 = u64 [sp + 0x30]\n 12152: a1 = u64 [sp + 0x38]\n 12155: a2 = u64 [sp + 0x28]\n 12158: a3 = u64 [sp + 0x20]\n 12161: a1 = a1 | a2\n 12164: a0 = a0 | a3\n 12167: a0 = a0 | a1\n 12170: jump @220 if a0 != 0\n      : @216 (gas: 2)\n 12174: a0 = i32 [0x20064]\n 12179: jump @220 if a0 <=u 3\n      : @217 (gas: 20)\n 12184: u64 [sp + 88] = 0\n 12187: u64 [sp + 80] = 0\n 12190: u64 [sp + 72] = 0\n 12193: u64 [sp + 64] = 0\n 12196: u64 [sp + 120] = 0\n 12199: u64 [sp + 112] = 0\n 12202: u64 [sp + 104] = 0\n 12205: u64 [sp + 96] = 0\n 12208: u32 [sp + 128] = 0x20\n 12213: i32 a1 = sp + 0x40\n 12216: i32 a3 = sp + 0x60\n 12219: i32 a4 = sp + 0x80\n 12223: a2 = 0xffffffffffffffff\n 12226: a0 = 0\n 12228: ecalli 6 // 'get_storage'\n 12230: a0 = u64 [sp + 0x60]\n 12233: u64 [sp + 0x18] = a0\n 12236: a0 = 0x40\n 12239: a1 = 0x20\n 12242: ra = 180, jump @0\n      : @218 [@dyn 90] (gas: 100)\n 12248: a1 = u8 [a0 + 0x11]\n 12251: a2 = u8 [a0 + 0x10]\n 12254: a3 = u8 [a0 + 0x12]\n 12257: a4 = u8 [a0 + 0x13]\n 12260: a1 = a1 << 0x8\n 12263: a1 = a1 | a2\n 12266: a3 = a3 << 0x10\n 12269: a4 = a4 << 0x18\n 12272: a3 = a3 | a4\n 12275: a1 = a1 | a3\n 12278: a2 = u8 [a0 + 0x15]\n 12281: a3 = u8 [a0 + 0x14]\n 12284: a4 = u8 [a0 + 0x16]\n 12287: a5 = u8 [a0 + 0x17]\n 12290: a2 = a2 << 0x8\n 12293: a2 = a2 | a3\n 12296: a4 = a4 << 0x10\n 12299: a5 = a5 << 0x18\n 12302: a4 = a4 | a5\n 12305: a2 = a2 | a4\n 12308: a2 = a2 << 0x20\n 12311: t0 = a2 | a1\n 12314: a2 = u8 [a0 + 0x1]\n 12317: a3 = u8 [a0]\n 12319: a4 = u8 [a0 + 0x2]\n 12322: a5 = u8 [a0 + 0x3]\n 12325: a2 = a2 << 0x8\n 12328: a2 = a2 | a3\n 12331: a4 = a4 << 0x10\n 12334: a5 = a5 << 0x18\n 12337: a4 = a4 | a5\n 12340: a2 = a2 | a4\n 12343: a3 = u8 [a0 + 0x5]\n 12346: a4 = u8 [a0 + 0x4]\n 12349: a5 = u8 [a0 + 0x6]\n 12352: s1 = u8 [a0 + 0x7]\n 12355: a3 = a3 << 0x8\n 12358: a3 = a3 | a4\n 12361: a5 = a5 << 0x10\n 12364: s1 = s1 << 0x18\n 12367: a5 = a5 | s1\n 12370: a3 = a3 | a5\n 12373: a3 = a3 << 0x20\n 12376: a2 = a2 | a3\n 12379: a3 = u8 [a0 + 0x19]\n 12382: a4 = u8 [a0 + 0x18]\n 12385: a5 = u8 [a0 + 0x1a]\n 12388: s1 = u8 [a0 + 0x1b]\n 12391: a3 = a3 << 0x8\n 12394: a3 = a3 | a4\n 12397: a5 = a5 << 0x10\n 12400: s1 = s1 << 0x18\n 12403: a5 = a5 | s1\n 12406: a3 = a3 | a5\n 12409: a4 = u8 [a0 + 0x1d]\n 12412: a5 = u8 [a0 + 0x1c]\n 12415: s1 = u8 [a0 + 0x1e]\n 12418: a1 = u8 [a0 + 0x1f]\n 12421: a4 = a4 << 0x8\n 12424: a4 = a4 | a5\n 12427: s1 = s1 << 0x10\n 12430: a1 = a1 << 0x18\n 12433: a1 = a1 | s1\n 12436: a1 = a1 | a4\n 12439: a1 = a1 << 0x20\n 12442: a3 = a3 | a1\n 12445: a1 = u8 [a0 + 0x9]\n 12448: a4 = u8 [a0 + 0x8]\n 12451: a5 = u8 [a0 + 0xa]\n 12454: s1 = u8 [a0 + 0xb]\n 12457: a1 = a1 << 0x8\n 12460: a1 = a1 | a4\n 12463: a5 = a5 << 0x10\n 12466: s1 = s1 << 0x18\n 12469: a5 = a5 | s1\n 12472: a1 = a1 | a5\n 12475: a4 = u8 [a0 + 0xd]\n 12478: a5 = u8 [a0 + 0xc]\n 12481: s1 = u8 [a0 + 0xe]\n 12484: a0 = u8 [a0 + 0xf]\n 12487: a4 = a4 << 0x8\n 12490: a4 = a4 | a5\n 12493: s1 = s1 << 0x10\n 12496: a0 = a0 << 0x18\n 12499: a0 = a0 | s1\n 12502: a0 = a0 | a4\n 12505: a0 = a0 << 0x20\n 12508: a0 = a0 | a1\n 12511: a1 = reverse a0\n 12513: a0 = reverse a3\n 12515: a2 = reverse a2\n 12517: a3 = reverse t0\n 12519: a2 = a2 | a3\n 12522: a3 = a0 | a1\n 12525: a3 = a3 | a2\n 12528: a3 = a3 >> 0x20\n 12531: a1 = a1 | a2\n 12534: a1 = a1 << 0x20\n 12537: a1 = a1 | a3\n 12540: jump @222 if a1 == 0\n      : @219 (gas: 1)\n 12543: trap\n      : @220 (gas: 3)\n 12544: a0 = 0\n 12546: a1 = 0\n 12548: ra = 182, jump @0\n      : @221 [@dyn 91] (gas: 5)\n 12554: i32 a1 = a0 + 0\n 12556: a0 = 0x1\n 12559: a2 = 0\n 12561: ecalli 10 // 'seal_return'\n 12563: fallthrough\n      : @222 (gas: 4)\n 12564: i32 s1 = a0 + 0\n 12566: a1 = 0x20\n 12569: a0 = s1\n 12571: ra = 184, jump @0\n      : @223 [@dyn 92] (gas: 40)\n 12577: a1 = u64 [sp + 0x18]\n 12580: a1 = reverse a1\n 12582: a2 = a1 >> 0x18\n 12585: u8 [a0 + 0x1f] = a2\n 12588: a2 = a1 >> 0x10\n 12591: u8 [a0 + 0x1e] = a2\n 12594: a2 = a1 >> 0x8\n 12597: u8 [a0 + 0x1d] = a2\n 12600: u8 [a0 + 0x1c] = a1\n 12603: u8 [a0 + 27] = 0\n 12606: u8 [a0 + 26] = 0\n 12609: u8 [a0 + 25] = 0\n 12612: u8 [a0 + 24] = 0\n 12615: u8 [a0 + 23] = 0\n 12618: u8 [a0 + 22] = 0\n 12621: u8 [a0 + 21] = 0\n 12624: u8 [a0 + 20] = 0\n 12627: u8 [a0 + 19] = 0\n 12630: u8 [a0 + 18] = 0\n 12633: u8 [a0 + 17] = 0\n 12636: u8 [a0 + 16] = 0\n 12639: u8 [a0 + 15] = 0\n 12642: u8 [a0 + 14] = 0\n 12645: u8 [a0 + 13] = 0\n 12648: u8 [a0 + 12] = 0\n 12651: u8 [a0 + 11] = 0\n 12654: u8 [a0 + 10] = 0\n 12657: u8 [a0 + 9] = 0\n 12660: u8 [a0 + 8] = 0\n 12663: u8 [a0 + 7] = 0\n 12666: u8 [a0 + 6] = 0\n 12669: u8 [a0 + 5] = 0\n 12672: u8 [a0 + 4] = 0\n 12675: u8 [a0 + 3] = 0\n 12678: u8 [a0 + 2] = 0\n 12681: u8 [a0 + 1] = 0\n 12684: u8 [a0 + 0] = 0\n 12686: a1 = 0x20\n 12689: a0 = s1\n 12691: ra = 186, jump @0\n      : @224 [@dyn 93] (gas: 6)\n 12697: i32 a1 = a0 + 0\n 12699: a2 = 0x20\n 12702: a0 = 0\n 12704: ra = 0xbc\n 12708: ecalli 10 // 'seal_return'\n 12710: fallthrough\n      : @225 [@dyn 94] (gas: 1)\n 12711: ret\n      : @226 (gas: 47)\n 12713: sp = sp + 0xffffffffffffff60\n 12717: u64 [sp + 0x98] = ra\n 12721: u64 [sp + 0x90] = s0\n 12725: u64 [sp + 0x88] = s1\n 12729: s0 = sp + 0xa0\n 12733: sp = sp & 0xffffffffffffffe0\n 12736: ra = u64 [a1 + 0x10]\n 12739: a5 = u64 [a1 + 0x8]\n 12742: a3 = u64 [a2 + 0x8]\n 12745: t1 = u64 [a1]\n 12747: a4 = u64 [a2]\n 12749: u64 [sp + 0x48] = a4\n 12752: t2 = u64 [a2 + 0x10]\n 12755: t0 = a3 ^ a5\n 12758: s1 = a3 <u a5\n 12761: a4 = a4 <u t1\n 12764: u64 [sp + 0x40] = a4\n 12767: s1 = a4 if t0 == 0\n 12770: t0 = u64 [a1 + 0x18]\n 12773: a1 = u64 [a2 + 0x18]\n 12776: u64 [sp + 0x38] = a1\n 12779: a2 = t2 - ra\n 12782: a1 = a2 - s1\n 12785: u64 [sp + 0x50] = a1\n 12788: a1 = a2 <u s1\n 12791: a4 = t2 <u ra\n 12794: u64 [sp + 0x58] = t0\n 12797: a2 = u64 [sp + 0x38]\n 12800: a2 = a2 - t0\n 12803: a2 = a2 - a4\n 12806: a2 = a2 - a1\n 12809: a1 = a3 - a5\n 12812: a3 = u64 [sp + 0x40]\n 12815: a1 = a1 - a3\n 12818: a3 = u64 [sp + 0x48]\n 12821: a3 = a3 - t1\n 12824: a4 = a1 >u 0\n 12826: a3 = a3 <u 0x40\n 12829: a3 = a3 ^ 0x1\n 12832: a3 = a4 if a1 != 0\n 12835: s1 = a2 >s 0\n 12837: a1 = u64 [sp + 0x50]\n 12840: a4 = a1 >u 0\n 12842: a4 = s1 if a2 != 0\n 12845: a1 = a1 | a2\n 12848: a3 = a4 if a1 != 0\n 12851: jump @233 if a3 == 0\n      : @227 (gas: 12)\n 12855: s1 = a0\n 12857: a0 = t1 | ra\n 12860: u64 [sp + 0x50] = a5\n 12863: a1 = u64 [sp + 0x58]\n 12866: a1 = a1 | a5\n 12869: a0 = a0 | a1\n 12872: a0 = a0 >> 0x20\n 12875: u64 [sp + 0x48] = ra\n 12878: a1 = a1 | ra\n 12881: a1 = a1 << 0x20\n 12884: a0 = a0 | a1\n 12887: jump @232 if a0 != 0\n      : @228 (gas: 6)\n 12891: u64 [sp + 0x40] = t1\n 12894: i32 a1 = t1 + 0\n 12896: i32 a0 = sp + 0x60\n 12899: u64 [sp + 0x18] = a1\n 12902: ecalli 2 // 'call_data_load'\n 12904: fallthrough\n      : @229 (gas: 9)\n 12905: a4 = u64 [sp + 0x78]\n 12908: a3 = u64 [sp + 0x70]\n 12911: a2 = u64 [sp + 0x60]\n 12914: a5 = u64 [sp + 0x68]\n 12917: a0 = a3 | a4\n 12920: a1 = a2 <u 0x2\n 12923: a1 = 0 if a5 != 0\n 12925: a1 = 0 if a0 != 0\n 12927: jump @234 if a1 == 0\n      : @230 (gas: 14)\n 12931: u64 [sp + 0x20] = a5\n 12934: u64 [sp + 0x28] = a4\n 12937: u64 [sp + 0x30] = a3\n 12940: u64 [sp + 0x38] = a2\n 12943: a0 = u64 [sp + 0x48]\n 12946: a1 = u64 [sp + 0x58]\n 12949: a0 = a0 | a1\n 12952: a1 = 0xffffffe0\n 12962: a2 = u64 [sp + 0x40]\n 12965: a1 = a2 <u a1\n 12968: a2 = u64 [sp + 0x50]\n 12971: a1 = 0 if a2 != 0\n 12973: a1 = 0 if a0 != 0\n 12975: jump @232 if a1 == 0\n      : @231 (gas: 26)\n 12978: a0 = u64 [sp + 0x18]\n 12981: i32 a1 = a0 + 0x20\n 12984: i32 a0 = sp + 0x60\n 12987: ecalli 2 // 'call_data_load'\n 12989: a0 = u64 [sp + 0x78]\n 12992: a1 = u64 [sp + 0x70]\n 12995: a2 = u64 [sp + 0x68]\n 12998: a3 = u64 [sp + 0x60]\n 13001: u64 [s1 + 0x38] = a0\n 13004: u64 [s1 + 0x30] = a1\n 13007: u64 [s1 + 0x28] = a2\n 13010: u64 [s1 + 0x20] = a3\n 13013: a0 = u64 [sp + 0x28]\n 13016: u64 [s1 + 0x18] = a0\n 13019: a0 = u64 [sp + 0x30]\n 13022: u64 [s1 + 0x10] = a0\n 13025: a0 = u64 [sp + 0x20]\n 13028: u64 [s1 + 0x8] = a0\n 13031: a0 = u64 [sp + 0x38]\n 13034: u64 [s1] = a0\n 13036: sp = s0 + 0xffffffffffffff60\n 13040: ra = u64 [sp + 0x98]\n 13044: s0 = u64 [sp + 0x90]\n 13048: s1 = u64 [sp + 0x88]\n 13052: sp = sp + 0xa0\n 13056: ret\n      : @232 (gas: 1)\n 13058: trap\n      : @233 (gas: 4)\n 13059: a0 = 0\n 13061: a1 = 0\n 13063: ra = 0xbe\n 13067: jump @0\n      : @234 (gas: 2)\n 13070: a0 = 0\n 13072: ra = 190, jump @0\n      : @235 [@dyn 95] (gas: 6)\n 13078: i32 a1 = a0 + 0\n 13080: a0 = 0x1\n 13083: a2 = 0\n 13085: ra = 0xc0\n 13089: ecalli 10 // 'seal_return'\n 13091: fallthrough\n      : @236 [@dyn 96] (gas: 12)\n 13092: sp = sp + 0xffffffffffffff00\n 13096: u64 [sp + 0xf8] = ra\n 13100: u64 [sp + 0xf0] = s0\n 13104: s0 = sp + 0x100\n 13108: sp = sp & 0xffffffffffffffe0\n 13111: u64 [sp + 216] = 0\n 13115: u64 [sp + 208] = 0\n 13119: u64 [sp + 200] = 0\n 13123: u64 [sp + 192] = 0\n 13127: i32 a0 = sp + 0xc0\n 13131: ecalli 13 // 'value_transferred'\n 13133: fallthrough\n      : @237 (gas: 8)\n 13134: a0 = u64 [sp + 0xd0]\n 13138: a1 = u64 [sp + 0xd8]\n 13142: a2 = u64 [sp + 0xc8]\n 13146: a3 = u64 [sp + 0xc0]\n 13150: a1 = a1 | a2\n 13153: a0 = a0 | a3\n 13156: a0 = a0 | a1\n 13159: jump @243 if a0 != 0\n      : @238 (gas: 13)\n 13163: a0 = u32 [0x20064]\n 13168: u64 [sp + 88] = 0\n 13171: u64 [sp + 80] = 0\n 13174: u64 [sp + 72] = 0\n 13177: u64 [sp + 0x40] = a0\n 13180: u64 [sp + 120] = 0\n 13183: u64 [sp + 112] = 0\n 13186: u64 [sp + 96] = 0x4\n 13190: a0 = sp + 0x80\n 13194: a1 = sp + 0x60\n 13197: a2 = sp + 0x40\n 13200: u64 [sp + 104] = 0\n 13203: ra = 194, jump @226\n      : @239 [@dyn 97] (gas: 19)\n 13209: t0 = u64 [sp + 0x80]\n 13213: t1 = u64 [sp + 0x88]\n 13217: a1 = u64 [sp + 0x90]\n 13221: a3 = u64 [sp + 0x98]\n 13225: a4 = u64 [sp + 0xa0]\n 13229: a5 = u64 [sp + 0xa8]\n 13233: a2 = u64 [sp + 0xb0]\n 13237: a0 = u64 [sp + 0xb8]\n 13241: u64 [sp + 0x18] = a0\n 13244: u64 [sp + 0x10] = a2\n 13247: u64 [sp + 0x8] = a5\n 13250: u64 [sp] = a4\n 13252: u64 [sp + 0x38] = a3\n 13255: u64 [sp + 0x30] = a1\n 13258: u64 [sp + 0x28] = t1\n 13261: a0 = sp + 0x20\n 13264: a1 = sp\n 13266: u64 [sp + 0x20] = t0\n 13269: ra = 196, jump @334\n      : @240 [@dyn 98] (gas: 3)\n 13275: a0 = 0x40\n 13278: a1 = 0x20\n 13281: ra = 198, jump @0\n      : @241 [@dyn 99] (gas: 100)\n 13287: a1 = u8 [a0 + 0x11]\n 13290: a2 = u8 [a0 + 0x10]\n 13293: a3 = u8 [a0 + 0x12]\n 13296: a4 = u8 [a0 + 0x13]\n 13299: a1 = a1 << 0x8\n 13302: a1 = a1 | a2\n 13305: a3 = a3 << 0x10\n 13308: a4 = a4 << 0x18\n 13311: a3 = a3 | a4\n 13314: a1 = a1 | a3\n 13317: a2 = u8 [a0 + 0x15]\n 13320: a3 = u8 [a0 + 0x14]\n 13323: a4 = u8 [a0 + 0x16]\n 13326: a5 = u8 [a0 + 0x17]\n 13329: a2 = a2 << 0x8\n 13332: a2 = a2 | a3\n 13335: a4 = a4 << 0x10\n 13338: a5 = a5 << 0x18\n 13341: a4 = a4 | a5\n 13344: a2 = a2 | a4\n 13347: a2 = a2 << 0x20\n 13350: t0 = a2 | a1\n 13353: a2 = u8 [a0 + 0x1]\n 13356: a3 = u8 [a0]\n 13358: a4 = u8 [a0 + 0x2]\n 13361: a5 = u8 [a0 + 0x3]\n 13364: a2 = a2 << 0x8\n 13367: a2 = a2 | a3\n 13370: a4 = a4 << 0x10\n 13373: a5 = a5 << 0x18\n 13376: a4 = a4 | a5\n 13379: a2 = a2 | a4\n 13382: a3 = u8 [a0 + 0x5]\n 13385: a4 = u8 [a0 + 0x4]\n 13388: a5 = u8 [a0 + 0x6]\n 13391: a1 = u8 [a0 + 0x7]\n 13394: a3 = a3 << 0x8\n 13397: a3 = a3 | a4\n 13400: a5 = a5 << 0x10\n 13403: a1 = a1 << 0x18\n 13406: a1 = a1 | a5\n 13409: a1 = a1 | a3\n 13412: a1 = a1 << 0x20\n 13415: t1 = a1 | a2\n 13418: a1 = u8 [a0 + 0x19]\n 13421: a3 = u8 [a0 + 0x18]\n 13424: a4 = u8 [a0 + 0x1a]\n 13427: a5 = u8 [a0 + 0x1b]\n 13430: a1 = a1 << 0x8\n 13433: a1 = a1 | a3\n 13436: a4 = a4 << 0x10\n 13439: a5 = a5 << 0x18\n 13442: a4 = a4 | a5\n 13445: a1 = a1 | a4\n 13448: a3 = u8 [a0 + 0x1d]\n 13451: a4 = u8 [a0 + 0x1c]\n 13454: a5 = u8 [a0 + 0x1e]\n 13457: a2 = u8 [a0 + 0x1f]\n 13460: a3 = a3 << 0x8\n 13463: a3 = a3 | a4\n 13466: a5 = a5 << 0x10\n 13469: a2 = a2 << 0x18\n 13472: a2 = a2 | a5\n 13475: a2 = a2 | a3\n 13478: a2 = a2 << 0x20\n 13481: a3 = a2 | a1\n 13484: a1 = u8 [a0 + 0x9]\n 13487: a2 = u8 [a0 + 0x8]\n 13490: a4 = u8 [a0 + 0xa]\n 13493: a5 = u8 [a0 + 0xb]\n 13496: a1 = a1 << 0x8\n 13499: a1 = a1 | a2\n 13502: a4 = a4 << 0x10\n 13505: a5 = a5 << 0x18\n 13508: a4 = a4 | a5\n 13511: a1 = a1 | a4\n 13514: a2 = u8 [a0 + 0xd]\n 13517: a4 = u8 [a0 + 0xc]\n 13520: a5 = u8 [a0 + 0xe]\n 13523: a0 = u8 [a0 + 0xf]\n 13526: a2 = a2 << 0x8\n 13529: a2 = a2 | a4\n 13532: a5 = a5 << 0x10\n 13535: a0 = a0 << 0x18\n 13538: a0 = a0 | a5\n 13541: a0 = a0 | a2\n 13544: a0 = a0 << 0x20\n 13547: a0 = a0 | a1\n 13550: a1 = reverse a0\n 13552: a0 = reverse a3\n 13554: a2 = reverse t1\n 13556: a3 = reverse t0\n 13558: a2 = a2 | a3\n 13561: a3 = a0 | a1\n 13564: a3 = a3 | a2\n 13567: a3 = a3 >> 0x20\n 13570: a1 = a1 | a2\n 13573: a1 = a1 << 0x20\n 13576: a1 = a1 | a3\n 13579: jump @245 if a1 == 0\n      : @242 (gas: 1)\n 13582: trap\n      : @243 (gas: 3)\n 13583: a0 = 0\n 13585: a1 = 0\n 13587: ra = 200, jump @0\n      : @244 [@dyn 100] (gas: 7)\n 13593: i32 a1 = a0 + 0\n 13595: a0 = 0x1\n 13598: a2 = 0\n 13600: ecalli 10 // 'seal_return'\n 13602: i32 a0 = a0 + 0\n 13604: ra = 0xca\n 13608: jump @0\n      : @245 (gas: 2)\n 13611: i32 a0 = a0 + 0\n 13613: ra = 202, jump @0\n      : @246 [@dyn 101] (gas: 6)\n 13619: i32 a1 = a0 + 0\n 13621: a0 = 0\n 13623: a2 = 0\n 13625: ra = 0xcc\n 13629: ecalli 10 // 'seal_return'\n 13631: fallthrough\n      : @247 [@dyn 102] (gas: 9)\n 13632: a2 = u64 [a1 + 0x18]\n 13635: a3 = u64 [a1 + 0x10]\n 13638: a4 = u64 [a1 + 0x8]\n 13641: a1 = u64 [a1]\n 13643: u64 [a0 + 0x18] = a2\n 13646: u64 [a0 + 0x10] = a3\n 13649: u64 [a0 + 0x8] = a4\n 13652: u64 [a0] = a1\n 13654: ret\n      : @248 [@dyn 103] (gas: 6)\n 13656: i32 a1 = a0 + 0\n 13658: a0 = 0x1\n 13661: a2 = 0\n 13663: ra = 0xd0\n 13667: ecalli 10 // 'seal_return'\n 13669: fallthrough\n      : @249 [@dyn 104] (gas: 9)\n 13670: a2 = u64 [a1 + 0x18]\n 13673: a3 = u64 [a1 + 0x10]\n 13676: a4 = u64 [a1 + 0x8]\n 13679: a1 = u64 [a1]\n 13681: u64 [a0 + 0x18] = a2\n 13684: u64 [a0 + 0x10] = a3\n 13687: u64 [a0 + 0x8] = a4\n 13690: u64 [a0] = a1\n 13692: ret\n      : @250 (gas: 17)\n 13694: sp = sp + 0xffffffffffffffa0\n 13697: u64 [sp + 0x58] = ra\n 13700: u64 [sp + 0x50] = s0\n 13703: u64 [sp + 0x48] = s1\n 13706: a3 = u64 [a1 + 0x18]\n 13709: a4 = u64 [a1 + 0x10]\n 13712: a5 = u64 [a1 + 0x8]\n 13715: s1 = u64 [a1]\n 13717: a1 = a5 | a3\n 13720: a2 = s1 | a4\n 13723: a2 = a2 | a1\n 13726: a2 = a2 >> 0x20\n 13729: a1 = a1 | a4\n 13732: a1 = a1 << 0x20\n 13735: a1 = a1 | a2\n 13738: u64 [sp + 0x28] = a0\n 13741: jump @257 if a1 != 0\n      : @251 (gas: 19)\n 13745: a0 = s1 + 0x20\n 13748: u64 [sp + 0x30] = a0\n 13751: a0 = a0 <u s1\n 13754: a1 = a5 + a0\n 13757: u64 [sp + 0x40] = a1\n 13760: u64 [sp + 0x8] = a5\n 13763: s0 = a1 <u a5\n 13766: s0 = a0 if a0 == 0\n 13769: s0 = s0 + a4\n 13772: u64 [sp + 0x10] = a4\n 13775: a0 = s0 <u a4\n 13778: u64 [sp + 0x18] = a3\n 13781: a0 = a0 + a3\n 13784: u64 [sp + 0x38] = a0\n 13787: u64 [sp] = s1\n 13789: i32 a0 = s1 + 0\n 13791: a1 = 0x20\n 13794: s1 = 0x20\n 13797: ra = 210, jump @0\n      : @252 [@dyn 105] (gas: 45)\n 13803: u8 [a0 + 0x1f] = s1\n 13806: a1 = u64 [sp + 0x30]\n 13809: s1 = a1\n 13811: a1 = a1 | s0\n 13814: a2 = u64 [sp + 0x40]\n 13817: a4 = u64 [sp + 0x38]\n 13820: a2 = a2 | a4\n 13823: a1 = a1 | a2\n 13826: a1 = a1 >> 0x20\n 13829: u64 [sp + 0x20] = s0\n 13832: a2 = a2 | s0\n 13835: a2 = a2 << 0x20\n 13838: a1 = a1 | a2\n 13841: u8 [a0 + 30] = 0\n 13844: u8 [a0 + 29] = 0\n 13847: u8 [a0 + 28] = 0\n 13850: u8 [a0 + 27] = 0\n 13853: u8 [a0 + 26] = 0\n 13856: u8 [a0 + 25] = 0\n 13859: u8 [a0 + 24] = 0\n 13862: u8 [a0 + 23] = 0\n 13865: u8 [a0 + 22] = 0\n 13868: u8 [a0 + 21] = 0\n 13871: u8 [a0 + 20] = 0\n 13874: u8 [a0 + 19] = 0\n 13877: u8 [a0 + 18] = 0\n 13880: u8 [a0 + 17] = 0\n 13883: u8 [a0 + 16] = 0\n 13886: u8 [a0 + 15] = 0\n 13889: u8 [a0 + 14] = 0\n 13892: u8 [a0 + 13] = 0\n 13895: u8 [a0 + 12] = 0\n 13898: u8 [a0 + 11] = 0\n 13901: u8 [a0 + 10] = 0\n 13904: u8 [a0 + 9] = 0\n 13907: u8 [a0 + 8] = 0\n 13910: u8 [a0 + 7] = 0\n 13913: u8 [a0 + 6] = 0\n 13916: u8 [a0 + 5] = 0\n 13919: u8 [a0 + 4] = 0\n 13922: u8 [a0 + 3] = 0\n 13925: u8 [a0 + 2] = 0\n 13928: u8 [a0 + 1] = 0\n 13931: u8 [a0 + 0] = 0\n 13933: jump @257 if a1 != 0\n      : @253 (gas: 4)\n 13937: i32 s0 = s1 + 0\n 13939: a1 = 0x20\n 13942: a0 = s0\n 13944: ra = 212, jump @0\n      : @254 [@dyn 106] (gas: 41)\n 13950: u8 [a0 + 31] = 0x17\n 13954: u8 [a0 + 30] = 0\n 13957: u8 [a0 + 29] = 0\n 13960: u8 [a0 + 28] = 0\n 13963: u8 [a0 + 27] = 0\n 13966: u8 [a0 + 26] = 0\n 13969: u8 [a0 + 25] = 0\n 13972: u8 [a0 + 24] = 0\n 13975: u8 [a0 + 23] = 0\n 13978: u8 [a0 + 22] = 0\n 13981: u8 [a0 + 21] = 0\n 13984: u8 [a0 + 20] = 0\n 13987: u8 [a0 + 19] = 0\n 13990: u8 [a0 + 18] = 0\n 13993: u8 [a0 + 17] = 0\n 13996: u8 [a0 + 16] = 0\n 13999: u8 [a0 + 15] = 0\n 14002: u8 [a0 + 14] = 0\n 14005: u8 [a0 + 13] = 0\n 14008: u8 [a0 + 12] = 0\n 14011: u8 [a0 + 11] = 0\n 14014: u8 [a0 + 10] = 0\n 14017: u8 [a0 + 9] = 0\n 14020: u8 [a0 + 8] = 0\n 14023: u8 [a0 + 7] = 0\n 14026: u8 [a0 + 6] = 0\n 14029: u8 [a0 + 5] = 0\n 14032: u8 [a0 + 4] = 0\n 14035: u8 [a0 + 3] = 0\n 14038: u8 [a0 + 2] = 0\n 14041: u8 [a0 + 1] = 0\n 14044: a1 = u64 [sp + 0x20]\n 14047: a2 = u64 [sp + 0x38]\n 14050: a1 = a1 | a2\n 14053: a2 = 0xffffffe0\n 14063: a2 = s1 <u a2\n 14066: a3 = u64 [sp + 0x40]\n 14069: a2 = 0 if a3 != 0\n 14071: a2 = 0 if a1 != 0\n 14073: u8 [a0 + 0] = 0\n 14075: jump @257 if a2 == 0\n      : @255 (gas: 3)\n 14079: i32 a0 = s0 + 0x20\n 14082: a1 = 0x20\n 14085: ra = 214, jump @0\n      : @256 [@dyn 107] (gas: 55)\n 14091: u8 [a0 + 31] = 0\n 14094: u8 [a0 + 30] = 0\n 14097: u8 [a0 + 29] = 0\n 14100: u8 [a0 + 28] = 0\n 14103: u8 [a0 + 27] = 0\n 14106: u8 [a0 + 26] = 0\n 14109: u8 [a0 + 25] = 0\n 14112: u8 [a0 + 24] = 0\n 14115: u8 [a0 + 23] = 0\n 14118: u8 [a0 + 22] = 0x65\n 14122: u8 [a0 + 21] = 0x76\n 14126: u8 [a0 + 20] = 0x69\n 14130: u8 [a0 + 19] = 0x74\n 14134: u8 [a0 + 18] = 0x69\n 14138: u8 [a0 + 17] = 0x73\n 14142: u8 [a0 + 16] = 0x6f\n 14146: u8 [a0 + 15] = 0x70\n 14150: a5 = 0x20\n 14153: u8 [a0 + 0xe] = a5\n 14156: u8 [a0 + 13] = 0x65\n 14160: u8 [a0 + 12] = 0x62\n 14164: u8 [a0 + 0xb] = a5\n 14167: u8 [a0 + 10] = 0x74\n 14171: u8 [a0 + 9] = 0x73\n 14175: u8 [a0 + 8] = 0x75\n 14179: u8 [a0 + 7] = 0x6d\n 14183: u8 [a0 + 0x6] = a5\n 14186: u8 [a0 + 5] = 0x74\n 14190: u8 [a0 + 4] = 0x6e\n 14194: u8 [a0 + 3] = 0x75\n 14198: u8 [a0 + 2] = 0x6f\n 14202: u8 [a0 + 1] = 0x6d\n 14206: u8 [a0 + 0] = 0x41\n 14209: a1 = u64 [sp]\n 14211: a0 = a1 + 0x60\n 14214: a1 = a0 <u a1\n 14217: a3 = u64 [sp + 0x8]\n 14220: a2 = a3 + a1\n 14223: a3 = a2 <u a3\n 14226: a3 = a1 if a1 == 0\n 14229: a1 = u64 [sp + 0x10]\n 14232: a3 = a3 + a1\n 14235: a1 = a3 <u a1\n 14238: a4 = u64 [sp + 0x18]\n 14241: a1 = a1 + a4\n 14244: a4 = u64 [sp + 0x28]\n 14247: u64 [a4] = a0\n 14249: u64 [a4 + 0x8] = a2\n 14252: u64 [a4 + 0x10] = a3\n 14255: u64 [a4 + 0x18] = a1\n 14258: ra = u64 [sp + 0x58]\n 14261: s0 = u64 [sp + 0x50]\n 14264: s1 = u64 [sp + 0x48]\n 14267: sp = sp + 0x60\n 14270: ret\n      : @257 (gas: 1)\n 14272: trap\n      : @258 (gas: 8)\n 14273: a0 = u64 [s1 + 0x210]\n 14277: a1 = u64 [s1 + 0x218]\n 14281: a2 = u64 [s1 + 0x208]\n 14285: a3 = u64 [s1 + 0x200]\n 14289: a1 = a1 | a2\n 14292: a0 = a0 | a3\n 14295: a0 = a0 | a1\n 14298: jump @288 if a0 == 0\n      : @259 (gas: 39)\n 14302: a0 = sp + 0xffffffffffffffe0\n 14305: a0 = a0 & 0xffffffffffffffe0\n 14308: u64 [s1 + 0x58] = a0\n 14311: sp = a0\n 14313: u64 [a0 + 24] = 0\n 14316: u64 [a0 + 16] = 0\n 14319: u64 [a0 + 8] = 0\n 14322: u64 [a0 + 0] = 0\n 14324: i32 a0 = a0 + 0\n 14326: ecalli 13 // 'value_transferred'\n 14328: a1 = u64 [s1 + 0x58]\n 14331: a0 = u64 [a1 + 0x18]\n 14334: u64 [s1 + 0x50] = a0\n 14337: a0 = u64 [a1 + 0x10]\n 14340: u64 [s1 + 0x48] = a0\n 14343: a0 = u64 [a1]\n 14345: u64 [s1 + 0x40] = a0\n 14348: a0 = u64 [a1 + 0x8]\n 14351: u64 [s1 + 0x38] = a0\n 14354: i32 a0 = s1 + 0x220\n 14358: ecalli 4 // 'caller'\n 14360: a0 = u64 [s1 + 0x228]\n 14364: a1 = i32 [s1 + 0x230]\n 14368: a3 = u64 [s1 + 0x220]\n 14372: u64 [s1 + 0x30] = a3\n 14375: a0 = reverse a0\n 14377: a2 = a0 << 0x20\n 14380: a1 = reverse a1\n 14382: a1 = a1 >> 0x20\n 14385: a1 = a1 | a2\n 14388: u64 [s1 + 0x58] = a1\n 14391: a0 = a0 >> 0x20\n 14394: a1 = reverse a3\n 14396: a1 = a1 << 0x20\n 14399: a0 = a0 | a1\n 14402: u64 [s1 + 0x28] = a0\n 14405: a1 = 0x20\n 14408: a0 = 0\n 14410: ra = 216, jump @0\n      : @260 [@dyn 108] (gas: 57)\n 14416: a1 = u64 [s1 + 0x28]\n 14419: a1 = reverse a1\n 14421: a2 = u64 [s1 + 0x58]\n 14424: a2 = reverse a2\n 14426: a4 = u64 [s1 + 0x30]\n 14429: a3 = a4 >> 0x18\n 14432: u8 [a0 + 0xf] = a3\n 14435: a3 = a4 >> 0x10\n 14438: u8 [a0 + 0xe] = a3\n 14441: a3 = a4 >> 0x8\n 14444: u8 [a0 + 0xd] = a3\n 14447: u8 [a0 + 0xc] = a4\n 14450: u8 [a0 + 11] = 0\n 14453: u8 [a0 + 10] = 0\n 14456: u8 [a0 + 9] = 0\n 14459: u8 [a0 + 8] = 0\n 14462: u8 [a0 + 7] = 0\n 14465: u8 [a0 + 6] = 0\n 14468: u8 [a0 + 5] = 0\n 14471: u8 [a0 + 4] = 0\n 14474: u8 [a0 + 3] = 0\n 14477: u8 [a0 + 2] = 0\n 14480: u8 [a0 + 1] = 0\n 14483: u8 [a0 + 0] = 0\n 14485: u8 [a0 + 0x18] = a2\n 14488: u8 [a0 + 0x10] = a1\n 14491: a3 = a2 >> 0x38\n 14494: u8 [a0 + 0x1f] = a3\n 14497: a3 = a2 >> 0x30\n 14500: u8 [a0 + 0x1e] = a3\n 14503: a3 = a2 >> 0x28\n 14506: u8 [a0 + 0x1d] = a3\n 14509: a3 = a2 >> 0x20\n 14512: u8 [a0 + 0x1c] = a3\n 14515: a3 = a2 >> 0x18\n 14518: u8 [a0 + 0x1b] = a3\n 14521: a3 = a2 >> 0x10\n 14524: u8 [a0 + 0x1a] = a3\n 14527: a2 = a2 >> 0x8\n 14530: u8 [a0 + 0x19] = a2\n 14533: a2 = a1 >> 0x38\n 14536: u8 [a0 + 0x17] = a2\n 14539: a2 = a1 >> 0x30\n 14542: u8 [a0 + 0x16] = a2\n 14545: a2 = a1 >> 0x28\n 14548: u8 [a0 + 0x15] = a2\n 14551: a2 = a1 >> 0x20\n 14554: u8 [a0 + 0x14] = a2\n 14557: a2 = a1 >> 0x18\n 14560: u8 [a0 + 0x13] = a2\n 14563: a2 = a1 >> 0x10\n 14566: u8 [a0 + 0x12] = a2\n 14569: a1 = a1 >> 0x8\n 14572: u8 [a0 + 0x11] = a1\n 14575: a0 = 0x20\n 14578: a1 = 0x20\n 14581: ra = 218, jump @0\n      : @261 [@dyn 109] (gas: 35)\n 14587: u8 [a0 + 31] = 0x2\n 14591: u8 [a0 + 30] = 0\n 14594: u8 [a0 + 29] = 0\n 14597: u8 [a0 + 28] = 0\n 14600: u8 [a0 + 27] = 0\n 14603: u8 [a0 + 26] = 0\n 14606: u8 [a0 + 25] = 0\n 14609: u8 [a0 + 24] = 0\n 14612: u8 [a0 + 23] = 0\n 14615: u8 [a0 + 22] = 0\n 14618: u8 [a0 + 21] = 0\n 14621: u8 [a0 + 20] = 0\n 14624: u8 [a0 + 19] = 0\n 14627: u8 [a0 + 18] = 0\n 14630: u8 [a0 + 17] = 0\n 14633: u8 [a0 + 16] = 0\n 14636: u8 [a0 + 15] = 0\n 14639: u8 [a0 + 14] = 0\n 14642: u8 [a0 + 13] = 0\n 14645: u8 [a0 + 12] = 0\n 14648: u8 [a0 + 11] = 0\n 14651: u8 [a0 + 10] = 0\n 14654: u8 [a0 + 9] = 0\n 14657: u8 [a0 + 8] = 0\n 14660: u8 [a0 + 7] = 0\n 14663: u8 [a0 + 6] = 0\n 14666: u8 [a0 + 5] = 0\n 14669: u8 [a0 + 4] = 0\n 14672: u8 [a0 + 3] = 0\n 14675: u8 [a0 + 2] = 0\n 14678: u8 [a0 + 1] = 0\n 14681: u8 [a0 + 0] = 0\n 14683: a1 = 0x40\n 14686: a0 = 0\n 14688: ra = 220, jump @0\n      : @262 [@dyn 110] (gas: 25)\n 14694: i32 a0 = a0 + 0\n 14696: i32 a2 = s1 + 0x2a0\n 14700: a1 = 0x40\n 14703: ecalli 7 // 'hash_keccak_256'\n 14705: a0 = u64 [s1 + 0x2a0]\n 14709: u64 [s1 + 0x58] = a0\n 14712: a0 = u64 [s1 + 0x2a8]\n 14716: u64 [s1 + 0x28] = a0\n 14719: a0 = u64 [s1 + 0x2b0]\n 14723: u64 [s1 + 0x20] = a0\n 14726: a0 = u64 [s1 + 0x2b8]\n 14730: u64 [s1 + 0x18] = a0\n 14733: a0 = u64 [s1 + 0x68]\n 14736: a1 = u64 [s1 + 0x60]\n 14739: a0 = a0 | a1\n 14742: a1 = u64 [s1 + 0x78]\n 14745: a2 = u64 [s1 + 0x70]\n 14748: a1 = a1 | a2\n 14751: a0 = a0 | a1\n 14754: u64 [s1 + 0x30] = a0\n 14757: a0 = a0 >u 0\n 14759: u64 [s1 + 0x78] = a0\n 14762: a1 = 0x20\n 14765: a0 = 0\n 14767: ra = 222, jump @0\n      : @263 [@dyn 111] (gas: 38)\n 14773: a2 = u64 [s1 + 0x78]\n 14776: a1 = a2 << 0x38\n 14779: u8 [a0 + 0x1f] = a2\n 14782: u8 [a0 + 30] = 0\n 14785: u8 [a0 + 29] = 0\n 14788: u8 [a0 + 28] = 0\n 14791: u8 [a0 + 27] = 0\n 14794: u8 [a0 + 26] = 0\n 14797: u8 [a0 + 25] = 0\n 14800: u64 [s1 + 0x10] = a1\n 14803: u8 [a0 + 0x18] = a1\n 14806: u8 [a0 + 23] = 0\n 14809: u8 [a0 + 22] = 0\n 14812: u8 [a0 + 21] = 0\n 14815: u8 [a0 + 20] = 0\n 14818: u8 [a0 + 19] = 0\n 14821: u8 [a0 + 18] = 0\n 14824: u8 [a0 + 17] = 0\n 14827: u8 [a0 + 16] = 0\n 14830: u8 [a0 + 15] = 0\n 14833: u8 [a0 + 14] = 0\n 14836: u8 [a0 + 13] = 0\n 14839: u8 [a0 + 12] = 0\n 14842: u8 [a0 + 11] = 0\n 14845: u8 [a0 + 10] = 0\n 14848: u8 [a0 + 9] = 0\n 14851: u8 [a0 + 8] = 0\n 14854: u8 [a0 + 7] = 0\n 14857: u8 [a0 + 6] = 0\n 14860: u8 [a0 + 5] = 0\n 14863: u8 [a0 + 4] = 0\n 14866: u8 [a0 + 3] = 0\n 14869: u8 [a0 + 2] = 0\n 14872: u8 [a0 + 1] = 0\n 14875: u8 [a0 + 0] = 0\n 14877: a0 = 0x20\n 14880: a1 = 0x20\n 14883: ra = 224, jump @0\n      : @264 [@dyn 112] (gas: 67)\n 14889: a2 = u64 [s1 + 0x18]\n 14892: a1 = a2 >> 0x38\n 14895: u8 [a0 + 0x1f] = a1\n 14898: a1 = a2 >> 0x30\n 14901: u8 [a0 + 0x1e] = a1\n 14904: a1 = a2 >> 0x28\n 14907: u8 [a0 + 0x1d] = a1\n 14910: a1 = a2 >> 0x20\n 14913: u8 [a0 + 0x1c] = a1\n 14916: a1 = a2 >> 0x18\n 14919: u8 [a0 + 0x1b] = a1\n 14922: a1 = a2 >> 0x10\n 14925: u8 [a0 + 0x1a] = a1\n 14928: a1 = a2 >> 0x8\n 14931: u8 [a0 + 0x19] = a1\n 14934: u8 [a0 + 0x18] = a2\n 14937: a2 = u64 [s1 + 0x20]\n 14940: a1 = a2 >> 0x38\n 14943: u8 [a0 + 0x17] = a1\n 14946: a1 = a2 >> 0x30\n 14949: u8 [a0 + 0x16] = a1\n 14952: a1 = a2 >> 0x28\n 14955: u8 [a0 + 0x15] = a1\n 14958: a1 = a2 >> 0x20\n 14961: u8 [a0 + 0x14] = a1\n 14964: a1 = a2 >> 0x18\n 14967: u8 [a0 + 0x13] = a1\n 14970: a1 = a2 >> 0x10\n 14973: u8 [a0 + 0x12] = a1\n 14976: a1 = a2 >> 0x8\n 14979: u8 [a0 + 0x11] = a1\n 14982: u8 [a0 + 0x10] = a2\n 14985: a2 = u64 [s1 + 0x28]\n 14988: a1 = a2 >> 0x38\n 14991: u8 [a0 + 0xf] = a1\n 14994: a1 = a2 >> 0x30\n 14997: u8 [a0 + 0xe] = a1\n 15000: a1 = a2 >> 0x28\n 15003: u8 [a0 + 0xd] = a1\n 15006: a1 = a2 >> 0x20\n 15009: u8 [a0 + 0xc] = a1\n 15012: a1 = a2 >> 0x18\n 15015: u8 [a0 + 0xb] = a1\n 15018: a1 = a2 >> 0x10\n 15021: u8 [a0 + 0xa] = a1\n 15024: a1 = a2 >> 0x8\n 15027: u8 [a0 + 0x9] = a1\n 15030: u8 [a0 + 0x8] = a2\n 15033: a2 = u64 [s1 + 0x58]\n 15036: a1 = a2 >> 0x38\n 15039: u8 [a0 + 0x7] = a1\n 15042: a1 = a2 >> 0x30\n 15045: u8 [a0 + 0x6] = a1\n 15048: a1 = a2 >> 0x28\n 15051: u8 [a0 + 0x5] = a1\n 15054: a1 = a2 >> 0x20\n 15057: u8 [a0 + 0x4] = a1\n 15060: a1 = a2 >> 0x18\n 15063: u8 [a0 + 0x3] = a1\n 15066: a1 = a2 >> 0x10\n 15069: u8 [a0 + 0x2] = a1\n 15072: a1 = a2 >> 0x8\n 15075: u8 [a0 + 0x1] = a1\n 15078: u8 [a0] = a2\n 15080: a1 = 0x40\n 15083: a0 = 0\n 15085: ra = 226, jump @0\n      : @265 [@dyn 113] (gas: 32)\n 15091: i32 a0 = a0 + 0\n 15093: i32 a2 = s1 + 0x2a0\n 15097: a1 = 0x40\n 15100: ecalli 7 // 'hash_keccak_256'\n 15102: a0 = u64 [s1 + 0x2b8]\n 15106: a1 = u64 [s1 + 0x2b0]\n 15110: a2 = u64 [s1 + 0x2a8]\n 15114: a3 = u64 [s1 + 0x2a0]\n 15118: a0 = reverse a0\n 15120: a1 = reverse a1\n 15122: a2 = reverse a2\n 15124: a3 = reverse a3\n 15126: u64 [s1 + 0x58] = a3\n 15129: u64 [s1 + 0x298] = a3\n 15133: u64 [s1 + 0x60] = a2\n 15136: u64 [s1 + 0x290] = a2\n 15140: u64 [s1 + 0x68] = a1\n 15143: u64 [s1 + 0x288] = a1\n 15147: u64 [s1 + 0x70] = a0\n 15150: u64 [s1 + 0x280] = a0\n 15154: u64 [s1 + 696] = 0\n 15158: u64 [s1 + 688] = 0\n 15162: u64 [s1 + 680] = 0\n 15166: u64 [s1 + 672] = 0\n 15170: u32 [s1 + 608] = 0x20\n 15175: i32 a1 = s1 + 0x280\n 15179: i32 a3 = s1 + 0x2a0\n 15183: i32 a4 = s1 + 0x260\n 15187: a2 = 0xffffffffffffffff\n 15190: a0 = 0\n 15192: ecalli 6 // 'get_storage'\n 15194: fallthrough\n      : @266 (gas: 39)\n 15195: a4 = u64 [s1 + 0x2a8]\n 15199: a2 = u64 [s1 + 0x2a0]\n 15203: t0 = u64 [s1 + 0x2b8]\n 15207: t2 = u64 [s1 + 0x2b0]\n 15211: a5 = u64 [s1 + 0x38]\n 15214: a5 = a5 + a4\n 15217: a1 = u64 [s1 + 0x40]\n 15220: a1 = a1 + a2\n 15223: u64 [s1 + 0x40] = a1\n 15226: a3 = a1 <u a2\n 15229: a5 = a5 + a3\n 15232: t1 = a5 ^ a4\n 15235: u64 [s1 + 0x38] = a5\n 15238: a4 = a5 <u a4\n 15241: a5 = u64 [s1 + 0x48]\n 15244: a5 = a5 + t2\n 15247: a1 = u64 [s1 + 0x50]\n 15250: a1 = a1 + t0\n 15253: a2 = a5 <u t2\n 15256: a1 = a1 + a2\n 15259: a2 = a3\n 15261: a2 = a4 if t1 != 0\n 15264: a0 = a5 + a2\n 15267: a2 = a0 <u a5\n 15270: a5 = a1 + a2\n 15273: a1 = a3 ^ 0x1\n 15276: a2 = a4 ^ 0x1\n 15279: a1 = a2 if t1 != 0\n 15282: a2 = a0 <u t2\n 15285: a3 = a5 ^ t0\n 15288: u64 [s1 + 0x48] = a5\n 15291: a4 = a5 <u t0\n 15294: a4 = a2 if a3 == 0\n 15297: u64 [s1 + 0x50] = a0\n 15300: a0 = a0 ^ t2\n 15303: a0 = a0 | a3\n 15306: a2 = a4 ^ 0x1\n 15309: a1 = a2 if a0 != 0\n 15312: jump @294 if a1 == 0\n      : @267 (gas: 44)\n 15316: a0 = 0xffffffff\n 15326: u64 [s1 + 0x78] = a0\n 15329: a0 = u64 [s1 + 0x60]\n 15332: u64 [s1 + 0x290] = a0\n 15336: a0 = u64 [s1 + 0x68]\n 15339: u64 [s1 + 0x288] = a0\n 15343: a0 = u64 [s1 + 0x70]\n 15346: u64 [s1 + 0x280] = a0\n 15350: a0 = u64 [s1 + 0x58]\n 15353: u64 [s1 + 0x298] = a0\n 15357: u64 [s1 + 696] = 0\n 15361: u64 [s1 + 688] = 0\n 15365: u64 [s1 + 680] = 0\n 15369: u64 [s1 + 672] = 0\n 15373: u32 [s1 + 608] = 0x20\n 15378: i32 a1 = s1 + 0x280\n 15382: i32 a3 = s1 + 0x2a0\n 15386: i32 a4 = s1 + 0x260\n 15390: a2 = 0xffffffffffffffff\n 15393: a0 = 0\n 15395: ecalli 6 // 'get_storage'\n 15397: a0 = u64 [s1 + 0x58]\n 15400: u64 [s1 + 0x298] = a0\n 15404: a0 = u64 [s1 + 0x60]\n 15407: u64 [s1 + 0x290] = a0\n 15411: a0 = u64 [s1 + 0x68]\n 15414: u64 [s1 + 0x288] = a0\n 15418: a0 = u64 [s1 + 0x70]\n 15421: u64 [s1 + 0x280] = a0\n 15425: a0 = u64 [s1 + 0x48]\n 15428: u64 [s1 + 0x2b8] = a0\n 15432: a0 = u64 [s1 + 0x50]\n 15435: u64 [s1 + 0x2b0] = a0\n 15439: a0 = u64 [s1 + 0x38]\n 15442: u64 [s1 + 0x2a8] = a0\n 15446: a0 = u64 [s1 + 0x40]\n 15449: u64 [s1 + 0x2a0] = a0\n 15453: i32 a1 = s1 + 0x280\n 15457: i32 a3 = s1 + 0x2a0\n 15461: a2 = 0xffffffffffffffff\n 15464: a4 = 0x20\n 15467: a0 = 0\n 15469: ecalli 12 // 'set_storage'\n 15471: fallthrough\n      : @268 (gas: 2)\n 15472: a0 = u64 [s1 + 0x30]\n 15475: jump @274 if a0 == 0\n      : @269 (gas: 16)\n 15479: u64 [s1 + 664] = 0\n 15483: u64 [s1 + 656] = 0\n 15487: u64 [s1 + 648] = 0\n 15491: u64 [s1 + 640] = 0\n 15495: u64 [s1 + 696] = 0\n 15499: u64 [s1 + 688] = 0\n 15503: u64 [s1 + 680] = 0\n 15507: u64 [s1 + 672] = 0\n 15511: u32 [s1 + 608] = 0x20\n 15516: i32 a1 = s1 + 0x280\n 15520: i32 a3 = s1 + 0x2a0\n 15524: i32 a4 = s1 + 0x260\n 15528: a2 = 0xffffffffffffffff\n 15531: a0 = 0\n 15533: ecalli 6 // 'get_storage'\n 15535: fallthrough\n      : @270 (gas: 6)\n 15536: a0 = u64 [s1 + 0x2a0]\n 15540: a1 = u64 [s1 + 0x78]\n 15543: a1 = a1 & a0\n 15546: a0 = 0xffffff9c\n 15556: u64 [s1 + 0x70] = a1\n 15559: jump @296 if a1 >=u a0\n      : @271 (gas: 66)\n 15563: u64 [s1 + 664] = 0\n 15567: u64 [s1 + 656] = 0\n 15571: u64 [s1 + 648] = 0\n 15575: u64 [s1 + 640] = 0\n 15579: u64 [s1 + 696] = 0\n 15583: u64 [s1 + 688] = 0\n 15587: u64 [s1 + 680] = 0\n 15591: u64 [s1 + 672] = 0\n 15595: u32 [s1 + 608] = 0x20\n 15600: i32 a1 = s1 + 0x280\n 15604: i32 a3 = s1 + 0x2a0\n 15608: i32 a4 = s1 + 0x260\n 15612: a2 = 0xffffffffffffffff\n 15615: a0 = 0\n 15617: ecalli 6 // 'get_storage'\n 15619: a0 = u32 [s1 + 0x2a4]\n 15623: a0 = a0 << 0x20\n 15626: a1 = u64 [s1 + 0x2a8]\n 15630: a2 = u64 [s1 + 0x70]\n 15633: a0 = a0 | a2\n 15636: a2 = a0 <u a2\n 15639: a3 = u64 [s1 + 0x2b0]\n 15643: a1 = a1 + a2\n 15646: a4 = u64 [s1 + 0x2b8]\n 15650: a2 = 0 if a1 != 0\n 15652: a2 = a2 + a3\n 15655: a3 = a2 <u a3\n 15658: a3 = a3 + a4\n 15661: a4 = a0 + 0x64\n 15664: a0 = a4 <u a0\n 15667: a5 = a1 + a0\n 15670: a1 = a5 <u a1\n 15673: a1 = a0 if a0 == 0\n 15676: a1 = a1 + a2\n 15679: a0 = a1 <u a2\n 15682: a0 = a0 + a3\n 15685: u64 [s1 + 664] = 0\n 15689: u64 [s1 + 656] = 0\n 15693: u64 [s1 + 648] = 0\n 15697: u64 [s1 + 640] = 0\n 15701: u64 [s1 + 0x2a0] = a4\n 15705: u64 [s1 + 0x2a8] = a5\n 15709: u64 [s1 + 0x2b0] = a1\n 15713: u64 [s1 + 0x2b8] = a0\n 15717: i32 a1 = s1 + 0x280\n 15721: i32 a3 = s1 + 0x2a0\n 15725: a2 = 0xffffffffffffffff\n 15728: a4 = 0x20\n 15731: a0 = 0\n 15733: ecalli 12 // 'set_storage'\n 15735: u64 [s1 + 664] = 0\n 15739: u64 [s1 + 656] = 0\n 15743: u64 [s1 + 648] = 0\n 15747: u64 [s1 + 640] = 0\n 15751: u64 [s1 + 696] = 0\n 15755: u64 [s1 + 688] = 0\n 15759: u64 [s1 + 680] = 0\n 15763: u64 [s1 + 672] = 0\n 15767: u32 [s1 + 608] = 0x20\n 15772: i32 a1 = s1 + 0x280\n 15776: i32 a3 = s1 + 0x2a0\n 15780: i32 a4 = s1 + 0x260\n 15784: a2 = 0xffffffffffffffff\n 15787: a0 = 0\n 15789: ecalli 6 // 'get_storage'\n 15791: fallthrough\n      : @272 (gas: 29)\n 15792: a0 = u32 [s1 + 0x2a4]\n 15796: a1 = u64 [s1 + 0x78]\n 15799: a0 = a0 & a1\n 15802: a3 = a0 + 0xffffffffffffff9c\n 15805: a0 = a3 <u a0\n 15808: a4 = a0 + 0xffffffffffffffff\n 15811: a0 = 0 if a4 != 0\n 15813: a1 = a0 <u 0x1\n 15816: a5 = -a1\n 15818: a0 = a0 + 0xffffffffffffffff\n 15821: a1 = a1 << 0x20\n 15824: a2 = a0 >> 0x20\n 15827: u64 [s1 + 0x68] = a2\n 15830: a1 = a2 - a1\n 15833: a2 = a4 << 0x20\n 15836: u64 [s1 + 0x78] = a3\n 15839: a3 = a3 >> 0x20\n 15842: a2 = a2 | a3\n 15845: u64 [s1 + 0x58] = a2\n 15848: a1 = a1 | a2\n 15851: a2 = a0 << 0x20\n 15854: u64 [s1 + 0x70] = a4\n 15857: u64 [s1 + 0x60] = a5\n 15860: a0 = a4 | a5\n 15863: a0 = a0 >> 0x20\n 15866: u64 [s1 + 0x50] = a2\n 15869: a0 = a0 | a2\n 15872: a0 = a0 | a1\n 15875: jump @298 if a0 != 0\n      : @273 (gas: 43)\n 15879: u64 [s1 + 664] = 0\n 15883: u64 [s1 + 656] = 0\n 15887: u64 [s1 + 648] = 0\n 15891: u64 [s1 + 640] = 0\n 15895: u64 [s1 + 696] = 0\n 15899: u64 [s1 + 688] = 0\n 15903: u64 [s1 + 680] = 0\n 15907: u64 [s1 + 672] = 0\n 15911: u32 [s1 + 608] = 0x20\n 15916: i32 a1 = s1 + 0x280\n 15920: i32 a3 = s1 + 0x2a0\n 15924: i32 a4 = s1 + 0x260\n 15928: a2 = 0xffffffffffffffff\n 15931: a0 = 0\n 15933: ecalli 6 // 'get_storage'\n 15935: t0 = u64 [s1 + 0x2b8]\n 15939: a1 = u64 [s1 + 0x2b0]\n 15943: a2 = u64 [s1 + 0x2a8]\n 15947: a3 = u32 [s1 + 0x2a0]\n 15951: a4 = u64 [s1 + 0x60]\n 15954: a4 = a4 << 0x20\n 15957: a5 = u64 [s1 + 0x70]\n 15960: a5 = a5 >> 0x20\n 15963: a0 = u64 [s1 + 0x78]\n 15966: a0 = a0 << 0x20\n 15969: a0 = a0 | a3\n 15972: a3 = u64 [s1 + 0x58]\n 15975: a2 = a2 | a3\n 15978: a1 = a1 | a5\n 15981: a3 = u64 [s1 + 0x50]\n 15984: a1 = a1 | a3\n 15987: a3 = u64 [s1 + 0x68]\n 15990: a3 = t0 | a3\n 15993: a3 = a3 | a4\n 15996: u64 [s1 + 664] = 0\n 16000: u64 [s1 + 656] = 0\n 16004: u64 [s1 + 648] = 0\n 16008: u64 [s1 + 640] = 0\n 16012: u64 [s1 + 0x2b8] = a3\n 16016: u64 [s1 + 0x2b0] = a1\n 16020: u64 [s1 + 0x2a8] = a2\n 16024: u64 [s1 + 0x2a0] = a0\n 16028: jump @279\n      : @274 (gas: 16)\n 16031: u64 [s1 + 664] = 0\n 16035: u64 [s1 + 656] = 0\n 16039: u64 [s1 + 648] = 0\n 16043: u64 [s1 + 640] = 0\n 16047: u64 [s1 + 696] = 0\n 16051: u64 [s1 + 688] = 0\n 16055: u64 [s1 + 680] = 0\n 16059: u64 [s1 + 672] = 0\n 16063: u32 [s1 + 608] = 0x20\n 16068: i32 a1 = s1 + 0x280\n 16072: i32 a3 = s1 + 0x2a0\n 16076: i32 a4 = s1 + 0x260\n 16080: a2 = 0xffffffffffffffff\n 16083: a0 = 0\n 16085: ecalli 6 // 'get_storage'\n 16087: fallthrough\n      : @275 (gas: 27)\n 16088: a0 = u64 [s1 + 0x2a0]\n 16092: a1 = u64 [s1 + 0x78]\n 16095: a0 = a0 & a1\n 16098: a2 = a0 + 0xffffffffffffff9c\n 16101: a0 = a2 <u a0\n 16104: a3 = a0 + 0xffffffffffffffff\n 16107: a0 = 0 if a3 != 0\n 16109: a1 = a0 <u 0x1\n 16112: a4 = -a1\n 16114: a5 = a0 + 0xffffffffffffffff\n 16117: a1 = a1 << 0x20\n 16120: a0 = a5 >> 0x20\n 16123: a0 = a0 - a1\n 16126: a1 = a3 << 0x20\n 16129: u64 [s1 + 0x70] = a2\n 16132: a2 = a2 >> 0x20\n 16135: a1 = a1 | a2\n 16138: a0 = a0 | a1\n 16141: u64 [s1 + 0x58] = a5\n 16144: a1 = a5 << 0x20\n 16147: u64 [s1 + 0x68] = a3\n 16150: u64 [s1 + 0x60] = a4\n 16153: a2 = a3 | a4\n 16156: a2 = a2 >> 0x20\n 16159: a1 = a1 | a2\n 16162: a0 = a0 | a1\n 16165: jump @300 if a0 != 0\n      : @276 (gas: 58)\n 16169: u64 [s1 + 664] = 0\n 16173: u64 [s1 + 656] = 0\n 16177: u64 [s1 + 648] = 0\n 16181: u64 [s1 + 640] = 0\n 16185: u64 [s1 + 696] = 0\n 16189: u64 [s1 + 688] = 0\n 16193: u64 [s1 + 680] = 0\n 16197: u64 [s1 + 672] = 0\n 16201: u32 [s1 + 608] = 0x20\n 16206: i32 a1 = s1 + 0x280\n 16210: i32 a3 = s1 + 0x2a0\n 16214: i32 a4 = s1 + 0x260\n 16218: a2 = 0xffffffffffffffff\n 16221: a0 = 0\n 16223: ecalli 6 // 'get_storage'\n 16225: a0 = u32 [s1 + 0x2a4]\n 16229: a0 = a0 << 0x20\n 16232: a1 = u64 [s1 + 0x2a8]\n 16236: a2 = u64 [s1 + 0x2b0]\n 16240: a3 = u64 [s1 + 0x2b8]\n 16244: a4 = u64 [s1 + 0x70]\n 16247: a0 = a0 | a4\n 16250: a4 = u64 [s1 + 0x68]\n 16253: a1 = a1 | a4\n 16256: a4 = u64 [s1 + 0x58]\n 16259: a2 = a2 | a4\n 16262: a4 = u64 [s1 + 0x60]\n 16265: a3 = a3 | a4\n 16268: u64 [s1 + 664] = 0\n 16272: u64 [s1 + 656] = 0\n 16276: u64 [s1 + 648] = 0\n 16280: u64 [s1 + 640] = 0\n 16284: u64 [s1 + 0x2b8] = a3\n 16288: u64 [s1 + 0x2b0] = a2\n 16292: u64 [s1 + 0x2a8] = a1\n 16296: u64 [s1 + 0x2a0] = a0\n 16300: i32 a1 = s1 + 0x280\n 16304: i32 a3 = s1 + 0x2a0\n 16308: a2 = 0xffffffffffffffff\n 16311: a4 = 0x20\n 16314: a0 = 0\n 16316: ecalli 12 // 'set_storage'\n 16318: u64 [s1 + 664] = 0\n 16322: u64 [s1 + 656] = 0\n 16326: u64 [s1 + 648] = 0\n 16330: u64 [s1 + 640] = 0\n 16334: u64 [s1 + 696] = 0\n 16338: u64 [s1 + 688] = 0\n 16342: u64 [s1 + 680] = 0\n 16346: u64 [s1 + 672] = 0\n 16350: u32 [s1 + 608] = 0x20\n 16355: i32 a1 = s1 + 0x280\n 16359: i32 a3 = s1 + 0x2a0\n 16363: i32 a4 = s1 + 0x260\n 16367: a2 = 0xffffffffffffffff\n 16370: a0 = 0\n 16372: ecalli 6 // 'get_storage'\n 16374: fallthrough\n      : @277 (gas: 6)\n 16375: a0 = u32 [s1 + 0x2a4]\n 16379: a1 = u64 [s1 + 0x78]\n 16382: a1 = a1 & a0\n 16385: a0 = 0xffffff9c\n 16395: u64 [s1 + 0x78] = a1\n 16398: jump @302 if a1 >=u a0\n      : @278 (gas: 33)\n 16402: u64 [s1 + 664] = 0\n 16406: u64 [s1 + 656] = 0\n 16410: u64 [s1 + 648] = 0\n 16414: u64 [s1 + 640] = 0\n 16418: u64 [s1 + 696] = 0\n 16422: u64 [s1 + 688] = 0\n 16426: u64 [s1 + 680] = 0\n 16430: u64 [s1 + 672] = 0\n 16434: u32 [s1 + 608] = 0x20\n 16439: i32 a1 = s1 + 0x280\n 16443: i32 a3 = s1 + 0x2a0\n 16447: i32 a4 = s1 + 0x260\n 16451: a2 = 0xffffffffffffffff\n 16454: a0 = 0\n 16456: ecalli 6 // 'get_storage'\n 16458: a0 = u64 [s1 + 0x2a8]\n 16462: a1 = u32 [s1 + 0x2a0]\n 16466: a2 = u64 [s1 + 0x2b0]\n 16470: a3 = u64 [s1 + 0x2b8]\n 16474: a4 = u64 [s1 + 0x78]\n 16477: a4 = a4 << 0x20\n 16480: a1 = a1 | a4\n 16483: a4 = 0x6400000000\n 16493: a1 = a1 + a4\n 16496: u64 [s1 + 664] = 0\n 16500: u64 [s1 + 656] = 0\n 16504: u64 [s1 + 648] = 0\n 16508: u64 [s1 + 640] = 0\n 16512: u64 [s1 + 0x2b8] = a3\n 16516: u64 [s1 + 0x2b0] = a2\n 16520: u64 [s1 + 0x2a8] = a0\n 16524: u64 [s1 + 0x2a0] = a1\n 16528: fallthrough\n      : @279 (gas: 36)\n 16529: i32 a1 = s1 + 0x280\n 16533: i32 a3 = s1 + 0x2a0\n 16537: a2 = 0xffffffffffffffff\n 16540: a4 = 0x20\n 16543: a0 = 0\n 16545: ecalli 12 // 'set_storage'\n 16547: i32 a0 = s1 + 0x240\n 16551: ecalli 4 // 'caller'\n 16553: a0 = u32 [s1 + 0x250]\n 16557: u64 [s1 + 0x70] = a0\n 16560: a0 = u64 [s1 + 0x248]\n 16564: u64 [s1 + 0x58] = a0\n 16567: a0 = u64 [s1 + 0x240]\n 16571: u64 [s1 + 0x68] = a0\n 16574: a0 = sp + 0xffffffffffffffe0\n 16577: a0 = a0 & 0xffffffffffffffe0\n 16580: u64 [s1 + 0x78] = a0\n 16583: sp = a0\n 16585: u64 [a0 + 24] = 0\n 16588: u64 [a0 + 16] = 0\n 16591: u64 [a0 + 8] = 0\n 16594: u64 [a0 + 0] = 0\n 16596: i32 a0 = a0 + 0\n 16598: ecalli 13 // 'value_transferred'\n 16600: a1 = u64 [s1 + 0x78]\n 16603: a0 = u64 [a1 + 0x18]\n 16606: u64 [s1 + 0x20] = a0\n 16609: a0 = u64 [a1 + 0x10]\n 16612: u64 [s1 + 0x28] = a0\n 16615: a0 = u64 [a1 + 0x8]\n 16618: u64 [s1 + 0x30] = a0\n 16621: a0 = u64 [a1]\n 16623: u64 [s1 + 0x38] = a0\n 16626: a0 = 0x40\n 16629: a1 = 0x20\n 16632: ra = 228, jump @0\n      : @280 [@dyn 114] (gas: 104)\n 16638: a1 = u8 [a0 + 0x11]\n 16641: a2 = u8 [a0 + 0x10]\n 16644: a3 = u8 [a0 + 0x12]\n 16647: a4 = u8 [a0 + 0x13]\n 16650: a1 = a1 << 0x8\n 16653: a1 = a1 | a2\n 16656: a3 = a3 << 0x10\n 16659: a4 = a4 << 0x18\n 16662: a3 = a3 | a4\n 16665: a1 = a1 | a3\n 16668: a2 = u8 [a0 + 0x15]\n 16671: a3 = u8 [a0 + 0x14]\n 16674: a4 = u8 [a0 + 0x16]\n 16677: a5 = u8 [a0 + 0x17]\n 16680: a2 = a2 << 0x8\n 16683: a2 = a2 | a3\n 16686: a4 = a4 << 0x10\n 16689: a5 = a5 << 0x18\n 16692: a4 = a4 | a5\n 16695: a2 = a2 | a4\n 16698: a2 = a2 << 0x20\n 16701: t0 = a2 | a1\n 16704: a2 = u8 [a0 + 0x1]\n 16707: a3 = u8 [a0]\n 16709: a4 = u8 [a0 + 0x2]\n 16712: a5 = u8 [a0 + 0x3]\n 16715: a2 = a2 << 0x8\n 16718: a2 = a2 | a3\n 16721: a4 = a4 << 0x10\n 16724: a5 = a5 << 0x18\n 16727: a4 = a4 | a5\n 16730: a2 = a2 | a4\n 16733: a3 = u8 [a0 + 0x5]\n 16736: a4 = u8 [a0 + 0x4]\n 16739: a5 = u8 [a0 + 0x6]\n 16742: a1 = u8 [a0 + 0x7]\n 16745: a3 = a3 << 0x8\n 16748: a3 = a3 | a4\n 16751: a5 = a5 << 0x10\n 16754: a1 = a1 << 0x18\n 16757: a1 = a1 | a5\n 16760: a1 = a1 | a3\n 16763: a1 = a1 << 0x20\n 16766: t1 = a1 | a2\n 16769: a1 = u8 [a0 + 0x19]\n 16772: a3 = u8 [a0 + 0x18]\n 16775: a4 = u8 [a0 + 0x1a]\n 16778: a5 = u8 [a0 + 0x1b]\n 16781: a1 = a1 << 0x8\n 16784: a1 = a1 | a3\n 16787: a4 = a4 << 0x10\n 16790: a5 = a5 << 0x18\n 16793: a4 = a4 | a5\n 16796: a1 = a1 | a4\n 16799: a3 = u8 [a0 + 0x1d]\n 16802: a4 = u8 [a0 + 0x1c]\n 16805: a5 = u8 [a0 + 0x1e]\n 16808: a2 = u8 [a0 + 0x1f]\n 16811: a3 = a3 << 0x8\n 16814: a3 = a3 | a4\n 16817: a5 = a5 << 0x10\n 16820: a2 = a2 << 0x18\n 16823: a2 = a2 | a5\n 16826: a2 = a2 | a3\n 16829: a2 = a2 << 0x20\n 16832: a3 = a2 | a1\n 16835: a1 = u8 [a0 + 0x9]\n 16838: a2 = u8 [a0 + 0x8]\n 16841: a4 = u8 [a0 + 0xa]\n 16844: a5 = u8 [a0 + 0xb]\n 16847: a1 = a1 << 0x8\n 16850: a1 = a1 | a2\n 16853: a4 = a4 << 0x10\n 16856: a5 = a5 << 0x18\n 16859: a4 = a4 | a5\n 16862: a1 = a1 | a4\n 16865: a2 = u8 [a0 + 0xd]\n 16868: a4 = u8 [a0 + 0xc]\n 16871: a5 = u8 [a0 + 0xe]\n 16874: a0 = u8 [a0 + 0xf]\n 16877: a2 = a2 << 0x8\n 16880: a2 = a2 | a4\n 16883: a5 = a5 << 0x10\n 16886: a0 = a0 << 0x18\n 16889: a0 = a0 | a5\n 16892: a0 = a0 | a2\n 16895: a0 = a0 << 0x20\n 16898: a0 = a0 | a1\n 16901: a2 = reverse a0\n 16903: a1 = reverse a3\n 16905: a3 = reverse t1\n 16907: a0 = reverse t0\n 16909: u64 [s1 + 0x60] = a0\n 16912: u64 [s1 + 0x48] = a3\n 16915: a0 = a0 | a3\n 16918: u64 [s1 + 0x78] = a1\n 16921: a1 = a1 | a2\n 16924: a1 = a1 | a0\n 16927: a1 = a1 >> 0x20\n 16930: u64 [s1 + 0x50] = a2\n 16933: a0 = a0 | a2\n 16936: a0 = a0 << 0x20\n 16939: a0 = a0 | a1\n 16942: jump @293 if a0 != 0\n      : @281 (gas: 18)\n 16946: a0 = u64 [s1 + 0x68]\n 16949: a0 = reverse a0\n 16951: a0 = a0 << 0x20\n 16954: a1 = u64 [s1 + 0x58]\n 16957: a1 = reverse a1\n 16959: a2 = a1 >> 0x20\n 16962: a0 = a0 | a2\n 16965: u64 [s1 + 0x58] = a0\n 16968: a1 = a1 << 0x20\n 16971: a0 = u64 [s1 + 0x70]\n 16974: a0 = reverse a0\n 16976: a0 = a0 >> 0x20\n 16979: a0 = a0 | a1\n 16982: u64 [s1 + 0x40] = a0\n 16985: a0 = i32 [s1 + 0x78]\n 16988: a1 = 0x20\n 16991: u64 [s1 + 0x70] = a0\n 16994: ra = 230, jump @0\n      : @282 [@dyn 115] (gas: 67)\n 17000: a1 = u64 [s1 + 0x40]\n 17003: a1 = reverse a1\n 17005: a2 = u64 [s1 + 0x58]\n 17008: a2 = reverse a2\n 17010: a4 = u64 [s1 + 0x68]\n 17013: a3 = a4 >> 0x18\n 17016: u8 [a0 + 0xf] = a3\n 17019: a3 = a4 >> 0x10\n 17022: u8 [a0 + 0xe] = a3\n 17025: a3 = a4 >> 0x8\n 17028: u8 [a0 + 0xd] = a3\n 17031: u8 [a0 + 0xc] = a4\n 17034: u8 [a0 + 11] = 0\n 17037: u8 [a0 + 10] = 0\n 17040: u8 [a0 + 9] = 0\n 17043: u8 [a0 + 8] = 0\n 17046: u8 [a0 + 7] = 0\n 17049: u8 [a0 + 6] = 0\n 17052: u8 [a0 + 5] = 0\n 17055: u8 [a0 + 4] = 0\n 17058: u8 [a0 + 3] = 0\n 17061: u8 [a0 + 2] = 0\n 17064: u8 [a0 + 1] = 0\n 17067: u8 [a0 + 0] = 0\n 17069: u8 [a0 + 0x10] = a2\n 17072: u8 [a0 + 0x18] = a1\n 17075: a3 = a2 >> 0x38\n 17078: u8 [a0 + 0x17] = a3\n 17081: a3 = a2 >> 0x30\n 17084: u8 [a0 + 0x16] = a3\n 17087: a3 = a2 >> 0x28\n 17090: u8 [a0 + 0x15] = a3\n 17093: a3 = a2 >> 0x20\n 17096: u8 [a0 + 0x14] = a3\n 17099: a3 = a2 >> 0x18\n 17102: u8 [a0 + 0x13] = a3\n 17105: a3 = a2 >> 0x10\n 17108: u8 [a0 + 0x12] = a3\n 17111: a2 = a2 >> 0x8\n 17114: u8 [a0 + 0x11] = a2\n 17117: a2 = a1 >> 0x38\n 17120: u8 [a0 + 0x1f] = a2\n 17123: a2 = a1 >> 0x30\n 17126: u8 [a0 + 0x1e] = a2\n 17129: a2 = a1 >> 0x28\n 17132: u8 [a0 + 0x1d] = a2\n 17135: a2 = a1 >> 0x20\n 17138: u8 [a0 + 0x1c] = a2\n 17141: a2 = a1 >> 0x18\n 17144: u8 [a0 + 0x1b] = a2\n 17147: a2 = a1 >> 0x10\n 17150: u8 [a0 + 0x1a] = a2\n 17153: a1 = a1 >> 0x8\n 17156: a2 = u64 [s1 + 0x50]\n 17159: a3 = u64 [s1 + 0x48]\n 17162: a4 = a2 | a3\n 17165: a2 = 0x100000000\n 17175: u64 [s1 + 0x58] = a2\n 17178: a2 = 0xffffffe0\n 17188: a3 = u64 [s1 + 0x78]\n 17191: a2 = a3 <u a2\n 17194: a3 = u64 [s1 + 0x60]\n 17197: a2 = 0 if a3 != 0\n 17199: u64 [s1 + 0x68] = a4\n 17202: a2 = 0 if a4 != 0\n 17204: u8 [a0 + 0x19] = a1\n 17207: jump @293 if a2 == 0\n      : @283 (gas: 4)\n 17211: a0 = u64 [s1 + 0x70]\n 17214: i32 a0 = a0 + 0x20\n 17217: a1 = 0x20\n 17220: ra = 232, jump @0\n      : @284 [@dyn 116] (gas: 49)\n 17226: u8 [a0 + 23] = 0\n 17229: u8 [a0 + 22] = 0\n 17232: u8 [a0 + 21] = 0\n 17235: u8 [a0 + 20] = 0\n 17238: u8 [a0 + 19] = 0\n 17241: u8 [a0 + 18] = 0\n 17244: u8 [a0 + 17] = 0\n 17247: u8 [a0 + 16] = 0\n 17250: u8 [a0 + 15] = 0\n 17253: u8 [a0 + 14] = 0\n 17256: u8 [a0 + 13] = 0\n 17259: u8 [a0 + 12] = 0\n 17262: u8 [a0 + 11] = 0\n 17265: u8 [a0 + 10] = 0\n 17268: u8 [a0 + 9] = 0\n 17271: u8 [a0 + 8] = 0\n 17274: u8 [a0 + 7] = 0\n 17277: u8 [a0 + 6] = 0\n 17280: u8 [a0 + 5] = 0\n 17283: u8 [a0 + 4] = 0\n 17286: u8 [a0 + 3] = 0\n 17289: u8 [a0 + 2] = 0\n 17292: u8 [a0 + 1] = 0\n 17295: u8 [a0 + 0] = 0\n 17297: a2 = u64 [s1 + 0x10]\n 17300: u8 [a0 + 0x18] = a2\n 17303: a1 = a2 >> 0x38\n 17306: u8 [a0 + 0x1f] = a1\n 17309: a1 = a2 >> 0x30\n 17312: u8 [a0 + 0x1e] = a1\n 17315: a1 = a2 >> 0x28\n 17318: u8 [a0 + 0x1d] = a1\n 17321: a1 = a2 >> 0x20\n 17324: u8 [a0 + 0x1c] = a1\n 17327: a1 = a2 >> 0x18\n 17330: u8 [a0 + 0x1b] = a1\n 17333: a1 = a2 >> 0x10\n 17336: u8 [a0 + 0x1a] = a1\n 17339: a1 = a2 >> 0x8\n 17342: a2 = u64 [s1 + 0x58]\n 17345: a2 = a2 + 0xffffffffffffffc0\n 17348: a3 = u64 [s1 + 0x78]\n 17351: a2 = a3 <u a2\n 17354: a3 = u64 [s1 + 0x60]\n 17357: a2 = 0 if a3 != 0\n 17359: a3 = u64 [s1 + 0x68]\n 17362: a2 = 0 if a3 != 0\n 17364: u8 [a0 + 0x19] = a1\n 17367: jump @293 if a2 == 0\n      : @285 (gas: 4)\n 17371: a0 = u64 [s1 + 0x70]\n 17374: i32 a0 = a0 + 0x40\n 17377: a1 = 0x20\n 17380: ra = 234, jump @0\n      : @286 [@dyn 117] (gas: 71)\n 17386: a1 = u64 [s1 + 0x20]\n 17389: a1 = reverse a1\n 17391: a2 = u64 [s1 + 0x28]\n 17394: a2 = reverse a2\n 17396: a3 = u64 [s1 + 0x30]\n 17399: a3 = reverse a3\n 17401: a4 = u64 [s1 + 0x38]\n 17404: a4 = reverse a4\n 17406: a5 = a4 >> 0x38\n 17409: u8 [a0 + 0x1f] = a5\n 17412: a5 = a4 >> 0x30\n 17415: u8 [a0 + 0x1e] = a5\n 17418: a5 = a4 >> 0x28\n 17421: u8 [a0 + 0x1d] = a5\n 17424: a5 = a4 >> 0x20\n 17427: u8 [a0 + 0x1c] = a5\n 17430: a5 = a4 >> 0x18\n 17433: u8 [a0 + 0x1b] = a5\n 17436: a5 = a4 >> 0x10\n 17439: u8 [a0 + 0x1a] = a5\n 17442: a5 = a4 >> 0x8\n 17445: u8 [a0 + 0x19] = a5\n 17448: u8 [a0 + 0x18] = a4\n 17451: u8 [a0 + 0x10] = a3\n 17454: a4 = a3 >> 0x38\n 17457: u8 [a0 + 0x17] = a4\n 17460: a4 = a3 >> 0x30\n 17463: u8 [a0 + 0x16] = a4\n 17466: a4 = a3 >> 0x28\n 17469: u8 [a0 + 0x15] = a4\n 17472: a4 = a3 >> 0x20\n 17475: u8 [a0 + 0x14] = a4\n 17478: a4 = a3 >> 0x18\n 17481: u8 [a0 + 0x13] = a4\n 17484: a4 = a3 >> 0x10\n 17487: u8 [a0 + 0x12] = a4\n 17490: a3 = a3 >> 0x8\n 17493: u8 [a0 + 0x11] = a3\n 17496: u8 [a0 + 0x8] = a2\n 17499: a3 = a2 >> 0x38\n 17502: u8 [a0 + 0xf] = a3\n 17505: a3 = a2 >> 0x30\n 17508: u8 [a0 + 0xe] = a3\n 17511: a3 = a2 >> 0x28\n 17514: u8 [a0 + 0xd] = a3\n 17517: a3 = a2 >> 0x20\n 17520: u8 [a0 + 0xc] = a3\n 17523: a3 = a2 >> 0x18\n 17526: u8 [a0 + 0xb] = a3\n 17529: a3 = a2 >> 0x10\n 17532: u8 [a0 + 0xa] = a3\n 17535: a2 = a2 >> 0x8\n 17538: u8 [a0 + 0x9] = a2\n 17541: u8 [a0] = a1\n 17543: a2 = a1 >> 0x38\n 17546: u8 [a0 + 0x7] = a2\n 17549: a2 = a1 >> 0x30\n 17552: u8 [a0 + 0x6] = a2\n 17555: a2 = a1 >> 0x28\n 17558: u8 [a0 + 0x5] = a2\n 17561: a2 = a1 >> 0x20\n 17564: u8 [a0 + 0x4] = a2\n 17567: a2 = a1 >> 0x18\n 17570: u8 [a0 + 0x3] = a2\n 17573: a2 = a1 >> 0x10\n 17576: u8 [a0 + 0x2] = a2\n 17579: a1 = a1 >> 0x8\n 17582: u8 [a0 + 0x1] = a1\n 17585: a1 = 0x60\n 17588: a0 = u64 [s1 + 0x70]\n 17591: ra = 236, jump @0\n      : @287 [@dyn 118] (gas: 19)\n 17597: a1 = u64 [0x20020]\n 17602: a2 = u64 [0x20028]\n 17607: a3 = u64 [0x20030]\n 17612: a4 = u64 [0x20038]\n 17617: u64 [s1 + 0x2b8] = a1\n 17621: u64 [s1 + 0x2b0] = a2\n 17625: u64 [s1 + 0x2a8] = a3\n 17629: u64 [s1 + 0x2a0] = a4\n 17633: i32 a2 = a0 + 0\n 17635: i32 a0 = s1 + 0x2a0\n 17639: a1 = 0x1\n 17642: a3 = 0x60\n 17645: ecalli 5 // 'deposit_event'\n 17647: sp = s0 + 0xfffffffffffffd20\n 17651: ra = u64 [sp + 0x2d8]\n 17655: s0 = u64 [sp + 0x2d0]\n 17659: s1 = u64 [sp + 0x2c8]\n 17663: sp = sp + 0x2e0\n 17667: ret\n      : @288 (gas: 3)\n 17669: a0 = 0x40\n 17672: a1 = 0x20\n 17675: ra = 238, jump @0\n      : @289 [@dyn 119] (gas: 104)\n 17681: a1 = u8 [a0 + 0x11]\n 17684: a2 = u8 [a0 + 0x10]\n 17687: a3 = u8 [a0 + 0x12]\n 17690: a4 = u8 [a0 + 0x13]\n 17693: a1 = a1 << 0x8\n 17696: a1 = a1 | a2\n 17699: a3 = a3 << 0x10\n 17702: a4 = a4 << 0x18\n 17705: a3 = a3 | a4\n 17708: a1 = a1 | a3\n 17711: a2 = u8 [a0 + 0x15]\n 17714: a3 = u8 [a0 + 0x14]\n 17717: a4 = u8 [a0 + 0x16]\n 17720: a5 = u8 [a0 + 0x17]\n 17723: a2 = a2 << 0x8\n 17726: a2 = a2 | a3\n 17729: a4 = a4 << 0x10\n 17732: a5 = a5 << 0x18\n 17735: a4 = a4 | a5\n 17738: a2 = a2 | a4\n 17741: a2 = a2 << 0x20\n 17744: t0 = a2 | a1\n 17747: a2 = u8 [a0 + 0x1]\n 17750: a3 = u8 [a0]\n 17752: a4 = u8 [a0 + 0x2]\n 17755: a5 = u8 [a0 + 0x3]\n 17758: a2 = a2 << 0x8\n 17761: a2 = a2 | a3\n 17764: a4 = a4 << 0x10\n 17767: a5 = a5 << 0x18\n 17770: a4 = a4 | a5\n 17773: a2 = a2 | a4\n 17776: a3 = u8 [a0 + 0x5]\n 17779: a4 = u8 [a0 + 0x4]\n 17782: a5 = u8 [a0 + 0x6]\n 17785: a1 = u8 [a0 + 0x7]\n 17788: a3 = a3 << 0x8\n 17791: a3 = a3 | a4\n 17794: a5 = a5 << 0x10\n 17797: a1 = a1 << 0x18\n 17800: a1 = a1 | a5\n 17803: a1 = a1 | a3\n 17806: a1 = a1 << 0x20\n 17809: t1 = a1 | a2\n 17812: a1 = u8 [a0 + 0x19]\n 17815: a3 = u8 [a0 + 0x18]\n 17818: a4 = u8 [a0 + 0x1a]\n 17821: a5 = u8 [a0 + 0x1b]\n 17824: a1 = a1 << 0x8\n 17827: a1 = a1 | a3\n 17830: a4 = a4 << 0x10\n 17833: a5 = a5 << 0x18\n 17836: a4 = a4 | a5\n 17839: a1 = a1 | a4\n 17842: a3 = u8 [a0 + 0x1d]\n 17845: a4 = u8 [a0 + 0x1c]\n 17848: a5 = u8 [a0 + 0x1e]\n 17851: a2 = u8 [a0 + 0x1f]\n 17854: a3 = a3 << 0x8\n 17857: a3 = a3 | a4\n 17860: a5 = a5 << 0x10\n 17863: a2 = a2 << 0x18\n 17866: a2 = a2 | a5\n 17869: a2 = a2 | a3\n 17872: a2 = a2 << 0x20\n 17875: a3 = a2 | a1\n 17878: a1 = u8 [a0 + 0x9]\n 17881: a2 = u8 [a0 + 0x8]\n 17884: a4 = u8 [a0 + 0xa]\n 17887: a5 = u8 [a0 + 0xb]\n 17890: a1 = a1 << 0x8\n 17893: a1 = a1 | a2\n 17896: a4 = a4 << 0x10\n 17899: a5 = a5 << 0x18\n 17902: a4 = a4 | a5\n 17905: a1 = a1 | a4\n 17908: a2 = u8 [a0 + 0xd]\n 17911: a4 = u8 [a0 + 0xc]\n 17914: a5 = u8 [a0 + 0xe]\n 17917: a0 = u8 [a0 + 0xf]\n 17920: a2 = a2 << 0x8\n 17923: a2 = a2 | a4\n 17926: a5 = a5 << 0x10\n 17929: a0 = a0 << 0x18\n 17932: a0 = a0 | a5\n 17935: a0 = a0 | a2\n 17938: a0 = a0 << 0x20\n 17941: a0 = a0 | a1\n 17944: a4 = reverse a0\n 17946: a1 = reverse a3\n 17948: a2 = reverse t1\n 17950: a0 = reverse t0\n 17952: u64 [s1 + 0x78] = a0\n 17955: u64 [s1 + 0x68] = a2\n 17958: a0 = a0 | a2\n 17961: a2 = a1\n 17963: a1 = a1 | a4\n 17966: a1 = a1 | a0\n 17969: a1 = a1 >> 0x20\n 17972: u64 [s1 + 0x70] = a4\n 17975: a0 = a0 | a4\n 17978: a0 = a0 << 0x20\n 17981: a0 = a0 | a1\n 17984: jump @293 if a0 != 0\n      : @290 (gas: 5)\n 17988: u64 [s1 + 0x60] = a2\n 17991: i32 a0 = a2 + 0\n 17993: a1 = 0x20\n 17996: u64 [s1 + 0x58] = a0\n 17999: ra = 240, jump @0\n      : @291 [@dyn 120] (gas: 51)\n 18005: u8 [a0 + 31] = 0\n 18008: u8 [a0 + 30] = 0\n 18011: u8 [a0 + 29] = 0\n 18014: u8 [a0 + 28] = 0\n 18017: u8 [a0 + 27] = 0\n 18020: u8 [a0 + 26] = 0\n 18023: u8 [a0 + 25] = 0\n 18026: u8 [a0 + 24] = 0\n 18029: u8 [a0 + 23] = 0\n 18032: u8 [a0 + 22] = 0\n 18035: u8 [a0 + 21] = 0\n 18038: u8 [a0 + 20] = 0\n 18041: u8 [a0 + 19] = 0\n 18044: u8 [a0 + 18] = 0\n 18047: u8 [a0 + 17] = 0\n 18050: u8 [a0 + 16] = 0\n 18053: u8 [a0 + 15] = 0\n 18056: u8 [a0 + 14] = 0\n 18059: u8 [a0 + 13] = 0\n 18062: u8 [a0 + 12] = 0\n 18065: u8 [a0 + 11] = 0\n 18068: u8 [a0 + 10] = 0\n 18071: u8 [a0 + 9] = 0\n 18074: u8 [a0 + 8] = 0\n 18077: u8 [a0 + 7] = 0\n 18080: u8 [a0 + 6] = 0\n 18083: u8 [a0 + 5] = 0\n 18086: u8 [a0 + 4] = 0\n 18089: u8 [a0 + 3] = 0xa0\n 18094: u8 [a0 + 2] = 0x79\n 18098: u8 [a0 + 1] = 0xc3\n 18103: u8 [a0 + 0] = 0x8\n 18106: a1 = u64 [s1 + 0x60]\n 18109: a0 = a1 + 0x4\n 18112: a1 = a0 <u a1\n 18115: a3 = u64 [s1 + 0x78]\n 18118: a2 = a3 + a1\n 18121: a3 = a2 <u a3\n 18124: a3 = a1 if a1 == 0\n 18127: a1 = u64 [s1 + 0x70]\n 18130: a3 = a3 + a1\n 18133: a1 = a3 <u a1\n 18136: a4 = u64 [s1 + 0x68]\n 18139: a4 = a4 + a1\n 18142: u64 [s1 + 0x88] = a2\n 18146: u64 [s1 + 0x80] = a0\n 18150: u64 [s1 + 0x90] = a3\n 18154: a0 = s1 + 0xa0\n 18158: a1 = s1 + 0x80\n 18162: u64 [s1 + 0x98] = a4\n 18166: ra = 242, jump @250\n      : @292 [@dyn 121] (gas: 31)\n 18172: a0 = u64 [s1 + 0xa8]\n 18176: t0 = u64 [s1 + 0xb8]\n 18180: t1 = u64 [s1 + 0xa0]\n 18184: a3 = u64 [s1 + 0xb0]\n 18188: a1 = u64 [s1 + 0x78]\n 18191: a4 = a0 ^ a1\n 18194: a5 = a0 <u a1\n 18197: ra = a1\n 18199: t2 = u64 [s1 + 0x60]\n 18202: a1 = t1 <u t2\n 18205: a5 = a1 if a4 == 0\n 18208: a2 = u64 [s1 + 0x70]\n 18211: a4 = a3 - a2\n 18214: a3 = a3 <u a2\n 18217: a2 = u64 [s1 + 0x68]\n 18220: a2 = t0 - a2\n 18223: a2 = a2 - a3\n 18226: a3 = a4 <u a5\n 18229: a2 = a2 - a3\n 18232: a4 = a4 - a5\n 18235: a0 = a0 - ra\n 18238: a1 = a0 - a1\n 18241: a0 = t1 - t2\n 18244: a1 = a1 | a2\n 18247: a2 = a0 | a4\n 18250: a2 = a2 | a1\n 18253: a1 = a1 | a4\n 18256: a2 = a2 >> 0x20\n 18259: a1 = a1 << 0x20\n 18262: a1 = a1 | a2\n 18265: jump @306 if a1 == 0\n      : @293 (gas: 1)\n 18269: trap\n      : @294 (gas: 8)\n 18270: u64 [s1 + 240] = 0\n 18274: u64 [s1 + 232] = 0\n 18278: u64 [s1 + 224] = 0\n 18282: a0 = 0x4e487b7100000000\n 18292: a1 = s1 + 0xe0\n 18296: u64 [s1 + 0xf8] = a0\n 18300: a0 = 0\n 18302: ra = 244, jump @23\n      : @295 [@dyn 122] (gas: 8)\n 18308: u64 [s1 + 216] = 0\n 18312: u64 [s1 + 208] = 0\n 18316: u64 [s1 + 192] = 0x11\n 18321: a0 = 0x4\n 18324: a1 = s1 + 0xc0\n 18328: u64 [s1 + 200] = 0\n 18332: ra = 0xfe\n 18336: jump @23\n      : @296 (gas: 8)\n 18339: u64 [s1 + 432] = 0\n 18343: u64 [s1 + 424] = 0\n 18347: u64 [s1 + 416] = 0\n 18351: a0 = 0x4e487b7100000000\n 18361: a1 = s1 + 0x1a0\n 18365: u64 [s1 + 0x1b8] = a0\n 18369: a0 = 0\n 18371: ra = 246, jump @23\n      : @297 [@dyn 123] (gas: 8)\n 18377: u64 [s1 + 408] = 0\n 18381: u64 [s1 + 400] = 0\n 18385: u64 [s1 + 384] = 0x11\n 18390: a0 = 0x4\n 18393: a1 = s1 + 0x180\n 18397: u64 [s1 + 392] = 0\n 18401: ra = 0xfe\n 18405: jump @23\n      : @298 (gas: 8)\n 18408: u64 [s1 + 496] = 0\n 18412: u64 [s1 + 488] = 0\n 18416: u64 [s1 + 480] = 0\n 18420: a0 = 0x4e487b7100000000\n 18430: a1 = s1 + 0x1e0\n 18434: u64 [s1 + 0x1f8] = a0\n 18438: a0 = 0\n 18440: ra = 248, jump @23\n      : @299 [@dyn 124] (gas: 8)\n 18446: u64 [s1 + 472] = 0\n 18450: u64 [s1 + 464] = 0\n 18454: u64 [s1 + 448] = 0x11\n 18459: a0 = 0x4\n 18462: a1 = s1 + 0x1c0\n 18466: u64 [s1 + 456] = 0\n 18470: ra = 0xfe\n 18474: jump @23\n      : @300 (gas: 8)\n 18477: u64 [s1 + 304] = 0\n 18481: u64 [s1 + 296] = 0\n 18485: u64 [s1 + 288] = 0\n 18489: a0 = 0x4e487b7100000000\n 18499: a1 = s1 + 0x120\n 18503: u64 [s1 + 0x138] = a0\n 18507: a0 = 0\n 18509: ra = 250, jump @23\n      : @301 [@dyn 125] (gas: 8)\n 18515: u64 [s1 + 280] = 0\n 18519: u64 [s1 + 272] = 0\n 18523: u64 [s1 + 256] = 0x11\n 18528: a0 = 0x4\n 18531: a1 = s1 + 0x100\n 18535: u64 [s1 + 264] = 0\n 18539: ra = 0xfe\n 18543: jump @23\n      : @302 (gas: 8)\n 18546: u64 [s1 + 368] = 0\n 18550: u64 [s1 + 360] = 0\n 18554: u64 [s1 + 352] = 0\n 18558: a0 = 0x4e487b7100000000\n 18568: a1 = s1 + 0x160\n 18572: u64 [s1 + 0x178] = a0\n 18576: a0 = 0\n 18578: ra = 252, jump @23\n      : @303 [@dyn 126] (gas: 7)\n 18584: u64 [s1 + 344] = 0\n 18588: u64 [s1 + 336] = 0\n 18592: u64 [s1 + 320] = 0x11\n 18597: a0 = 0x4\n 18600: a1 = s1 + 0x140\n 18604: u64 [s1 + 328] = 0\n 18608: ra = 254, jump @23\n      : @304 [@dyn 127] (gas: 3)\n 18614: a1 = 0x24\n 18617: a0 = 0\n 18619: ra = 256, jump @0\n      : @305 [@dyn 128] (gas: 5)\n 18625: i32 a1 = a0 + 0\n 18627: a0 = 0x1\n 18630: a2 = 0x24\n 18633: ecalli 10 // 'seal_return'\n 18635: fallthrough\n      : @306 (gas: 4)\n 18636: i32 a1 = a0 + 0\n 18638: u64 [s1 + 0x78] = a1\n 18641: a0 = u64 [s1 + 0x58]\n 18644: ra = 258, jump @0\n      : @307 [@dyn 129] (gas: 6)\n 18650: i32 a1 = a0 + 0\n 18652: a0 = 0x1\n 18655: a2 = u64 [s1 + 0x78]\n 18658: ra = 0x104\n 18662: ecalli 10 // 'seal_return'\n 18664: fallthrough\n      : @308 [@dyn 130] (gas: 5)\n 18665: u64 [a0 + 24] = 0\n 18668: u64 [a0 + 16] = 0\n 18671: u64 [a0 + 8] = 0\n 18674: u64 [a0 + 0] = 0\n 18676: ret\n      : @309 [@dyn 131] (gas: 58)\n 18678: a1 = reverse s1\n 18680: a2 = u64 [sp + 0x20]\n 18683: a2 = reverse a2\n 18685: a3 = u64 [sp + 0x28]\n 18688: a3 = reverse a3\n 18690: a4 = a3 >> 0x38\n 18693: u8 [a0 + 0x1f] = a4\n 18696: a4 = a3 >> 0x30\n 18699: u8 [a0 + 0x1e] = a4\n 18702: a4 = a3 >> 0x28\n 18705: u8 [a0 + 0x1d] = a4\n 18708: a4 = a3 >> 0x20\n 18711: u8 [a0 + 0x1c] = a4\n 18714: a4 = a3 >> 0x18\n 18717: u8 [a0 + 0x1b] = a4\n 18720: a4 = a3 >> 0x10\n 18723: u8 [a0 + 0x1a] = a4\n 18726: a4 = a3 >> 0x8\n 18729: u8 [a0 + 0x19] = a4\n 18732: u8 [a0 + 0x18] = a3\n 18735: a3 = a2 >> 0x38\n 18738: u8 [a0 + 0x17] = a3\n 18741: a3 = a2 >> 0x30\n 18744: u8 [a0 + 0x16] = a3\n 18747: a3 = a2 >> 0x28\n 18750: u8 [a0 + 0x15] = a3\n 18753: a3 = a2 >> 0x20\n 18756: u8 [a0 + 0x14] = a3\n 18759: a3 = a2 >> 0x18\n 18762: u8 [a0 + 0x13] = a3\n 18765: a3 = a2 >> 0x10\n 18768: u8 [a0 + 0x12] = a3\n 18771: a3 = a2 >> 0x8\n 18774: u8 [a0 + 0x11] = a3\n 18777: u8 [a0 + 0x10] = a2\n 18780: a2 = a1 >> 0x38\n 18783: u8 [a0 + 0xf] = a2\n 18786: a2 = a1 >> 0x30\n 18789: u8 [a0 + 0xe] = a2\n 18792: a2 = a1 >> 0x28\n 18795: u8 [a0 + 0xd] = a2\n 18798: a2 = a1 >> 0x20\n 18801: u8 [a0 + 0xc] = a2\n 18804: u8 [a0 + 11] = 0\n 18807: u8 [a0 + 10] = 0\n 18810: u8 [a0 + 9] = 0\n 18813: u8 [a0 + 0x8] = a1\n 18816: u8 [a0 + 7] = 0\n 18819: u8 [a0 + 6] = 0\n 18822: u8 [a0 + 5] = 0\n 18825: u8 [a0 + 4] = 0\n 18828: u8 [a0 + 3] = 0\n 18831: u8 [a0 + 2] = 0\n 18834: u8 [a0 + 1] = 0\n 18837: u8 [a0 + 0] = 0\n 18839: a0 = 0x20\n 18842: a1 = 0x20\n 18845: ra = 264, jump @0\n      : @310 [@dyn 132] (gas: 35)\n 18851: u8 [a0 + 31] = 0x2\n 18855: u8 [a0 + 30] = 0\n 18858: u8 [a0 + 29] = 0\n 18861: u8 [a0 + 28] = 0\n 18864: u8 [a0 + 27] = 0\n 18867: u8 [a0 + 26] = 0\n 18870: u8 [a0 + 25] = 0\n 18873: u8 [a0 + 24] = 0\n 18876: u8 [a0 + 23] = 0\n 18879: u8 [a0 + 22] = 0\n 18882: u8 [a0 + 21] = 0\n 18885: u8 [a0 + 20] = 0\n 18888: u8 [a0 + 19] = 0\n 18891: u8 [a0 + 18] = 0\n 18894: u8 [a0 + 17] = 0\n 18897: u8 [a0 + 16] = 0\n 18900: u8 [a0 + 15] = 0\n 18903: u8 [a0 + 14] = 0\n 18906: u8 [a0 + 13] = 0\n 18909: u8 [a0 + 12] = 0\n 18912: u8 [a0 + 11] = 0\n 18915: u8 [a0 + 10] = 0\n 18918: u8 [a0 + 9] = 0\n 18921: u8 [a0 + 8] = 0\n 18924: u8 [a0 + 7] = 0\n 18927: u8 [a0 + 6] = 0\n 18930: u8 [a0 + 5] = 0\n 18933: u8 [a0 + 4] = 0\n 18936: u8 [a0 + 3] = 0\n 18939: u8 [a0 + 2] = 0\n 18942: u8 [a0 + 1] = 0\n 18945: u8 [a0 + 0] = 0\n 18947: a1 = 0x40\n 18950: a0 = 0\n 18952: ra = 266, jump @0\n      : @311 [@dyn 133] (gas: 14)\n 18958: i32 a0 = a0 + 0\n 18960: i32 a2 = sp + 0x60\n 18963: a1 = 0x40\n 18966: ecalli 7 // 'hash_keccak_256'\n 18968: a0 = u64 [sp + 0x60]\n 18971: u64 [sp + 0x28] = a0\n 18974: a0 = u64 [sp + 0x68]\n 18977: u64 [sp + 0x20] = a0\n 18980: a0 = u64 [sp + 0x70]\n 18983: u64 [sp + 0x18] = a0\n 18986: s1 = u64 [sp + 0x78]\n 18989: a1 = 0x20\n 18992: a0 = 0\n 18994: ra = 268, jump @0\n      : @312 [@dyn 134] (gas: 36)\n 19000: a1 = u64 [sp + 0x30]\n 19003: u8 [a0 + 0x1f] = a1\n 19006: u8 [a0 + 30] = 0\n 19009: u8 [a0 + 29] = 0\n 19012: u8 [a0 + 28] = 0\n 19015: u8 [a0 + 27] = 0\n 19018: u8 [a0 + 26] = 0\n 19021: u8 [a0 + 25] = 0\n 19024: u8 [a0 + 24] = 0\n 19027: u8 [a0 + 23] = 0\n 19030: u8 [a0 + 22] = 0\n 19033: u8 [a0 + 21] = 0\n 19036: u8 [a0 + 20] = 0\n 19039: u8 [a0 + 19] = 0\n 19042: u8 [a0 + 18] = 0\n 19045: u8 [a0 + 17] = 0\n 19048: u8 [a0 + 16] = 0\n 19051: u8 [a0 + 15] = 0\n 19054: u8 [a0 + 14] = 0\n 19057: u8 [a0 + 13] = 0\n 19060: u8 [a0 + 12] = 0\n 19063: u8 [a0 + 11] = 0\n 19066: u8 [a0 + 10] = 0\n 19069: u8 [a0 + 9] = 0\n 19072: u8 [a0 + 8] = 0\n 19075: u8 [a0 + 7] = 0\n 19078: u8 [a0 + 6] = 0\n 19081: u8 [a0 + 5] = 0\n 19084: u8 [a0 + 4] = 0\n 19087: u8 [a0 + 3] = 0\n 19090: u8 [a0 + 2] = 0\n 19093: u8 [a0 + 1] = 0\n 19096: u8 [a0 + 0] = 0\n 19098: a0 = 0x20\n 19101: a1 = 0x20\n 19104: ra = 270, jump @0\n      : @313 [@dyn 135] (gas: 66)\n 19110: a1 = s1 >> 0x38\n 19113: u8 [a0 + 0x1f] = a1\n 19116: a1 = s1 >> 0x30\n 19119: u8 [a0 + 0x1e] = a1\n 19122: a1 = s1 >> 0x28\n 19125: u8 [a0 + 0x1d] = a1\n 19128: a1 = s1 >> 0x20\n 19131: u8 [a0 + 0x1c] = a1\n 19134: a1 = s1 >> 0x18\n 19137: u8 [a0 + 0x1b] = a1\n 19140: a1 = s1 >> 0x10\n 19143: u8 [a0 + 0x1a] = a1\n 19146: a1 = s1 >> 0x8\n 19149: u8 [a0 + 0x19] = a1\n 19152: u8 [a0 + 0x18] = s1\n 19155: a2 = u64 [sp + 0x18]\n 19158: a1 = a2 >> 0x38\n 19161: u8 [a0 + 0x17] = a1\n 19164: a1 = a2 >> 0x30\n 19167: u8 [a0 + 0x16] = a1\n 19170: a1 = a2 >> 0x28\n 19173: u8 [a0 + 0x15] = a1\n 19176: a1 = a2 >> 0x20\n 19179: u8 [a0 + 0x14] = a1\n 19182: a1 = a2 >> 0x18\n 19185: u8 [a0 + 0x13] = a1\n 19188: a1 = a2 >> 0x10\n 19191: u8 [a0 + 0x12] = a1\n 19194: a1 = a2 >> 0x8\n 19197: u8 [a0 + 0x11] = a1\n 19200: u8 [a0 + 0x10] = a2\n 19203: a2 = u64 [sp + 0x20]\n 19206: a1 = a2 >> 0x38\n 19209: u8 [a0 + 0xf] = a1\n 19212: a1 = a2 >> 0x30\n 19215: u8 [a0 + 0xe] = a1\n 19218: a1 = a2 >> 0x28\n 19221: u8 [a0 + 0xd] = a1\n 19224: a1 = a2 >> 0x20\n 19227: u8 [a0 + 0xc] = a1\n 19230: a1 = a2 >> 0x18\n 19233: u8 [a0 + 0xb] = a1\n 19236: a1 = a2 >> 0x10\n 19239: u8 [a0 + 0xa] = a1\n 19242: a1 = a2 >> 0x8\n 19245: u8 [a0 + 0x9] = a1\n 19248: u8 [a0 + 0x8] = a2\n 19251: a2 = u64 [sp + 0x28]\n 19254: a1 = a2 >> 0x38\n 19257: u8 [a0 + 0x7] = a1\n 19260: a1 = a2 >> 0x30\n 19263: u8 [a0 + 0x6] = a1\n 19266: a1 = a2 >> 0x28\n 19269: u8 [a0 + 0x5] = a1\n 19272: a1 = a2 >> 0x20\n 19275: u8 [a0 + 0x4] = a1\n 19278: a1 = a2 >> 0x18\n 19281: u8 [a0 + 0x3] = a1\n 19284: a1 = a2 >> 0x10\n 19287: u8 [a0 + 0x2] = a1\n 19290: a1 = a2 >> 0x8\n 19293: u8 [a0 + 0x1] = a1\n 19296: u8 [a0] = a2\n 19298: a1 = 0x40\n 19301: a0 = 0\n 19303: ra = 272, jump @0\n      : @314 [@dyn 136] (gas: 42)\n 19309: i32 a0 = a0 + 0\n 19311: i32 a2 = sp + 0x60\n 19314: a1 = 0x40\n 19317: ecalli 7 // 'hash_keccak_256'\n 19319: a0 = u64 [sp + 0x78]\n 19322: a1 = u64 [sp + 0x70]\n 19325: a2 = u64 [sp + 0x68]\n 19328: a3 = u64 [sp + 0x60]\n 19331: a0 = reverse a0\n 19333: a1 = reverse a1\n 19335: a2 = reverse a2\n 19337: a3 = reverse a3\n 19339: u64 [sp + 0x58] = a3\n 19342: u64 [sp + 0x50] = a2\n 19345: u64 [sp + 0x48] = a1\n 19348: u64 [sp + 0x40] = a0\n 19351: u64 [sp + 120] = 0\n 19354: u64 [sp + 112] = 0\n 19357: u64 [sp + 104] = 0\n 19360: u64 [sp + 96] = 0\n 19363: u32 [sp + 128] = 0x20\n 19368: i32 a1 = sp + 0x40\n 19371: i32 a3 = sp + 0x60\n 19374: i32 a4 = sp + 0x80\n 19378: a2 = 0xffffffffffffffff\n 19381: a0 = 0\n 19383: ecalli 6 // 'get_storage'\n 19385: a0 = u64 [sp + 0x78]\n 19388: a1 = u64 [sp + 0x70]\n 19391: a2 = u64 [sp + 0x68]\n 19394: a3 = u64 [sp + 0x60]\n 19397: a4 = u64 [sp + 0x38]\n 19400: u64 [a4 + 0x18] = a0\n 19403: u64 [a4 + 0x10] = a1\n 19406: u64 [a4 + 0x8] = a2\n 19409: u64 [a4] = a3\n 19411: sp = s0 + 0xffffffffffffff60\n 19415: ra = u64 [sp + 0x98]\n 19419: s0 = u64 [sp + 0x90]\n 19423: s1 = u64 [sp + 0x88]\n 19427: sp = sp + 0xa0\n 19431: ret\n      : @315 (gas: 17)\n 19433: sp = sp + 0xffffffffffffffa0\n 19436: u64 [sp + 0x58] = ra\n 19439: u64 [sp + 0x50] = s0\n 19442: u64 [sp + 0x48] = s1\n 19445: a3 = u64 [a1 + 0x18]\n 19448: a4 = u64 [a1 + 0x10]\n 19451: a5 = u64 [a1 + 0x8]\n 19454: s1 = u64 [a1]\n 19456: a1 = a5 | a3\n 19459: a2 = s1 | a4\n 19462: a2 = a2 | a1\n 19465: a2 = a2 >> 0x20\n 19468: a1 = a1 | a4\n 19471: a1 = a1 << 0x20\n 19474: a1 = a1 | a2\n 19477: u64 [sp + 0x28] = a0\n 19480: jump @322 if a1 != 0\n      : @316 (gas: 19)\n 19484: a0 = s1 + 0x20\n 19487: u64 [sp + 0x30] = a0\n 19490: a0 = a0 <u s1\n 19493: a1 = a5 + a0\n 19496: u64 [sp + 0x40] = a1\n 19499: u64 [sp + 0x8] = a5\n 19502: s0 = a1 <u a5\n 19505: s0 = a0 if a0 == 0\n 19508: s0 = s0 + a4\n 19511: u64 [sp + 0x10] = a4\n 19514: a0 = s0 <u a4\n 19517: u64 [sp + 0x18] = a3\n 19520: a0 = a0 + a3\n 19523: u64 [sp + 0x38] = a0\n 19526: u64 [sp] = s1\n 19528: i32 a0 = s1 + 0\n 19530: a1 = 0x20\n 19533: s1 = 0x20\n 19536: ra = 274, jump @0\n      : @317 [@dyn 137] (gas: 45)\n 19542: u8 [a0 + 0x1f] = s1\n 19545: a1 = u64 [sp + 0x30]\n 19548: s1 = a1\n 19550: a1 = a1 | s0\n 19553: a2 = u64 [sp + 0x40]\n 19556: a4 = u64 [sp + 0x38]\n 19559: a2 = a2 | a4\n 19562: a1 = a1 | a2\n 19565: a1 = a1 >> 0x20\n 19568: u64 [sp + 0x20] = s0\n 19571: a2 = a2 | s0\n 19574: a2 = a2 << 0x20\n 19577: a1 = a1 | a2\n 19580: u8 [a0 + 30] = 0\n 19583: u8 [a0 + 29] = 0\n 19586: u8 [a0 + 28] = 0\n 19589: u8 [a0 + 27] = 0\n 19592: u8 [a0 + 26] = 0\n 19595: u8 [a0 + 25] = 0\n 19598: u8 [a0 + 24] = 0\n 19601: u8 [a0 + 23] = 0\n 19604: u8 [a0 + 22] = 0\n 19607: u8 [a0 + 21] = 0\n 19610: u8 [a0 + 20] = 0\n 19613: u8 [a0 + 19] = 0\n 19616: u8 [a0 + 18] = 0\n 19619: u8 [a0 + 17] = 0\n 19622: u8 [a0 + 16] = 0\n 19625: u8 [a0 + 15] = 0\n 19628: u8 [a0 + 14] = 0\n 19631: u8 [a0 + 13] = 0\n 19634: u8 [a0 + 12] = 0\n 19637: u8 [a0 + 11] = 0\n 19640: u8 [a0 + 10] = 0\n 19643: u8 [a0 + 9] = 0\n 19646: u8 [a0 + 8] = 0\n 19649: u8 [a0 + 7] = 0\n 19652: u8 [a0 + 6] = 0\n 19655: u8 [a0 + 5] = 0\n 19658: u8 [a0 + 4] = 0\n 19661: u8 [a0 + 3] = 0\n 19664: u8 [a0 + 2] = 0\n 19667: u8 [a0 + 1] = 0\n 19670: u8 [a0 + 0] = 0\n 19672: jump @322 if a1 != 0\n      : @318 (gas: 4)\n 19676: i32 s0 = s1 + 0\n 19678: a1 = 0x20\n 19681: a0 = s0\n 19683: ra = 276, jump @0\n      : @319 [@dyn 138] (gas: 41)\n 19689: u8 [a0 + 31] = 0x15\n 19693: u8 [a0 + 30] = 0\n 19696: u8 [a0 + 29] = 0\n 19699: u8 [a0 + 28] = 0\n 19702: u8 [a0 + 27] = 0\n 19705: u8 [a0 + 26] = 0\n 19708: u8 [a0 + 25] = 0\n 19711: u8 [a0 + 24] = 0\n 19714: u8 [a0 + 23] = 0\n 19717: u8 [a0 + 22] = 0\n 19720: u8 [a0 + 21] = 0\n 19723: u8 [a0 + 20] = 0\n 19726: u8 [a0 + 19] = 0\n 19729: u8 [a0 + 18] = 0\n 19732: u8 [a0 + 17] = 0\n 19735: u8 [a0 + 16] = 0\n 19738: u8 [a0 + 15] = 0\n 19741: u8 [a0 + 14] = 0\n 19744: u8 [a0 + 13] = 0\n 19747: u8 [a0 + 12] = 0\n 19750: u8 [a0 + 11] = 0\n 19753: u8 [a0 + 10] = 0\n 19756: u8 [a0 + 9] = 0\n 19759: u8 [a0 + 8] = 0\n 19762: u8 [a0 + 7] = 0\n 19765: u8 [a0 + 6] = 0\n 19768: u8 [a0 + 5] = 0\n 19771: u8 [a0 + 4] = 0\n 19774: u8 [a0 + 3] = 0\n 19777: u8 [a0 + 2] = 0\n 19780: u8 [a0 + 1] = 0\n 19783: a1 = u64 [sp + 0x20]\n 19786: a2 = u64 [sp + 0x38]\n 19789: a1 = a1 | a2\n 19792: a2 = 0xffffffe0\n 19802: a2 = s1 <u a2\n 19805: a3 = u64 [sp + 0x40]\n 19808: a2 = 0 if a3 != 0\n 19810: a2 = 0 if a1 != 0\n 19812: u8 [a0 + 0] = 0\n 19814: jump @322 if a2 == 0\n      : @320 (gas: 3)\n 19818: i32 a0 = s0 + 0x20\n 19821: a1 = 0x20\n 19824: ra = 278, jump @0\n      : @321 [@dyn 139] (gas: 55)\n 19830: u8 [a0 + 31] = 0\n 19833: u8 [a0 + 30] = 0\n 19836: u8 [a0 + 29] = 0\n 19839: u8 [a0 + 28] = 0\n 19842: u8 [a0 + 27] = 0\n 19845: u8 [a0 + 26] = 0\n 19848: u8 [a0 + 25] = 0\n 19851: u8 [a0 + 24] = 0\n 19854: u8 [a0 + 23] = 0\n 19857: u8 [a0 + 22] = 0\n 19860: u8 [a0 + 21] = 0\n 19863: u8 [a0 + 20] = 0x6e\n 19867: u8 [a0 + 19] = 0x6f\n 19871: u8 [a0 + 18] = 0x69\n 19875: u8 [a0 + 17] = 0x74\n 19879: u8 [a0 + 16] = 0x69\n 19883: a5 = 0x73\n 19886: u8 [a0 + 0xf] = a5\n 19889: u8 [a0 + 14] = 0x6f\n 19893: u8 [a0 + 13] = 0x70\n 19897: u8 [a0 + 12] = 0x20\n 19901: u8 [a0 + 11] = 0x74\n 19905: u8 [a0 + 10] = 0x6e\n 19909: u8 [a0 + 9] = 0x65\n 19913: u8 [a0 + 8] = 0x69\n 19917: u8 [a0 + 7] = 0x63\n 19921: u8 [a0 + 6] = 0x69\n 19925: u8 [a0 + 5] = 0x66\n 19929: u8 [a0 + 4] = 0x66\n 19933: u8 [a0 + 3] = 0x75\n 19937: u8 [a0 + 0x2] = a5\n 19940: u8 [a0 + 1] = 0x6e\n 19944: u8 [a0 + 0] = 0x49\n 19947: a1 = u64 [sp]\n 19949: a0 = a1 + 0x60\n 19952: a1 = a0 <u a1\n 19955: a3 = u64 [sp + 0x8]\n 19958: a2 = a3 + a1\n 19961: a3 = a2 <u a3\n 19964: a3 = a1 if a1 == 0\n 19967: a1 = u64 [sp + 0x10]\n 19970: a3 = a3 + a1\n 19973: a1 = a3 <u a1\n 19976: a4 = u64 [sp + 0x18]\n 19979: a1 = a1 + a4\n 19982: a4 = u64 [sp + 0x28]\n 19985: u64 [a4] = a0\n 19987: u64 [a4 + 0x8] = a2\n 19990: u64 [a4 + 0x10] = a3\n 19993: u64 [a4 + 0x18] = a1\n 19996: ra = u64 [sp + 0x58]\n 19999: s0 = u64 [sp + 0x50]\n 20002: s1 = u64 [sp + 0x48]\n 20005: sp = sp + 0x60\n 20008: ret\n      : @322 (gas: 1)\n 20010: trap\n      : @323 [@dyn 140] (gas: 97)\n 20011: a1 = u8 [a0 + 0x11]\n 20014: a2 = u8 [a0 + 0x10]\n 20017: a3 = u8 [a0 + 0x12]\n 20020: a4 = u8 [a0 + 0x13]\n 20023: a1 = a1 << 0x8\n 20026: a1 = a1 | a2\n 20029: a3 = a3 << 0x10\n 20032: a4 = a4 << 0x18\n 20035: a3 = a3 | a4\n 20038: a1 = a1 | a3\n 20041: a2 = u8 [a0 + 0x15]\n 20044: a3 = u8 [a0 + 0x14]\n 20047: a4 = u8 [a0 + 0x16]\n 20050: a5 = u8 [a0 + 0x17]\n 20053: a2 = a2 << 0x8\n 20056: a2 = a2 | a3\n 20059: a4 = a4 << 0x10\n 20062: a5 = a5 << 0x18\n 20065: a4 = a4 | a5\n 20068: a2 = a2 | a4\n 20071: a2 = a2 << 0x20\n 20074: t0 = a2 | a1\n 20077: a2 = u8 [a0 + 0x1]\n 20080: a3 = u8 [a0]\n 20082: a4 = u8 [a0 + 0x2]\n 20085: a5 = u8 [a0 + 0x3]\n 20088: a2 = a2 << 0x8\n 20091: a2 = a2 | a3\n 20094: a4 = a4 << 0x10\n 20097: a5 = a5 << 0x18\n 20100: a4 = a4 | a5\n 20103: a2 = a2 | a4\n 20106: a3 = u8 [a0 + 0x5]\n 20109: a4 = u8 [a0 + 0x4]\n 20112: a5 = u8 [a0 + 0x6]\n 20115: s1 = u8 [a0 + 0x7]\n 20118: a3 = a3 << 0x8\n 20121: a3 = a3 | a4\n 20124: a5 = a5 << 0x10\n 20127: s1 = s1 << 0x18\n 20130: a5 = a5 | s1\n 20133: a3 = a3 | a5\n 20136: a3 = a3 << 0x20\n 20139: a2 = a2 | a3\n 20142: a3 = u8 [a0 + 0x19]\n 20145: a4 = u8 [a0 + 0x18]\n 20148: a5 = u8 [a0 + 0x1a]\n 20151: s1 = u8 [a0 + 0x1b]\n 20154: a3 = a3 << 0x8\n 20157: a3 = a3 | a4\n 20160: a5 = a5 << 0x10\n 20163: s1 = s1 << 0x18\n 20166: a5 = a5 | s1\n 20169: a3 = a3 | a5\n 20172: a4 = u8 [a0 + 0x1d]\n 20175: a5 = u8 [a0 + 0x1c]\n 20178: s1 = u8 [a0 + 0x1e]\n 20181: a1 = u8 [a0 + 0x1f]\n 20184: a4 = a4 << 0x8\n 20187: a4 = a4 | a5\n 20190: s1 = s1 << 0x10\n 20193: a1 = a1 << 0x18\n 20196: a1 = a1 | s1\n 20199: a1 = a1 | a4\n 20202: a1 = a1 << 0x20\n 20205: a3 = a3 | a1\n 20208: a1 = u8 [a0 + 0x9]\n 20211: a4 = u8 [a0 + 0x8]\n 20214: a5 = u8 [a0 + 0xa]\n 20217: s1 = u8 [a0 + 0xb]\n 20220: a1 = a1 << 0x8\n 20223: a1 = a1 | a4\n 20226: a5 = a5 << 0x10\n 20229: s1 = s1 << 0x18\n 20232: a5 = a5 | s1\n 20235: a1 = a1 | a5\n 20238: a4 = u8 [a0 + 0xd]\n 20241: a5 = u8 [a0 + 0xc]\n 20244: s1 = u8 [a0 + 0xe]\n 20247: a0 = u8 [a0 + 0xf]\n 20250: a4 = a4 << 0x8\n 20253: a4 = a4 | a5\n 20256: s1 = s1 << 0x10\n 20259: a0 = a0 << 0x18\n 20262: a0 = a0 | s1\n 20265: a0 = a0 | a4\n 20268: a0 = a0 << 0x20\n 20271: a0 = a0 | a1\n 20274: s1 = reverse a0\n 20276: a0 = reverse a3\n 20278: u64 [sp + 0x8] = a0\n 20281: a0 = reverse a2\n 20283: u64 [sp + 0x18] = a0\n 20286: a0 = reverse t0\n 20288: u64 [sp + 0x10] = a0\n 20291: ecalli 9 // 'return_data_size'\n 20293: fallthrough\n      : @324 (gas: 11)\n 20294: a3 = u64 [sp + 0x8]\n 20297: a1 = u64 [sp + 0x18]\n 20300: a2 = u64 [sp + 0x10]\n 20303: a1 = a1 | a2\n 20306: a2 = a3 | s1\n 20309: a2 = a2 | a1\n 20312: a2 = a2 >> 0x20\n 20315: a1 = a1 | s1\n 20318: a1 = a1 << 0x20\n 20321: a1 = a1 | a2\n 20324: jump @331 if a1 != 0\n      : @325 (gas: 3)\n 20327: s1 = a0\n 20329: a0 = a0 >> 0x20\n 20332: jump @331 if a0 != 0\n      : @326 (gas: 5)\n 20335: i32 a0 = a3 + 0\n 20337: i32 a1 = s1 + 0\n 20339: u64 [sp + 0x18] = a1\n 20342: u64 [sp + 0x10] = a0\n 20345: ra = 282, jump @0\n      : @327 [@dyn 141] (gas: 6)\n 20351: u32 [sp + 0x20] = s1\n 20354: i32 a0 = a0 + 0\n 20356: i32 a1 = sp + 0x20\n 20359: a2 = 0\n 20361: ecalli 8 // 'return_data_copy'\n 20363: fallthrough\n      : @328 (gas: 3)\n 20364: a0 = i32 [sp + 0x20]\n 20367: a1 = u64 [sp + 0x18]\n 20370: jump @331 if a0 <u a1\n      : @329 (gas: 2)\n 20373: ecalli 9 // 'return_data_size'\n 20375: fallthrough\n      : @330 (gas: 2)\n 20376: a1 = a0 >> 0x20\n 20379: jump @332 if a1 == 0\n      : @331 (gas: 1)\n 20382: trap\n      : @332 (gas: 4)\n 20383: i32 s1 = a0 + 0\n 20385: a0 = u64 [sp + 0x10]\n 20388: a1 = s1\n 20390: ra = 284, jump @0\n      : @333 [@dyn 142] (gas: 6)\n 20396: i32 a1 = a0 + 0\n 20398: a0 = 0x1\n 20401: a2 = s1\n 20403: ra = 0x11e\n 20407: ecalli 10 // 'seal_return'\n 20409: fallthrough\n      : @334 [@dyn 143] (gas: 43)\n 20410: sp = sp + 0xfffffffffffffc40\n 20414: u64 [sp + 0x3b8] = ra\n 20418: u64 [sp + 0x3b0] = s0\n 20422: u64 [sp + 0x3a8] = s1\n 20426: s0 = sp + 0x3c0\n 20430: sp = sp & 0xffffffffffffffe0\n 20433: a2 = u64 [a0 + 0x18]\n 20436: a3 = u64 [a0 + 0x8]\n 20439: a2 = a2 | a3\n 20442: a3 = u64 [a0 + 0x10]\n 20445: a0 = u64 [a0]\n 20447: a4 = u64 [a1]\n 20449: u64 [sp + 0xa8] = a4\n 20453: a4 = u64 [a1 + 0x8]\n 20456: u64 [sp + 0xa0] = a4\n 20460: a4 = u64 [a1 + 0x10]\n 20463: u64 [sp + 0xb8] = a4\n 20467: a1 = u64 [a1 + 0x18]\n 20470: u64 [sp + 0xb0] = a1\n 20474: a0 = a0 | a3\n 20477: a0 = a0 | a2\n 20480: u64 [sp + 0x70] = a0\n 20483: a0 = a0 >u 0\n 20485: u64 [sp + 0x98] = a0\n 20489: i32 a0 = sp + 0x240\n 20493: ecalli 4 // 'caller'\n 20495: a0 = u64 [sp + 0x248]\n 20499: a1 = i32 [sp + 0x250]\n 20503: s1 = u64 [sp + 0x240]\n 20507: a0 = reverse a0\n 20509: a2 = a0 << 0x20\n 20512: a1 = reverse a1\n 20514: a1 = a1 >> 0x20\n 20517: a1 = a1 | a2\n 20520: u64 [sp + 0x90] = a1\n 20524: a0 = a0 >> 0x20\n 20527: a1 = reverse s1\n 20529: a1 = a1 << 0x20\n 20532: a0 = a0 | a1\n 20535: u64 [sp + 0x88] = a0\n 20539: a1 = 0x20\n 20542: a0 = 0\n 20544: ra = 288, jump @0\n      : @335 [@dyn 144] (gas: 56)\n 20550: a1 = u64 [sp + 0x88]\n 20554: a1 = reverse a1\n 20556: a2 = u64 [sp + 0x90]\n 20560: a2 = reverse a2\n 20562: a3 = s1 >> 0x18\n 20565: u8 [a0 + 0xf] = a3\n 20568: a3 = s1 >> 0x10\n 20571: u8 [a0 + 0xe] = a3\n 20574: a3 = s1 >> 0x8\n 20577: u8 [a0 + 0xd] = a3\n 20580: u8 [a0 + 0xc] = s1\n 20583: u8 [a0 + 11] = 0\n 20586: u8 [a0 + 10] = 0\n 20589: u8 [a0 + 9] = 0\n 20592: u8 [a0 + 8] = 0\n 20595: u8 [a0 + 7] = 0\n 20598: u8 [a0 + 6] = 0\n 20601: u8 [a0 + 5] = 0\n 20604: u8 [a0 + 4] = 0\n 20607: u8 [a0 + 3] = 0\n 20610: u8 [a0 + 2] = 0\n 20613: u8 [a0 + 1] = 0\n 20616: u8 [a0 + 0] = 0\n 20618: u8 [a0 + 0x18] = a2\n 20621: u8 [a0 + 0x10] = a1\n 20624: a3 = a2 >> 0x38\n 20627: u8 [a0 + 0x1f] = a3\n 20630: a3 = a2 >> 0x30\n 20633: u8 [a0 + 0x1e] = a3\n 20636: a3 = a2 >> 0x28\n 20639: u8 [a0 + 0x1d] = a3\n 20642: a3 = a2 >> 0x20\n 20645: u8 [a0 + 0x1c] = a3\n 20648: a3 = a2 >> 0x18\n 20651: u8 [a0 + 0x1b] = a3\n 20654: a3 = a2 >> 0x10\n 20657: u8 [a0 + 0x1a] = a3\n 20660: a2 = a2 >> 0x8\n 20663: u8 [a0 + 0x19] = a2\n 20666: a2 = a1 >> 0x38\n 20669: u8 [a0 + 0x17] = a2\n 20672: a2 = a1 >> 0x30\n 20675: u8 [a0 + 0x16] = a2\n 20678: a2 = a1 >> 0x28\n 20681: u8 [a0 + 0x15] = a2\n 20684: a2 = a1 >> 0x20\n 20687: u8 [a0 + 0x14] = a2\n 20690: a2 = a1 >> 0x18\n 20693: u8 [a0 + 0x13] = a2\n 20696: a2 = a1 >> 0x10\n 20699: u8 [a0 + 0x12] = a2\n 20702: a1 = a1 >> 0x8\n 20705: u8 [a0 + 0x11] = a1\n 20708: a0 = 0x20\n 20711: a1 = 0x20\n 20714: ra = 290, jump @0\n      : @336 [@dyn 145] (gas: 35)\n 20720: u8 [a0 + 31] = 0x2\n 20724: u8 [a0 + 30] = 0\n 20727: u8 [a0 + 29] = 0\n 20730: u8 [a0 + 28] = 0\n 20733: u8 [a0 + 27] = 0\n 20736: u8 [a0 + 26] = 0\n 20739: u8 [a0 + 25] = 0\n 20742: u8 [a0 + 24] = 0\n 20745: u8 [a0 + 23] = 0\n 20748: u8 [a0 + 22] = 0\n 20751: u8 [a0 + 21] = 0\n 20754: u8 [a0 + 20] = 0\n 20757: u8 [a0 + 19] = 0\n 20760: u8 [a0 + 18] = 0\n 20763: u8 [a0 + 17] = 0\n 20766: u8 [a0 + 16] = 0\n 20769: u8 [a0 + 15] = 0\n 20772: u8 [a0 + 14] = 0\n 20775: u8 [a0 + 13] = 0\n 20778: u8 [a0 + 12] = 0\n 20781: u8 [a0 + 11] = 0\n 20784: u8 [a0 + 10] = 0\n 20787: u8 [a0 + 9] = 0\n 20790: u8 [a0 + 8] = 0\n 20793: u8 [a0 + 7] = 0\n 20796: u8 [a0 + 6] = 0\n 20799: u8 [a0 + 5] = 0\n 20802: u8 [a0 + 4] = 0\n 20805: u8 [a0 + 3] = 0\n 20808: u8 [a0 + 2] = 0\n 20811: u8 [a0 + 1] = 0\n 20814: u8 [a0 + 0] = 0\n 20816: a1 = 0x40\n 20819: a0 = 0\n 20821: ra = 292, jump @0\n      : @337 [@dyn 146] (gas: 14)\n 20827: i32 a0 = a0 + 0\n 20829: i32 a2 = sp + 0x380\n 20833: a1 = 0x40\n 20836: ecalli 7 // 'hash_keccak_256'\n 20838: a0 = u64 [sp + 0x380]\n 20842: u64 [sp + 0x90] = a0\n 20846: a0 = u64 [sp + 0x388]\n 20850: u64 [sp + 0x88] = a0\n 20854: a0 = u64 [sp + 0x390]\n 20858: u64 [sp + 0x80] = a0\n 20862: s1 = u64 [sp + 0x398]\n 20866: a1 = 0x20\n 20869: a0 = 0\n 20871: ra = 294, jump @0\n      : @338 [@dyn 147] (gas: 38)\n 20877: a2 = u64 [sp + 0x98]\n 20881: a1 = a2 << 0x38\n 20884: u8 [a0 + 0x1f] = a2\n 20887: u8 [a0 + 30] = 0\n 20890: u8 [a0 + 29] = 0\n 20893: u8 [a0 + 28] = 0\n 20896: u8 [a0 + 27] = 0\n 20899: u8 [a0 + 26] = 0\n 20902: u8 [a0 + 25] = 0\n 20905: u64 [sp + 0x78] = a1\n 20908: u8 [a0 + 0x18] = a1\n 20911: u8 [a0 + 23] = 0\n 20914: u8 [a0 + 22] = 0\n 20917: u8 [a0 + 21] = 0\n 20920: u8 [a0 + 20] = 0\n 20923: u8 [a0 + 19] = 0\n 20926: u8 [a0 + 18] = 0\n 20929: u8 [a0 + 17] = 0\n 20932: u8 [a0 + 16] = 0\n 20935: u8 [a0 + 15] = 0\n 20938: u8 [a0 + 14] = 0\n 20941: u8 [a0 + 13] = 0\n 20944: u8 [a0 + 12] = 0\n 20947: u8 [a0 + 11] = 0\n 20950: u8 [a0 + 10] = 0\n 20953: u8 [a0 + 9] = 0\n 20956: u8 [a0 + 8] = 0\n 20959: u8 [a0 + 7] = 0\n 20962: u8 [a0 + 6] = 0\n 20965: u8 [a0 + 5] = 0\n 20968: u8 [a0 + 4] = 0\n 20971: u8 [a0 + 3] = 0\n 20974: u8 [a0 + 2] = 0\n 20977: u8 [a0 + 1] = 0\n 20980: u8 [a0 + 0] = 0\n 20982: a0 = 0x20\n 20985: a1 = 0x20\n 20988: ra = 296, jump @0\n      : @339 [@dyn 148] (gas: 66)\n 20994: a1 = s1 >> 0x38\n 20997: u8 [a0 + 0x1f] = a1\n 21000: a1 = s1 >> 0x30\n 21003: u8 [a0 + 0x1e] = a1\n 21006: a1 = s1 >> 0x28\n 21009: u8 [a0 + 0x1d] = a1\n 21012: a1 = s1 >> 0x20\n 21015: u8 [a0 + 0x1c] = a1\n 21018: a1 = s1 >> 0x18\n 21021: u8 [a0 + 0x1b] = a1\n 21024: a1 = s1 >> 0x10\n 21027: u8 [a0 + 0x1a] = a1\n 21030: a1 = s1 >> 0x8\n 21033: u8 [a0 + 0x19] = a1\n 21036: u8 [a0 + 0x18] = s1\n 21039: a2 = u64 [sp + 0x80]\n 21043: a1 = a2 >> 0x38\n 21046: u8 [a0 + 0x17] = a1\n 21049: a1 = a2 >> 0x30\n 21052: u8 [a0 + 0x16] = a1\n 21055: a1 = a2 >> 0x28\n 21058: u8 [a0 + 0x15] = a1\n 21061: a1 = a2 >> 0x20\n 21064: u8 [a0 + 0x14] = a1\n 21067: a1 = a2 >> 0x18\n 21070: u8 [a0 + 0x13] = a1\n 21073: a1 = a2 >> 0x10\n 21076: u8 [a0 + 0x12] = a1\n 21079: a1 = a2 >> 0x8\n 21082: u8 [a0 + 0x11] = a1\n 21085: u8 [a0 + 0x10] = a2\n 21088: a2 = u64 [sp + 0x88]\n 21092: a1 = a2 >> 0x38\n 21095: u8 [a0 + 0xf] = a1\n 21098: a1 = a2 >> 0x30\n 21101: u8 [a0 + 0xe] = a1\n 21104: a1 = a2 >> 0x28\n 21107: u8 [a0 + 0xd] = a1\n 21110: a1 = a2 >> 0x20\n 21113: u8 [a0 + 0xc] = a1\n 21116: a1 = a2 >> 0x18\n 21119: u8 [a0 + 0xb] = a1\n 21122: a1 = a2 >> 0x10\n 21125: u8 [a0 + 0xa] = a1\n 21128: a1 = a2 >> 0x8\n 21131: u8 [a0 + 0x9] = a1\n 21134: u8 [a0 + 0x8] = a2\n 21137: a2 = u64 [sp + 0x90]\n 21141: a1 = a2 >> 0x38\n 21144: u8 [a0 + 0x7] = a1\n 21147: a1 = a2 >> 0x30\n 21150: u8 [a0 + 0x6] = a1\n 21153: a1 = a2 >> 0x28\n 21156: u8 [a0 + 0x5] = a1\n 21159: a1 = a2 >> 0x20\n 21162: u8 [a0 + 0x4] = a1\n 21165: a1 = a2 >> 0x18\n 21168: u8 [a0 + 0x3] = a1\n 21171: a1 = a2 >> 0x10\n 21174: u8 [a0 + 0x2] = a1\n 21177: a1 = a2 >> 0x8\n 21180: u8 [a0 + 0x1] = a1\n 21183: u8 [a0] = a2\n 21185: a1 = 0x40\n 21188: a0 = 0\n 21190: ra = 298, jump @0\n      : @340 [@dyn 149] (gas: 28)\n 21196: i32 a0 = a0 + 0\n 21198: i32 a2 = sp + 0x380\n 21202: a1 = 0x40\n 21205: ecalli 7 // 'hash_keccak_256'\n 21207: a0 = u64 [sp + 0x398]\n 21211: a1 = u64 [sp + 0x390]\n 21215: a2 = u64 [sp + 0x388]\n 21219: a3 = u64 [sp + 0x380]\n 21223: a0 = reverse a0\n 21225: a1 = reverse a1\n 21227: a2 = reverse a2\n 21229: a3 = reverse a3\n 21231: u64 [sp + 0x378] = a3\n 21235: u64 [sp + 0x370] = a2\n 21239: u64 [sp + 0x368] = a1\n 21243: u64 [sp + 0x360] = a0\n 21247: u64 [sp + 920] = 0\n 21251: u64 [sp + 912] = 0\n 21255: u64 [sp + 904] = 0\n 21259: u64 [sp + 896] = 0\n 21263: u32 [sp + 832] = 0x20\n 21268: i32 a1 = sp + 0x360\n 21272: i32 a3 = sp + 0x380\n 21276: i32 a4 = sp + 0x340\n 21280: a2 = 0xffffffffffffffff\n 21283: a0 = 0\n 21285: ecalli 6 // 'get_storage'\n 21287: fallthrough\n      : @341 (gas: 20)\n 21288: a0 = u64 [sp + 0x398]\n 21292: t0 = u64 [sp + 0x380]\n 21296: a2 = u64 [sp + 0x390]\n 21300: a3 = u64 [sp + 0x388]\n 21304: a1 = u64 [sp + 0xb0]\n 21308: a4 = a0 ^ a1\n 21311: s1 = a0 <u a1\n 21314: a0 = u64 [sp + 0xb8]\n 21318: a5 = a2 <u a0\n 21321: a5 = s1 if a4 != 0\n 21324: a1 = u64 [sp + 0xa0]\n 21328: s1 = a3 ^ a1\n 21331: a3 = a3 <u a1\n 21334: a1 = u64 [sp + 0xa8]\n 21338: a1 = t0 <u a1\n 21341: a1 = a3 if s1 != 0\n 21344: a0 = a0 ^ a2\n 21347: a0 = a0 | a4\n 21350: a1 = a5 if a0 != 0\n 21353: jump @375 if a1 != 0\n      : @342 (gas: 19)\n 21357: i32 a0 = sp + 0x260\n 21361: ecalli 4 // 'caller'\n 21363: a0 = u64 [sp + 0x268]\n 21367: a1 = i32 [sp + 0x270]\n 21371: s1 = u64 [sp + 0x260]\n 21375: a0 = reverse a0\n 21377: a2 = a0 << 0x20\n 21380: a1 = reverse a1\n 21382: a1 = a1 >> 0x20\n 21385: a1 = a1 | a2\n 21388: u64 [sp + 0x98] = a1\n 21392: a0 = a0 >> 0x20\n 21395: a1 = reverse s1\n 21397: a1 = a1 << 0x20\n 21400: a0 = a0 | a1\n 21403: u64 [sp + 0x90] = a0\n 21407: a1 = 0x20\n 21410: a0 = 0\n 21412: ra = 300, jump @0\n      : @343 [@dyn 150] (gas: 56)\n 21418: a1 = u64 [sp + 0x90]\n 21422: a1 = reverse a1\n 21424: a2 = u64 [sp + 0x98]\n 21428: a2 = reverse a2\n 21430: a3 = s1 >> 0x18\n 21433: u8 [a0 + 0xf] = a3\n 21436: a3 = s1 >> 0x10\n 21439: u8 [a0 + 0xe] = a3\n 21442: a3 = s1 >> 0x8\n 21445: u8 [a0 + 0xd] = a3\n 21448: u8 [a0 + 0xc] = s1\n 21451: u8 [a0 + 11] = 0\n 21454: u8 [a0 + 10] = 0\n 21457: u8 [a0 + 9] = 0\n 21460: u8 [a0 + 8] = 0\n 21463: u8 [a0 + 7] = 0\n 21466: u8 [a0 + 6] = 0\n 21469: u8 [a0 + 5] = 0\n 21472: u8 [a0 + 4] = 0\n 21475: u8 [a0 + 3] = 0\n 21478: u8 [a0 + 2] = 0\n 21481: u8 [a0 + 1] = 0\n 21484: u8 [a0 + 0] = 0\n 21486: u8 [a0 + 0x18] = a2\n 21489: u8 [a0 + 0x10] = a1\n 21492: a3 = a2 >> 0x38\n 21495: u8 [a0 + 0x1f] = a3\n 21498: a3 = a2 >> 0x30\n 21501: u8 [a0 + 0x1e] = a3\n 21504: a3 = a2 >> 0x28\n 21507: u8 [a0 + 0x1d] = a3\n 21510: a3 = a2 >> 0x20\n 21513: u8 [a0 + 0x1c] = a3\n 21516: a3 = a2 >> 0x18\n 21519: u8 [a0 + 0x1b] = a3\n 21522: a3 = a2 >> 0x10\n 21525: u8 [a0 + 0x1a] = a3\n 21528: a2 = a2 >> 0x8\n 21531: u8 [a0 + 0x19] = a2\n 21534: a2 = a1 >> 0x38\n 21537: u8 [a0 + 0x17] = a2\n 21540: a2 = a1 >> 0x30\n 21543: u8 [a0 + 0x16] = a2\n 21546: a2 = a1 >> 0x28\n 21549: u8 [a0 + 0x15] = a2\n 21552: a2 = a1 >> 0x20\n 21555: u8 [a0 + 0x14] = a2\n 21558: a2 = a1 >> 0x18\n 21561: u8 [a0 + 0x13] = a2\n 21564: a2 = a1 >> 0x10\n 21567: u8 [a0 + 0x12] = a2\n 21570: a1 = a1 >> 0x8\n 21573: u8 [a0 + 0x11] = a1\n 21576: a0 = 0x20\n 21579: a1 = 0x20\n 21582: ra = 302, jump @0\n      : @344 [@dyn 151] (gas: 35)\n 21588: u8 [a0 + 31] = 0x2\n 21592: u8 [a0 + 30] = 0\n 21595: u8 [a0 + 29] = 0\n 21598: u8 [a0 + 28] = 0\n 21601: u8 [a0 + 27] = 0\n 21604: u8 [a0 + 26] = 0\n 21607: u8 [a0 + 25] = 0\n 21610: u8 [a0 + 24] = 0\n 21613: u8 [a0 + 23] = 0\n 21616: u8 [a0 + 22] = 0\n 21619: u8 [a0 + 21] = 0\n 21622: u8 [a0 + 20] = 0\n 21625: u8 [a0 + 19] = 0\n 21628: u8 [a0 + 18] = 0\n 21631: u8 [a0 + 17] = 0\n 21634: u8 [a0 + 16] = 0\n 21637: u8 [a0 + 15] = 0\n 21640: u8 [a0 + 14] = 0\n 21643: u8 [a0 + 13] = 0\n 21646: u8 [a0 + 12] = 0\n 21649: u8 [a0 + 11] = 0\n 21652: u8 [a0 + 10] = 0\n 21655: u8 [a0 + 9] = 0\n 21658: u8 [a0 + 8] = 0\n 21661: u8 [a0 + 7] = 0\n 21664: u8 [a0 + 6] = 0\n 21667: u8 [a0 + 5] = 0\n 21670: u8 [a0 + 4] = 0\n 21673: u8 [a0 + 3] = 0\n 21676: u8 [a0 + 2] = 0\n 21679: u8 [a0 + 1] = 0\n 21682: u8 [a0 + 0] = 0\n 21684: a1 = 0x40\n 21687: a0 = 0\n 21689: ra = 304, jump @0\n      : @345 [@dyn 152] (gas: 14)\n 21695: i32 a0 = a0 + 0\n 21697: i32 a2 = sp + 0x380\n 21701: a1 = 0x40\n 21704: ecalli 7 // 'hash_keccak_256'\n 21706: a0 = u64 [sp + 0x380]\n 21710: u64 [sp + 0x98] = a0\n 21714: a0 = u64 [sp + 0x388]\n 21718: u64 [sp + 0x90] = a0\n 21722: a0 = u64 [sp + 0x390]\n 21726: u64 [sp + 0x88] = a0\n 21730: s1 = u64 [sp + 0x398]\n 21734: a1 = 0x20\n 21737: a0 = 0\n 21739: ra = 306, jump @0\n      : @346 [@dyn 153] (gas: 50)\n 21745: a2 = u64 [sp + 0x78]\n 21748: a1 = a2 >> 0x38\n 21751: u64 [sp + 0x40] = a1\n 21754: u8 [a0 + 0x1f] = a1\n 21757: a1 = a2 >> 0x30\n 21760: u64 [sp + 0x38] = a1\n 21763: u8 [a0 + 0x1e] = a1\n 21766: a1 = a2 >> 0x28\n 21769: u64 [sp + 0x30] = a1\n 21772: u8 [a0 + 0x1d] = a1\n 21775: a1 = a2 >> 0x20\n 21778: u64 [sp + 0x28] = a1\n 21781: u8 [a0 + 0x1c] = a1\n 21784: a1 = a2 >> 0x18\n 21787: u64 [sp + 0x20] = a1\n 21790: u8 [a0 + 0x1b] = a1\n 21793: a1 = a2 >> 0x10\n 21796: u64 [sp + 0x18] = a1\n 21799: u8 [a0 + 0x1a] = a1\n 21802: a1 = a2 >> 0x8\n 21805: u64 [sp + 0x10] = a1\n 21808: u8 [a0 + 0x19] = a1\n 21811: u8 [a0 + 0x18] = a2\n 21814: u8 [a0 + 23] = 0\n 21817: u8 [a0 + 22] = 0\n 21820: u8 [a0 + 21] = 0\n 21823: u8 [a0 + 20] = 0\n 21826: u8 [a0 + 19] = 0\n 21829: u8 [a0 + 18] = 0\n 21832: u8 [a0 + 17] = 0\n 21835: u8 [a0 + 16] = 0\n 21838: u8 [a0 + 15] = 0\n 21841: u8 [a0 + 14] = 0\n 21844: u8 [a0 + 13] = 0\n 21847: u8 [a0 + 12] = 0\n 21850: u8 [a0 + 11] = 0\n 21853: u8 [a0 + 10] = 0\n 21856: u8 [a0 + 9] = 0\n 21859: u8 [a0 + 8] = 0\n 21862: u8 [a0 + 7] = 0\n 21865: u8 [a0 + 6] = 0\n 21868: u8 [a0 + 5] = 0\n 21871: u8 [a0 + 4] = 0\n 21874: u8 [a0 + 3] = 0\n 21877: u8 [a0 + 2] = 0\n 21880: u8 [a0 + 1] = 0\n 21883: u8 [a0 + 0] = 0\n 21885: a0 = 0x20\n 21888: a1 = 0x20\n 21891: ra = 308, jump @0\n      : @347 [@dyn 154] (gas: 66)\n 21897: a1 = s1 >> 0x38\n 21900: u8 [a0 + 0x1f] = a1\n 21903: a1 = s1 >> 0x30\n 21906: u8 [a0 + 0x1e] = a1\n 21909: a1 = s1 >> 0x28\n 21912: u8 [a0 + 0x1d] = a1\n 21915: a1 = s1 >> 0x20\n 21918: u8 [a0 + 0x1c] = a1\n 21921: a1 = s1 >> 0x18\n 21924: u8 [a0 + 0x1b] = a1\n 21927: a1 = s1 >> 0x10\n 21930: u8 [a0 + 0x1a] = a1\n 21933: a1 = s1 >> 0x8\n 21936: u8 [a0 + 0x19] = a1\n 21939: u8 [a0 + 0x18] = s1\n 21942: a2 = u64 [sp + 0x88]\n 21946: a1 = a2 >> 0x38\n 21949: u8 [a0 + 0x17] = a1\n 21952: a1 = a2 >> 0x30\n 21955: u8 [a0 + 0x16] = a1\n 21958: a1 = a2 >> 0x28\n 21961: u8 [a0 + 0x15] = a1\n 21964: a1 = a2 >> 0x20\n 21967: u8 [a0 + 0x14] = a1\n 21970: a1 = a2 >> 0x18\n 21973: u8 [a0 + 0x13] = a1\n 21976: a1 = a2 >> 0x10\n 21979: u8 [a0 + 0x12] = a1\n 21982: a1 = a2 >> 0x8\n 21985: u8 [a0 + 0x11] = a1\n 21988: u8 [a0 + 0x10] = a2\n 21991: a2 = u64 [sp + 0x90]\n 21995: a1 = a2 >> 0x38\n 21998: u8 [a0 + 0xf] = a1\n 22001: a1 = a2 >> 0x30\n 22004: u8 [a0 + 0xe] = a1\n 22007: a1 = a2 >> 0x28\n 22010: u8 [a0 + 0xd] = a1\n 22013: a1 = a2 >> 0x20\n 22016: u8 [a0 + 0xc] = a1\n 22019: a1 = a2 >> 0x18\n 22022: u8 [a0 + 0xb] = a1\n 22025: a1 = a2 >> 0x10\n 22028: u8 [a0 + 0xa] = a1\n 22031: a1 = a2 >> 0x8\n 22034: u8 [a0 + 0x9] = a1\n 22037: u8 [a0 + 0x8] = a2\n 22040: a2 = u64 [sp + 0x98]\n 22044: a1 = a2 >> 0x38\n 22047: u8 [a0 + 0x7] = a1\n 22050: a1 = a2 >> 0x30\n 22053: u8 [a0 + 0x6] = a1\n 22056: a1 = a2 >> 0x28\n 22059: u8 [a0 + 0x5] = a1\n 22062: a1 = a2 >> 0x20\n 22065: u8 [a0 + 0x4] = a1\n 22068: a1 = a2 >> 0x18\n 22071: u8 [a0 + 0x3] = a1\n 22074: a1 = a2 >> 0x10\n 22077: u8 [a0 + 0x2] = a1\n 22080: a1 = a2 >> 0x8\n 22083: u8 [a0 + 0x1] = a1\n 22086: u8 [a0] = a2\n 22088: a1 = 0x40\n 22091: a0 = 0\n 22093: ra = 310, jump @0\n      : @348 [@dyn 155] (gas: 32)\n 22099: i32 a0 = a0 + 0\n 22101: i32 a2 = sp + 0x380\n 22105: a1 = 0x40\n 22108: ecalli 7 // 'hash_keccak_256'\n 22110: a0 = u64 [sp + 0x398]\n 22114: a1 = u64 [sp + 0x390]\n 22118: a2 = u64 [sp + 0x388]\n 22122: a3 = u64 [sp + 0x380]\n 22126: a0 = reverse a0\n 22128: a1 = reverse a1\n 22130: a2 = reverse a2\n 22132: a3 = reverse a3\n 22134: u64 [sp + 0x68] = a3\n 22137: u64 [sp + 0x378] = a3\n 22141: u64 [sp + 0x80] = a2\n 22145: u64 [sp + 0x370] = a2\n 22149: u64 [sp + 0x88] = a1\n 22153: u64 [sp + 0x368] = a1\n 22157: u64 [sp + 0x90] = a0\n 22161: u64 [sp + 0x360] = a0\n 22165: u64 [sp + 920] = 0\n 22169: u64 [sp + 912] = 0\n 22173: u64 [sp + 904] = 0\n 22177: u64 [sp + 896] = 0\n 22181: u32 [sp + 832] = 0x20\n 22186: i32 a1 = sp + 0x360\n 22190: i32 a3 = sp + 0x380\n 22194: i32 a4 = sp + 0x340\n 22198: a2 = 0xffffffffffffffff\n 22201: a0 = 0\n 22203: ecalli 6 // 'get_storage'\n 22205: fallthrough\n      : @349 (gas: 22)\n 22206: t2 = u64 [sp + 0x398]\n 22210: a3 = u64 [sp + 0x390]\n 22214: ra = u64 [sp + 0x388]\n 22218: a2 = u64 [sp + 0x380]\n 22222: a1 = u64 [sp + 0xb0]\n 22226: a0 = t2 ^ a1\n 22229: a4 = t2 <u a1\n 22232: a5 = u64 [sp + 0xb8]\n 22236: a1 = a3 <u a5\n 22239: u64 [sp + 0x98] = a1\n 22243: a4 = a1 if a0 == 0\n 22246: a1 = u64 [sp + 0xa0]\n 22250: t1 = ra ^ a1\n 22253: s1 = ra <u a1\n 22256: t0 = u64 [sp + 0xa8]\n 22260: u64 [sp + 0x48] = a2\n 22263: a2 = a2 <u t0\n 22266: s1 = a2 if t1 == 0\n 22269: a5 = a5 ^ a3\n 22272: a0 = a0 | a5\n 22275: a4 = s1 if a0 == 0\n 22278: jump @382 if a4 != 0\n      : @350 (gas: 61)\n 22282: t1 = a2\n 22284: a0 = u64 [sp + 0xb8]\n 22288: a0 = a3 - a0\n 22291: a3 = a0 - s1\n 22294: u64 [sp + 0x60] = a3\n 22297: a0 = a0 <u s1\n 22300: a3 = u64 [sp + 0xb0]\n 22304: a2 = t2 - a3\n 22307: a3 = u64 [sp + 0x98]\n 22311: a2 = a2 - a3\n 22314: a2 = a2 - a0\n 22317: u64 [sp + 0x58] = a2\n 22320: a0 = 0xffffffff\n 22330: u64 [sp + 0x98] = a0\n 22334: a0 = ra - a1\n 22337: a0 = a0 - t1\n 22340: u64 [sp + 0x50] = a0\n 22343: a0 = u64 [sp + 0x48]\n 22346: a0 = a0 - t0\n 22349: u64 [sp + 0x48] = a0\n 22352: a0 = u64 [sp + 0x80]\n 22356: u64 [sp + 0x370] = a0\n 22360: a0 = u64 [sp + 0x88]\n 22364: u64 [sp + 0x368] = a0\n 22368: a0 = u64 [sp + 0x90]\n 22372: u64 [sp + 0x360] = a0\n 22376: s1 = u64 [sp + 0x68]\n 22379: u64 [sp + 0x378] = s1\n 22383: u64 [sp + 920] = 0\n 22387: u64 [sp + 912] = 0\n 22391: u64 [sp + 904] = 0\n 22395: u64 [sp + 896] = 0\n 22399: u32 [sp + 832] = 0x20\n 22404: i32 a1 = sp + 0x360\n 22408: i32 a3 = sp + 0x380\n 22412: i32 a4 = sp + 0x340\n 22416: a2 = 0xffffffffffffffff\n 22419: a0 = 0\n 22421: ecalli 6 // 'get_storage'\n 22423: u64 [sp + 0x378] = s1\n 22427: a0 = u64 [sp + 0x80]\n 22431: u64 [sp + 0x370] = a0\n 22435: a0 = u64 [sp + 0x88]\n 22439: u64 [sp + 0x368] = a0\n 22443: a0 = u64 [sp + 0x90]\n 22447: u64 [sp + 0x360] = a0\n 22451: a0 = u64 [sp + 0x58]\n 22454: u64 [sp + 0x398] = a0\n 22458: a0 = u64 [sp + 0x60]\n 22461: u64 [sp + 0x390] = a0\n 22465: a0 = u64 [sp + 0x50]\n 22468: u64 [sp + 0x388] = a0\n 22472: a0 = u64 [sp + 0x48]\n 22475: u64 [sp + 0x380] = a0\n 22479: i32 a1 = sp + 0x360\n 22483: i32 a3 = sp + 0x380\n 22487: a2 = 0xffffffffffffffff\n 22490: a4 = 0x20\n 22493: a0 = 0\n 22495: ecalli 12 // 'set_storage'\n 22497: fallthrough\n      : @351 (gas: 2)\n 22498: a0 = u64 [sp + 0x70]\n 22501: jump @357 if a0 == 0\n      : @352 (gas: 16)\n 22505: u64 [sp + 888] = 0\n 22509: u64 [sp + 880] = 0\n 22513: u64 [sp + 872] = 0\n 22517: u64 [sp + 864] = 0\n 22521: u64 [sp + 920] = 0\n 22525: u64 [sp + 912] = 0\n 22529: u64 [sp + 904] = 0\n 22533: u64 [sp + 896] = 0\n 22537: u32 [sp + 832] = 0x20\n 22542: i32 a1 = sp + 0x360\n 22546: i32 a3 = sp + 0x380\n 22550: i32 a4 = sp + 0x340\n 22554: a2 = 0xffffffffffffffff\n 22557: a0 = 0\n 22559: ecalli 6 // 'get_storage'\n 22561: fallthrough\n      : @353 (gas: 26)\n 22562: a0 = u64 [sp + 0x380]\n 22566: a1 = u64 [sp + 0x98]\n 22570: a0 = a0 & a1\n 22573: a2 = a0 + 0xffffffffffffff9c\n 22576: a0 = a2 <u a0\n 22579: s1 = a0 + 0xffffffffffffffff\n 22582: a0 = 0 if s1 != 0\n 22584: a1 = a0 <u 0x1\n 22587: a3 = -a1\n 22589: a4 = a0 + 0xffffffffffffffff\n 22592: a1 = a1 << 0x20\n 22595: a0 = a4 >> 0x20\n 22598: a0 = a0 - a1\n 22601: a1 = s1 << 0x20\n 22604: u64 [sp + 0x90] = a2\n 22608: a2 = a2 >> 0x20\n 22611: a1 = a1 | a2\n 22614: a0 = a0 | a1\n 22617: u64 [sp + 0x80] = a4\n 22621: a1 = a4 << 0x20\n 22624: u64 [sp + 0x88] = a3\n 22628: a2 = s1 | a3\n 22631: a2 = a2 >> 0x20\n 22634: a1 = a1 | a2\n 22637: a0 = a0 | a1\n 22640: jump @384 if a0 != 0\n      : @354 (gas: 57)\n 22644: u64 [sp + 888] = 0\n 22648: u64 [sp + 880] = 0\n 22652: u64 [sp + 872] = 0\n 22656: u64 [sp + 864] = 0\n 22660: u64 [sp + 920] = 0\n 22664: u64 [sp + 912] = 0\n 22668: u64 [sp + 904] = 0\n 22672: u64 [sp + 896] = 0\n 22676: u32 [sp + 832] = 0x20\n 22681: i32 a1 = sp + 0x360\n 22685: i32 a3 = sp + 0x380\n 22689: i32 a4 = sp + 0x340\n 22693: a2 = 0xffffffffffffffff\n 22696: a0 = 0\n 22698: ecalli 6 // 'get_storage'\n 22700: a0 = u32 [sp + 0x384]\n 22704: a0 = a0 << 0x20\n 22707: a1 = u64 [sp + 0x388]\n 22711: a2 = u64 [sp + 0x390]\n 22715: a3 = u64 [sp + 0x398]\n 22719: a4 = u64 [sp + 0x90]\n 22723: a0 = a0 | a4\n 22726: a1 = a1 | s1\n 22729: a4 = u64 [sp + 0x80]\n 22733: a2 = a2 | a4\n 22736: a4 = u64 [sp + 0x88]\n 22740: a3 = a3 | a4\n 22743: u64 [sp + 888] = 0\n 22747: u64 [sp + 880] = 0\n 22751: u64 [sp + 872] = 0\n 22755: u64 [sp + 864] = 0\n 22759: u64 [sp + 0x398] = a3\n 22763: u64 [sp + 0x390] = a2\n 22767: u64 [sp + 0x388] = a1\n 22771: u64 [sp + 0x380] = a0\n 22775: i32 a1 = sp + 0x360\n 22779: i32 a3 = sp + 0x380\n 22783: a2 = 0xffffffffffffffff\n 22786: a4 = 0x20\n 22789: a0 = 0\n 22791: ecalli 12 // 'set_storage'\n 22793: u64 [sp + 888] = 0\n 22797: u64 [sp + 880] = 0\n 22801: u64 [sp + 872] = 0\n 22805: u64 [sp + 864] = 0\n 22809: u64 [sp + 920] = 0\n 22813: u64 [sp + 912] = 0\n 22817: u64 [sp + 904] = 0\n 22821: u64 [sp + 896] = 0\n 22825: u32 [sp + 832] = 0x20\n 22830: i32 a1 = sp + 0x360\n 22834: i32 a3 = sp + 0x380\n 22838: i32 a4 = sp + 0x340\n 22842: a2 = 0xffffffffffffffff\n 22845: a0 = 0\n 22847: ecalli 6 // 'get_storage'\n 22849: fallthrough\n      : @355 (gas: 5)\n 22850: a0 = u32 [sp + 0x384]\n 22854: s1 = u64 [sp + 0x98]\n 22858: s1 = s1 & a0\n 22861: a0 = 0xffffff9c\n 22871: jump @386 if s1 >=u a0\n      : @356 (gas: 32)\n 22875: u64 [sp + 888] = 0\n 22879: u64 [sp + 880] = 0\n 22883: u64 [sp + 872] = 0\n 22887: u64 [sp + 864] = 0\n 22891: u64 [sp + 920] = 0\n 22895: u64 [sp + 912] = 0\n 22899: u64 [sp + 904] = 0\n 22903: u64 [sp + 896] = 0\n 22907: u32 [sp + 832] = 0x20\n 22912: i32 a1 = sp + 0x360\n 22916: i32 a3 = sp + 0x380\n 22920: i32 a4 = sp + 0x340\n 22924: a2 = 0xffffffffffffffff\n 22927: a0 = 0\n 22929: ecalli 6 // 'get_storage'\n 22931: a0 = u64 [sp + 0x388]\n 22935: a1 = u32 [sp + 0x380]\n 22939: a2 = u64 [sp + 0x390]\n 22943: a3 = u64 [sp + 0x398]\n 22947: s1 = s1 << 0x20\n 22950: a1 = a1 | s1\n 22953: a4 = 0x6400000000\n 22963: a1 = a1 + a4\n 22966: u64 [sp + 888] = 0\n 22970: u64 [sp + 880] = 0\n 22974: u64 [sp + 872] = 0\n 22978: u64 [sp + 864] = 0\n 22982: u64 [sp + 0x398] = a3\n 22986: u64 [sp + 0x390] = a2\n 22990: u64 [sp + 0x388] = a0\n 22994: u64 [sp + 0x380] = a1\n 22998: jump @362\n      : @357 (gas: 16)\n 23001: u64 [sp + 888] = 0\n 23005: u64 [sp + 880] = 0\n 23009: u64 [sp + 872] = 0\n 23013: u64 [sp + 864] = 0\n 23017: u64 [sp + 920] = 0\n 23021: u64 [sp + 912] = 0\n 23025: u64 [sp + 904] = 0\n 23029: u64 [sp + 896] = 0\n 23033: u32 [sp + 832] = 0x20\n 23038: i32 a1 = sp + 0x360\n 23042: i32 a3 = sp + 0x380\n 23046: i32 a4 = sp + 0x340\n 23050: a2 = 0xffffffffffffffff\n 23053: a0 = 0\n 23055: ecalli 6 // 'get_storage'\n 23057: fallthrough\n      : @358 (gas: 5)\n 23058: a0 = u64 [sp + 0x380]\n 23062: s1 = u64 [sp + 0x98]\n 23066: s1 = s1 & a0\n 23069: a0 = 0xffffff9c\n 23079: jump @388 if s1 >=u a0\n      : @359 (gas: 65)\n 23083: u64 [sp + 888] = 0\n 23087: u64 [sp + 880] = 0\n 23091: u64 [sp + 872] = 0\n 23095: u64 [sp + 864] = 0\n 23099: u64 [sp + 920] = 0\n 23103: u64 [sp + 912] = 0\n 23107: u64 [sp + 904] = 0\n 23111: u64 [sp + 896] = 0\n 23115: u32 [sp + 832] = 0x20\n 23120: i32 a1 = sp + 0x360\n 23124: i32 a3 = sp + 0x380\n 23128: i32 a4 = sp + 0x340\n 23132: a2 = 0xffffffffffffffff\n 23135: a0 = 0\n 23137: ecalli 6 // 'get_storage'\n 23139: a0 = u32 [sp + 0x384]\n 23143: a0 = a0 << 0x20\n 23146: a1 = u64 [sp + 0x388]\n 23150: a0 = a0 | s1\n 23153: a2 = a0 <u s1\n 23156: a3 = u64 [sp + 0x390]\n 23160: a1 = a1 + a2\n 23163: a4 = u64 [sp + 0x398]\n 23167: a2 = 0 if a1 != 0\n 23169: a2 = a2 + a3\n 23172: a3 = a2 <u a3\n 23175: a3 = a3 + a4\n 23178: a4 = a0 + 0x64\n 23181: a0 = a4 <u a0\n 23184: a5 = a1 + a0\n 23187: a1 = a5 <u a1\n 23190: a1 = a0 if a0 == 0\n 23193: a1 = a1 + a2\n 23196: a0 = a1 <u a2\n 23199: a0 = a0 + a3\n 23202: u64 [sp + 888] = 0\n 23206: u64 [sp + 880] = 0\n 23210: u64 [sp + 872] = 0\n 23214: u64 [sp + 864] = 0\n 23218: u64 [sp + 0x380] = a4\n 23222: u64 [sp + 0x388] = a5\n 23226: u64 [sp + 0x390] = a1\n 23230: u64 [sp + 0x398] = a0\n 23234: i32 a1 = sp + 0x360\n 23238: i32 a3 = sp + 0x380\n 23242: a2 = 0xffffffffffffffff\n 23245: a4 = 0x20\n 23248: a0 = 0\n 23250: ecalli 12 // 'set_storage'\n 23252: u64 [sp + 888] = 0\n 23256: u64 [sp + 880] = 0\n 23260: u64 [sp + 872] = 0\n 23264: u64 [sp + 864] = 0\n 23268: u64 [sp + 920] = 0\n 23272: u64 [sp + 912] = 0\n 23276: u64 [sp + 904] = 0\n 23280: u64 [sp + 896] = 0\n 23284: u32 [sp + 832] = 0x20\n 23289: i32 a1 = sp + 0x360\n 23293: i32 a3 = sp + 0x380\n 23297: i32 a4 = sp + 0x340\n 23301: a2 = 0xffffffffffffffff\n 23304: a0 = 0\n 23306: ecalli 6 // 'get_storage'\n 23308: fallthrough\n      : @360 (gas: 28)\n 23309: a0 = u32 [sp + 0x384]\n 23313: a1 = u64 [sp + 0x98]\n 23317: a0 = a0 & a1\n 23320: a3 = a0 + 0xffffffffffffff9c\n 23323: a0 = a3 <u a0\n 23326: s1 = a0 + 0xffffffffffffffff\n 23329: a0 = 0 if s1 != 0\n 23331: a1 = a0 <u 0x1\n 23334: a4 = -a1\n 23336: a0 = a0 + 0xffffffffffffffff\n 23339: a1 = a1 << 0x20\n 23342: a2 = a0 >> 0x20\n 23345: u64 [sp + 0x90] = a2\n 23349: a1 = a2 - a1\n 23352: a2 = s1 << 0x20\n 23355: u64 [sp + 0x98] = a3\n 23359: a3 = a3 >> 0x20\n 23362: a2 = a2 | a3\n 23365: u64 [sp + 0x80] = a2\n 23369: a1 = a1 | a2\n 23372: a2 = a0 << 0x20\n 23375: u64 [sp + 0x88] = a4\n 23379: a0 = s1 | a4\n 23382: a0 = a0 >> 0x20\n 23385: u64 [sp + 0x70] = a2\n 23388: a0 = a0 | a2\n 23391: a0 = a0 | a1\n 23394: jump @390 if a0 != 0\n      : @361 (gas: 42)\n 23398: u64 [sp + 888] = 0\n 23402: u64 [sp + 880] = 0\n 23406: u64 [sp + 872] = 0\n 23410: u64 [sp + 864] = 0\n 23414: u64 [sp + 920] = 0\n 23418: u64 [sp + 912] = 0\n 23422: u64 [sp + 904] = 0\n 23426: u64 [sp + 896] = 0\n 23430: u32 [sp + 832] = 0x20\n 23435: i32 a1 = sp + 0x360\n 23439: i32 a3 = sp + 0x380\n 23443: i32 a4 = sp + 0x340\n 23447: a2 = 0xffffffffffffffff\n 23450: a0 = 0\n 23452: ecalli 6 // 'get_storage'\n 23454: a0 = u64 [sp + 0x398]\n 23458: a1 = u64 [sp + 0x390]\n 23462: a2 = u64 [sp + 0x388]\n 23466: a3 = u32 [sp + 0x380]\n 23470: a4 = u64 [sp + 0x88]\n 23474: a4 = a4 << 0x20\n 23477: s1 = s1 >> 0x20\n 23480: a5 = u64 [sp + 0x98]\n 23484: a5 = a5 << 0x20\n 23487: a3 = a3 | a5\n 23490: a5 = u64 [sp + 0x80]\n 23494: a2 = a2 | a5\n 23497: a1 = a1 | s1\n 23500: a5 = u64 [sp + 0x70]\n 23503: a1 = a1 | a5\n 23506: a5 = u64 [sp + 0x90]\n 23510: a0 = a0 | a5\n 23513: a0 = a0 | a4\n 23516: u64 [sp + 888] = 0\n 23520: u64 [sp + 880] = 0\n 23524: u64 [sp + 872] = 0\n 23528: u64 [sp + 864] = 0\n 23532: u64 [sp + 0x398] = a0\n 23536: u64 [sp + 0x390] = a1\n 23540: u64 [sp + 0x388] = a2\n 23544: u64 [sp + 0x380] = a3\n 23548: fallthrough\n      : @362 (gas: 25)\n 23549: i32 a1 = sp + 0x360\n 23553: i32 a3 = sp + 0x380\n 23557: a2 = 0xffffffffffffffff\n 23560: a4 = 0x20\n 23563: a0 = 0\n 23565: ecalli 12 // 'set_storage'\n 23567: i32 a0 = sp + 0x280\n 23571: ecalli 4 // 'caller'\n 23573: a0 = u64 [sp + 0x288]\n 23577: a1 = u64 [sp + 0x280]\n 23581: a2 = i32 [sp + 0x290]\n 23585: u64 [sp + 0x2a8] = a0\n 23589: u64 [sp + 0x2a0] = a1\n 23593: u32 [sp + 0x2b0] = a2\n 23597: a0 = u64 [sp + 0xa0]\n 23601: u64 [sp + 0x2c8] = a0\n 23605: a0 = u64 [sp + 0xa8]\n 23609: u64 [sp + 0x2c0] = a0\n 23613: a0 = u64 [sp + 0xb8]\n 23617: u64 [sp + 0x2d0] = a0\n 23621: a0 = u64 [sp + 0xb0]\n 23625: u64 [sp + 0x2d8] = a0\n 23629: a0 = 0\n 23631: a1 = 0\n 23633: ra = 312, jump @0\n      : @363 [@dyn 156] (gas: 4)\n 23639: u64 [sp + 0x98] = a0\n 23643: a0 = 0\n 23645: a1 = 0\n 23647: ra = 314, jump @0\n      : @364 [@dyn 157] (gas: 27)\n 23653: u32 [sp + 736] = 0\n 23657: u64 [sp + 792] = 0\n 23661: u64 [sp + 784] = 0\n 23665: u64 [sp + 776] = 0\n 23669: u64 [sp + 768] = 0\n 23673: a1 = sp + 0x2a0\n 23677: a1 = a1 << 0x20\n 23680: s1 = a1 >> 0x20\n 23683: a1 = sp + 0x2c0\n 23687: a1 = a1 << 0x20\n 23690: a1 = a1 >> 0x20\n 23693: a2 = sp + 0x300\n 23697: a2 = a2 << 0x20\n 23700: a3 = a2 | a1\n 23703: a4 = u64 [sp + 0x98]\n 23707: a4 = a4 << 0x20\n 23710: a4 = a4 >> 0x20\n 23713: a0 = a0 << 0x20\n 23716: a0 = a0 >> 0x20\n 23719: a1 = sp + 0x2e0\n 23723: a1 = a1 << 0x20\n 23726: a5 = a1 | a0\n 23729: a1 = 0xffffffffffffffff\n 23732: a2 = 0xffffffffffffffff\n 23735: a0 = s1\n 23737: ecalli 0 // 'call'\n 23738: fallthrough\n      : @365 (gas: 1)\n 23739: jump @381 if a0 != 0\n      : @366 (gas: 11)\n 23743: i32 a0 = sp + 0x320\n 23747: ecalli 4 // 'caller'\n 23749: a0 = u32 [sp + 0x330]\n 23753: u64 [sp + 0x88] = a0\n 23757: a0 = u64 [sp + 0x328]\n 23761: u64 [sp + 0x70] = a0\n 23764: a0 = u64 [sp + 0x320]\n 23768: u64 [sp + 0x80] = a0\n 23772: a0 = 0x40\n 23775: a1 = 0x20\n 23778: ra = 316, jump @0\n      : @367 [@dyn 158] (gas: 104)\n 23784: a1 = u8 [a0 + 0x11]\n 23787: a2 = u8 [a0 + 0x10]\n 23790: a3 = u8 [a0 + 0x12]\n 23793: a4 = u8 [a0 + 0x13]\n 23796: a1 = a1 << 0x8\n 23799: a1 = a1 | a2\n 23802: a3 = a3 << 0x10\n 23805: a4 = a4 << 0x18\n 23808: a3 = a3 | a4\n 23811: a1 = a1 | a3\n 23814: a2 = u8 [a0 + 0x15]\n 23817: a3 = u8 [a0 + 0x14]\n 23820: a4 = u8 [a0 + 0x16]\n 23823: a5 = u8 [a0 + 0x17]\n 23826: a2 = a2 << 0x8\n 23829: a2 = a2 | a3\n 23832: a4 = a4 << 0x10\n 23835: a5 = a5 << 0x18\n 23838: a4 = a4 | a5\n 23841: a2 = a2 | a4\n 23844: a2 = a2 << 0x20\n 23847: t0 = a2 | a1\n 23850: a2 = u8 [a0 + 0x1]\n 23853: a3 = u8 [a0]\n 23855: a4 = u8 [a0 + 0x2]\n 23858: a5 = u8 [a0 + 0x3]\n 23861: a2 = a2 << 0x8\n 23864: a2 = a2 | a3\n 23867: a4 = a4 << 0x10\n 23870: a5 = a5 << 0x18\n 23873: a4 = a4 | a5\n 23876: a2 = a2 | a4\n 23879: a3 = u8 [a0 + 0x5]\n 23882: a4 = u8 [a0 + 0x4]\n 23885: a5 = u8 [a0 + 0x6]\n 23888: s1 = u8 [a0 + 0x7]\n 23891: a3 = a3 << 0x8\n 23894: a3 = a3 | a4\n 23897: a5 = a5 << 0x10\n 23900: s1 = s1 << 0x18\n 23903: a5 = a5 | s1\n 23906: a3 = a3 | a5\n 23909: a3 = a3 << 0x20\n 23912: a2 = a2 | a3\n 23915: a3 = u8 [a0 + 0x19]\n 23918: a4 = u8 [a0 + 0x18]\n 23921: a5 = u8 [a0 + 0x1a]\n 23924: s1 = u8 [a0 + 0x1b]\n 23927: a3 = a3 << 0x8\n 23930: a3 = a3 | a4\n 23933: a5 = a5 << 0x10\n 23936: s1 = s1 << 0x18\n 23939: a5 = a5 | s1\n 23942: a3 = a3 | a5\n 23945: a4 = u8 [a0 + 0x1d]\n 23948: a5 = u8 [a0 + 0x1c]\n 23951: s1 = u8 [a0 + 0x1e]\n 23954: a1 = u8 [a0 + 0x1f]\n 23957: a4 = a4 << 0x8\n 23960: a4 = a4 | a5\n 23963: s1 = s1 << 0x10\n 23966: a1 = a1 << 0x18\n 23969: a1 = a1 | s1\n 23972: a1 = a1 | a4\n 23975: a1 = a1 << 0x20\n 23978: a3 = a3 | a1\n 23981: a1 = u8 [a0 + 0x9]\n 23984: a4 = u8 [a0 + 0x8]\n 23987: a5 = u8 [a0 + 0xa]\n 23990: s1 = u8 [a0 + 0xb]\n 23993: a1 = a1 << 0x8\n 23996: a1 = a1 | a4\n 23999: a5 = a5 << 0x10\n 24002: s1 = s1 << 0x18\n 24005: a5 = a5 | s1\n 24008: a1 = a1 | a5\n 24011: a4 = u8 [a0 + 0xd]\n 24014: a5 = u8 [a0 + 0xc]\n 24017: s1 = u8 [a0 + 0xe]\n 24020: a0 = u8 [a0 + 0xf]\n 24023: a4 = a4 << 0x8\n 24026: a4 = a4 | a5\n 24029: s1 = s1 << 0x10\n 24032: a0 = a0 << 0x18\n 24035: a0 = a0 | s1\n 24038: a0 = a0 | a4\n 24041: a0 = a0 << 0x20\n 24044: a0 = a0 | a1\n 24047: a4 = reverse a0\n 24049: a1 = reverse a3\n 24051: a2 = reverse a2\n 24053: a0 = reverse t0\n 24055: u64 [sp + 0x90] = a0\n 24059: u64 [sp + 0x60] = a2\n 24062: a0 = a0 | a2\n 24065: u64 [sp + 0x98] = a1\n 24069: a1 = a1 | a4\n 24072: a1 = a1 | a0\n 24075: a1 = a1 >> 0x20\n 24078: u64 [sp + 0x68] = a4\n 24081: a0 = a0 | a4\n 24084: a0 = a0 << 0x20\n 24087: a0 = a0 | a1\n 24090: jump @380 if a0 != 0\n      : @368 (gas: 18)\n 24094: s1 = u64 [sp + 0x80]\n 24098: a0 = reverse s1\n 24100: a0 = a0 << 0x20\n 24103: a1 = u64 [sp + 0x70]\n 24106: a1 = reverse a1\n 24108: a2 = a1 >> 0x20\n 24111: a0 = a0 | a2\n 24114: u64 [sp + 0x70] = a0\n 24117: a1 = a1 << 0x20\n 24120: a0 = u64 [sp + 0x88]\n 24124: a0 = reverse a0\n 24126: a0 = a0 >> 0x20\n 24129: a0 = a0 | a1\n 24132: u64 [sp + 0x58] = a0\n 24135: a0 = i32 [sp + 0x98]\n 24139: a1 = 0x20\n 24142: u64 [sp + 0x88] = a0\n 24146: ra = 318, jump @0\n      : @369 [@dyn 159] (gas: 65)\n 24152: a1 = u64 [sp + 0x58]\n 24155: a1 = reverse a1\n 24157: a2 = u64 [sp + 0x70]\n 24160: a2 = reverse a2\n 24162: a3 = s1 >> 0x18\n 24165: u8 [a0 + 0xf] = a3\n 24168: a3 = s1 >> 0x10\n 24171: u8 [a0 + 0xe] = a3\n 24174: a3 = s1 >> 0x8\n 24177: u8 [a0 + 0xd] = a3\n 24180: u8 [a0 + 0xc] = s1\n 24183: u8 [a0 + 11] = 0\n 24186: u8 [a0 + 10] = 0\n 24189: u8 [a0 + 9] = 0\n 24192: u8 [a0 + 8] = 0\n 24195: u8 [a0 + 7] = 0\n 24198: u8 [a0 + 6] = 0\n 24201: u8 [a0 + 5] = 0\n 24204: u8 [a0 + 4] = 0\n 24207: u8 [a0 + 3] = 0\n 24210: u8 [a0 + 2] = 0\n 24213: u8 [a0 + 1] = 0\n 24216: u8 [a0 + 0] = 0\n 24218: u8 [a0 + 0x10] = a2\n 24221: u8 [a0 + 0x18] = a1\n 24224: a3 = a2 >> 0x38\n 24227: u8 [a0 + 0x17] = a3\n 24230: a3 = a2 >> 0x30\n 24233: u8 [a0 + 0x16] = a3\n 24236: a3 = a2 >> 0x28\n 24239: u8 [a0 + 0x15] = a3\n 24242: a3 = a2 >> 0x20\n 24245: u8 [a0 + 0x14] = a3\n 24248: a3 = a2 >> 0x18\n 24251: u8 [a0 + 0x13] = a3\n 24254: a3 = a2 >> 0x10\n 24257: u8 [a0 + 0x12] = a3\n 24260: a2 = a2 >> 0x8\n 24263: u8 [a0 + 0x11] = a2\n 24266: a2 = a1 >> 0x38\n 24269: u8 [a0 + 0x1f] = a2\n 24272: a2 = a1 >> 0x30\n 24275: u8 [a0 + 0x1e] = a2\n 24278: a2 = a1 >> 0x28\n 24281: u8 [a0 + 0x1d] = a2\n 24284: a2 = a1 >> 0x20\n 24287: u8 [a0 + 0x1c] = a2\n 24290: a2 = a1 >> 0x18\n 24293: u8 [a0 + 0x1b] = a2\n 24296: a2 = a1 >> 0x10\n 24299: u8 [a0 + 0x1a] = a2\n 24302: a1 = a1 >> 0x8\n 24305: a2 = u64 [sp + 0x68]\n 24308: a3 = u64 [sp + 0x60]\n 24311: a4 = a2 | a3\n 24314: s1 = 0x100000000\n 24324: a2 = 0xffffffe0\n 24334: a3 = u64 [sp + 0x98]\n 24338: a2 = a3 <u a2\n 24341: a3 = u64 [sp + 0x90]\n 24345: a2 = 0 if a3 != 0\n 24347: u64 [sp + 0x80] = a4\n 24351: a2 = 0 if a4 != 0\n 24353: u8 [a0 + 0x19] = a1\n 24356: jump @380 if a2 == 0\n      : @370 (gas: 4)\n 24360: a0 = u64 [sp + 0x88]\n 24364: i32 a0 = a0 + 0x20\n 24367: a1 = 0x20\n 24370: ra = 320, jump @0\n      : @371 [@dyn 160] (gas: 48)\n 24376: a1 = u64 [sp + 0x78]\n 24379: u8 [a0 + 0x18] = a1\n 24382: a1 = u64 [sp + 0x40]\n 24385: u8 [a0 + 0x1f] = a1\n 24388: a1 = u64 [sp + 0x38]\n 24391: u8 [a0 + 0x1e] = a1\n 24394: a1 = u64 [sp + 0x30]\n 24397: u8 [a0 + 0x1d] = a1\n 24400: a1 = u64 [sp + 0x28]\n 24403: u8 [a0 + 0x1c] = a1\n 24406: a1 = u64 [sp + 0x20]\n 24409: u8 [a0 + 0x1b] = a1\n 24412: a1 = u64 [sp + 0x18]\n 24415: u8 [a0 + 0x1a] = a1\n 24418: a1 = u64 [sp + 0x10]\n 24421: u8 [a0 + 0x19] = a1\n 24424: a1 = s1 + 0xffffffffffffffc0\n 24427: a2 = u64 [sp + 0x98]\n 24431: a1 = a2 <u a1\n 24434: a2 = u64 [sp + 0x90]\n 24438: a1 = 0 if a2 != 0\n 24440: a2 = u64 [sp + 0x80]\n 24444: a1 = 0 if a2 != 0\n 24446: u8 [a0 + 23] = 0\n 24449: u8 [a0 + 22] = 0\n 24452: u8 [a0 + 21] = 0\n 24455: u8 [a0 + 20] = 0\n 24458: u8 [a0 + 19] = 0\n 24461: u8 [a0 + 18] = 0\n 24464: u8 [a0 + 17] = 0\n 24467: u8 [a0 + 16] = 0\n 24470: u8 [a0 + 15] = 0\n 24473: u8 [a0 + 14] = 0\n 24476: u8 [a0 + 13] = 0\n 24479: u8 [a0 + 12] = 0\n 24482: u8 [a0 + 11] = 0\n 24485: u8 [a0 + 10] = 0\n 24488: u8 [a0 + 9] = 0\n 24491: u8 [a0 + 8] = 0\n 24494: u8 [a0 + 7] = 0\n 24497: u8 [a0 + 6] = 0\n 24500: u8 [a0 + 5] = 0\n 24503: u8 [a0 + 4] = 0\n 24506: u8 [a0 + 3] = 0\n 24509: u8 [a0 + 2] = 0\n 24512: u8 [a0 + 1] = 0\n 24515: u8 [a0 + 0] = 0\n 24517: jump @380 if a1 == 0\n      : @372 (gas: 4)\n 24521: s1 = u64 [sp + 0x88]\n 24525: i32 a0 = s1 + 0x40\n 24528: a1 = 0x20\n 24531: ra = 322, jump @0\n      : @373 [@dyn 161] (gas: 71)\n 24537: a1 = u64 [sp + 0xb0]\n 24541: a1 = reverse a1\n 24543: a2 = u64 [sp + 0xb8]\n 24547: a2 = reverse a2\n 24549: a3 = u64 [sp + 0xa0]\n 24553: a3 = reverse a3\n 24555: a4 = u64 [sp + 0xa8]\n 24559: a4 = reverse a4\n 24561: a5 = a4 >> 0x38\n 24564: u8 [a0 + 0x1f] = a5\n 24567: a5 = a4 >> 0x30\n 24570: u8 [a0 + 0x1e] = a5\n 24573: a5 = a4 >> 0x28\n 24576: u8 [a0 + 0x1d] = a5\n 24579: a5 = a4 >> 0x20\n 24582: u8 [a0 + 0x1c] = a5\n 24585: a5 = a4 >> 0x18\n 24588: u8 [a0 + 0x1b] = a5\n 24591: a5 = a4 >> 0x10\n 24594: u8 [a0 + 0x1a] = a5\n 24597: a5 = a4 >> 0x8\n 24600: u8 [a0 + 0x19] = a5\n 24603: u8 [a0 + 0x18] = a4\n 24606: u8 [a0 + 0x10] = a3\n 24609: a4 = a3 >> 0x38\n 24612: u8 [a0 + 0x17] = a4\n 24615: a4 = a3 >> 0x30\n 24618: u8 [a0 + 0x16] = a4\n 24621: a4 = a3 >> 0x28\n 24624: u8 [a0 + 0x15] = a4\n 24627: a4 = a3 >> 0x20\n 24630: u8 [a0 + 0x14] = a4\n 24633: a4 = a3 >> 0x18\n 24636: u8 [a0 + 0x13] = a4\n 24639: a4 = a3 >> 0x10\n 24642: u8 [a0 + 0x12] = a4\n 24645: a3 = a3 >> 0x8\n 24648: u8 [a0 + 0x11] = a3\n 24651: u8 [a0 + 0x8] = a2\n 24654: a3 = a2 >> 0x38\n 24657: u8 [a0 + 0xf] = a3\n 24660: a3 = a2 >> 0x30\n 24663: u8 [a0 + 0xe] = a3\n 24666: a3 = a2 >> 0x28\n 24669: u8 [a0 + 0xd] = a3\n 24672: a3 = a2 >> 0x20\n 24675: u8 [a0 + 0xc] = a3\n 24678: a3 = a2 >> 0x18\n 24681: u8 [a0 + 0xb] = a3\n 24684: a3 = a2 >> 0x10\n 24687: u8 [a0 + 0xa] = a3\n 24690: a2 = a2 >> 0x8\n 24693: u8 [a0 + 0x9] = a2\n 24696: u8 [a0] = a1\n 24698: a2 = a1 >> 0x38\n 24701: u8 [a0 + 0x7] = a2\n 24704: a2 = a1 >> 0x30\n 24707: u8 [a0 + 0x6] = a2\n 24710: a2 = a1 >> 0x28\n 24713: u8 [a0 + 0x5] = a2\n 24716: a2 = a1 >> 0x20\n 24719: u8 [a0 + 0x4] = a2\n 24722: a2 = a1 >> 0x18\n 24725: u8 [a0 + 0x3] = a2\n 24728: a2 = a1 >> 0x10\n 24731: u8 [a0 + 0x2] = a2\n 24734: a1 = a1 >> 0x8\n 24737: u8 [a0 + 0x1] = a1\n 24740: a1 = 0x60\n 24743: a0 = s1\n 24745: ra = 324, jump @0\n      : @374 [@dyn 162] (gas: 19)\n 24751: a1 = u64 [0x20040]\n 24756: a2 = u64 [0x20048]\n 24761: a3 = u64 [0x20050]\n 24766: a4 = u64 [0x20058]\n 24771: u64 [sp + 0x398] = a1\n 24775: u64 [sp + 0x390] = a2\n 24779: u64 [sp + 0x388] = a3\n 24783: u64 [sp + 0x380] = a4\n 24787: i32 a2 = a0 + 0\n 24789: i32 a0 = sp + 0x380\n 24793: a1 = 0x1\n 24796: a3 = 0x60\n 24799: ecalli 5 // 'deposit_event'\n 24801: sp = s0 + 0xfffffffffffffc40\n 24805: ra = u64 [sp + 0x3b8]\n 24809: s0 = u64 [sp + 0x3b0]\n 24813: s1 = u64 [sp + 0x3a8]\n 24817: sp = sp + 0x3c0\n 24821: ret\n      : @375 (gas: 3)\n 24823: a0 = 0x40\n 24826: a1 = 0x20\n 24829: ra = 326, jump @0\n      : @376 [@dyn 163] (gas: 103)\n 24835: a1 = u8 [a0 + 0x11]\n 24838: a2 = u8 [a0 + 0x10]\n 24841: a3 = u8 [a0 + 0x12]\n 24844: a4 = u8 [a0 + 0x13]\n 24847: a1 = a1 << 0x8\n 24850: a1 = a1 | a2\n 24853: a3 = a3 << 0x10\n 24856: a4 = a4 << 0x18\n 24859: a3 = a3 | a4\n 24862: a1 = a1 | a3\n 24865: a2 = u8 [a0 + 0x15]\n 24868: a3 = u8 [a0 + 0x14]\n 24871: a4 = u8 [a0 + 0x16]\n 24874: a5 = u8 [a0 + 0x17]\n 24877: a2 = a2 << 0x8\n 24880: a2 = a2 | a3\n 24883: a4 = a4 << 0x10\n 24886: a5 = a5 << 0x18\n 24889: a4 = a4 | a5\n 24892: a2 = a2 | a4\n 24895: a2 = a2 << 0x20\n 24898: t0 = a2 | a1\n 24901: a2 = u8 [a0 + 0x1]\n 24904: a3 = u8 [a0]\n 24906: a4 = u8 [a0 + 0x2]\n 24909: a5 = u8 [a0 + 0x3]\n 24912: a2 = a2 << 0x8\n 24915: a2 = a2 | a3\n 24918: a4 = a4 << 0x10\n 24921: a5 = a5 << 0x18\n 24924: a4 = a4 | a5\n 24927: a2 = a2 | a4\n 24930: a3 = u8 [a0 + 0x5]\n 24933: a4 = u8 [a0 + 0x4]\n 24936: a5 = u8 [a0 + 0x6]\n 24939: s1 = u8 [a0 + 0x7]\n 24942: a3 = a3 << 0x8\n 24945: a3 = a3 | a4\n 24948: a5 = a5 << 0x10\n 24951: s1 = s1 << 0x18\n 24954: a5 = a5 | s1\n 24957: a3 = a3 | a5\n 24960: a3 = a3 << 0x20\n 24963: a2 = a2 | a3\n 24966: a3 = u8 [a0 + 0x19]\n 24969: a4 = u8 [a0 + 0x18]\n 24972: a5 = u8 [a0 + 0x1a]\n 24975: s1 = u8 [a0 + 0x1b]\n 24978: a3 = a3 << 0x8\n 24981: a3 = a3 | a4\n 24984: a5 = a5 << 0x10\n 24987: s1 = s1 << 0x18\n 24990: a5 = a5 | s1\n 24993: a3 = a3 | a5\n 24996: a4 = u8 [a0 + 0x1d]\n 24999: a5 = u8 [a0 + 0x1c]\n 25002: s1 = u8 [a0 + 0x1e]\n 25005: a1 = u8 [a0 + 0x1f]\n 25008: a4 = a4 << 0x8\n 25011: a4 = a4 | a5\n 25014: s1 = s1 << 0x10\n 25017: a1 = a1 << 0x18\n 25020: a1 = a1 | s1\n 25023: a1 = a1 | a4\n 25026: a1 = a1 << 0x20\n 25029: a3 = a3 | a1\n 25032: a1 = u8 [a0 + 0x9]\n 25035: a4 = u8 [a0 + 0x8]\n 25038: a5 = u8 [a0 + 0xa]\n 25041: s1 = u8 [a0 + 0xb]\n 25044: a1 = a1 << 0x8\n 25047: a1 = a1 | a4\n 25050: a5 = a5 << 0x10\n 25053: s1 = s1 << 0x18\n 25056: a5 = a5 | s1\n 25059: a1 = a1 | a5\n 25062: a4 = u8 [a0 + 0xd]\n 25065: a5 = u8 [a0 + 0xc]\n 25068: s1 = u8 [a0 + 0xe]\n 25071: a0 = u8 [a0 + 0xf]\n 25074: a4 = a4 << 0x8\n 25077: a4 = a4 | a5\n 25080: s1 = s1 << 0x10\n 25083: a0 = a0 << 0x18\n 25086: a0 = a0 | s1\n 25089: a0 = a0 | a4\n 25092: a0 = a0 << 0x20\n 25095: a0 = a0 | a1\n 25098: s1 = reverse a0\n 25100: a1 = reverse a3\n 25102: a2 = reverse a2\n 25104: a0 = reverse t0\n 25106: u64 [sp + 0xb8] = a0\n 25110: u64 [sp + 0xb0] = a2\n 25114: a0 = a0 | a2\n 25117: a2 = a1\n 25119: a1 = a1 | s1\n 25122: a1 = a1 | a0\n 25125: a1 = a1 >> 0x20\n 25128: a0 = a0 | s1\n 25131: a0 = a0 << 0x20\n 25134: a0 = a0 | a1\n 25137: jump @380 if a0 != 0\n      : @377 (gas: 5)\n 25141: u64 [sp + 0xa8] = a2\n 25145: i32 a0 = a2 + 0\n 25147: a1 = 0x20\n 25150: u64 [sp + 0xa0] = a0\n 25154: ra = 328, jump @0\n      : @378 [@dyn 164] (gas: 50)\n 25160: u8 [a0 + 31] = 0\n 25163: u8 [a0 + 30] = 0\n 25166: u8 [a0 + 29] = 0\n 25169: u8 [a0 + 28] = 0\n 25172: u8 [a0 + 27] = 0\n 25175: u8 [a0 + 26] = 0\n 25178: u8 [a0 + 25] = 0\n 25181: u8 [a0 + 24] = 0\n 25184: u8 [a0 + 23] = 0\n 25187: u8 [a0 + 22] = 0\n 25190: u8 [a0 + 21] = 0\n 25193: u8 [a0 + 20] = 0\n 25196: u8 [a0 + 19] = 0\n 25199: u8 [a0 + 18] = 0\n 25202: u8 [a0 + 17] = 0\n 25205: u8 [a0 + 16] = 0\n 25208: u8 [a0 + 15] = 0\n 25211: u8 [a0 + 14] = 0\n 25214: u8 [a0 + 13] = 0\n 25217: u8 [a0 + 12] = 0\n 25220: u8 [a0 + 11] = 0\n 25223: u8 [a0 + 10] = 0\n 25226: u8 [a0 + 9] = 0\n 25229: u8 [a0 + 8] = 0\n 25232: u8 [a0 + 7] = 0\n 25235: u8 [a0 + 6] = 0\n 25238: u8 [a0 + 5] = 0\n 25241: u8 [a0 + 4] = 0\n 25244: u8 [a0 + 3] = 0xa0\n 25249: u8 [a0 + 2] = 0x79\n 25253: u8 [a0 + 1] = 0xc3\n 25258: u8 [a0 + 0] = 0x8\n 25261: a1 = u64 [sp + 0xa8]\n 25265: a0 = a1 + 0x4\n 25268: a1 = a0 <u a1\n 25271: a3 = u64 [sp + 0xb8]\n 25275: a2 = a3 + a1\n 25278: a3 = a2 <u a3\n 25281: a3 = a1 if a1 == 0\n 25284: a3 = a3 + s1\n 25287: a1 = a3 <u s1\n 25290: a4 = u64 [sp + 0xb0]\n 25294: a4 = a4 + a1\n 25297: u64 [sp + 0xc8] = a2\n 25301: u64 [sp + 0xc0] = a0\n 25305: u64 [sp + 0xd0] = a3\n 25309: a0 = sp + 0xe0\n 25313: a1 = sp + 0xc0\n 25317: u64 [sp + 0xd8] = a4\n 25321: ra = 330, jump @315\n      : @379 [@dyn 165] (gas: 30)\n 25327: a0 = u64 [sp + 0xe8]\n 25331: t0 = u64 [sp + 0xf8]\n 25335: t1 = u64 [sp + 0xe0]\n 25339: a3 = u64 [sp + 0xf0]\n 25343: a1 = u64 [sp + 0xb8]\n 25347: a4 = a0 ^ a1\n 25350: a5 = a0 <u a1\n 25353: t2 = a1\n 25355: a2 = u64 [sp + 0xa8]\n 25359: a1 = t1 <u a2\n 25362: a5 = a1 if a4 == 0\n 25365: a4 = a3 - s1\n 25368: a3 = a3 <u s1\n 25371: s1 = u64 [sp + 0xb0]\n 25375: s1 = t0 - s1\n 25378: s1 = s1 - a3\n 25381: a3 = a4 <u a5\n 25384: s1 = s1 - a3\n 25387: a4 = a4 - a5\n 25390: a0 = a0 - t2\n 25393: a1 = a0 - a1\n 25396: a0 = t1 - a2\n 25399: a1 = a1 | s1\n 25402: a2 = a0 | a4\n 25405: a2 = a2 | a1\n 25408: a1 = a1 | a4\n 25411: a2 = a2 >> 0x20\n 25414: a1 = a1 << 0x20\n 25417: a1 = a1 | a2\n 25420: jump @394 if a1 == 0\n      : @380 (gas: 1)\n 25424: trap\n      : @381 (gas: 11)\n 25425: ra = 0x14c\n 25429: sp = sp + 0xffffffffffffffc0\n 25432: u64 [sp + 0x38] = ra\n 25435: u64 [sp + 0x30] = s0\n 25438: u64 [sp + 0x28] = s1\n 25441: s0 = sp + 0x40\n 25444: sp = sp & 0xffffffffffffffe0\n 25447: a0 = 0x40\n 25450: a1 = 0x20\n 25453: ra = 0x118\n 25457: jump @0\n      : @382 [@dyn 166] (gas: 8)\n 25460: u64 [sp + 304] = 0\n 25464: u64 [sp + 296] = 0\n 25468: u64 [sp + 288] = 0\n 25472: a0 = 0x4e487b7100000000\n 25482: a1 = sp + 0x120\n 25486: u64 [sp + 0x138] = a0\n 25490: a0 = 0\n 25492: ra = 334, jump @23\n      : @383 [@dyn 167] (gas: 8)\n 25498: u64 [sp + 280] = 0\n 25502: u64 [sp + 272] = 0\n 25506: u64 [sp + 256] = 0x11\n 25511: a0 = 0x4\n 25514: a1 = sp + 0x100\n 25518: u64 [sp + 264] = 0\n 25522: ra = 0x158\n 25526: jump @23\n      : @384 (gas: 8)\n 25529: u64 [sp + 496] = 0\n 25533: u64 [sp + 488] = 0\n 25537: u64 [sp + 480] = 0\n 25541: a0 = 0x4e487b7100000000\n 25551: a1 = sp + 0x1e0\n 25555: u64 [sp + 0x1f8] = a0\n 25559: a0 = 0\n 25561: ra = 336, jump @23\n      : @385 [@dyn 168] (gas: 8)\n 25567: u64 [sp + 472] = 0\n 25571: u64 [sp + 464] = 0\n 25575: u64 [sp + 448] = 0x11\n 25580: a0 = 0x4\n 25583: a1 = sp + 0x1c0\n 25587: u64 [sp + 456] = 0\n 25591: ra = 0x158\n 25595: jump @23\n      : @386 (gas: 8)\n 25598: u64 [sp + 560] = 0\n 25602: u64 [sp + 552] = 0\n 25606: u64 [sp + 544] = 0\n 25610: a0 = 0x4e487b7100000000\n 25620: a1 = sp + 0x220\n 25624: u64 [sp + 0x238] = a0\n 25628: a0 = 0\n 25630: ra = 338, jump @23\n      : @387 [@dyn 169] (gas: 8)\n 25636: u64 [sp + 536] = 0\n 25640: u64 [sp + 528] = 0\n 25644: u64 [sp + 512] = 0x11\n 25649: a0 = 0x4\n 25652: a1 = sp + 0x200\n 25656: u64 [sp + 520] = 0\n 25660: ra = 0x158\n 25664: jump @23\n      : @388 (gas: 8)\n 25667: u64 [sp + 368] = 0\n 25671: u64 [sp + 360] = 0\n 25675: u64 [sp + 352] = 0\n 25679: a0 = 0x4e487b7100000000\n 25689: a1 = sp + 0x160\n 25693: u64 [sp + 0x178] = a0\n 25697: a0 = 0\n 25699: ra = 340, jump @23\n      : @389 [@dyn 170] (gas: 8)\n 25705: u64 [sp + 344] = 0\n 25709: u64 [sp + 336] = 0\n 25713: u64 [sp + 320] = 0x11\n 25718: a0 = 0x4\n 25721: a1 = sp + 0x140\n 25725: u64 [sp + 328] = 0\n 25729: ra = 0x158\n 25733: jump @23\n      : @390 (gas: 8)\n 25736: u64 [sp + 432] = 0\n 25740: u64 [sp + 424] = 0\n 25744: u64 [sp + 416] = 0\n 25748: a0 = 0x4e487b7100000000\n 25758: a1 = sp + 0x1a0\n 25762: u64 [sp + 0x1b8] = a0\n 25766: a0 = 0\n 25768: ra = 342, jump @23\n      : @391 [@dyn 171] (gas: 7)\n 25774: u64 [sp + 408] = 0\n 25778: u64 [sp + 400] = 0\n 25782: u64 [sp + 384] = 0x11\n 25787: a0 = 0x4\n 25790: a1 = sp + 0x180\n 25794: u64 [sp + 392] = 0\n 25798: ra = 344, jump @23\n      : @392 [@dyn 172] (gas: 3)\n 25804: a1 = 0x24\n 25807: a0 = 0\n 25809: ra = 346, jump @0\n      : @393 [@dyn 173] (gas: 5)\n 25815: i32 a1 = a0 + 0\n 25817: a0 = 0x1\n 25820: a2 = 0x24\n 25823: ecalli 10 // 'seal_return'\n 25825: fallthrough\n      : @394 (gas: 4)\n 25826: i32 s1 = a0 + 0\n 25828: a0 = u64 [sp + 0xa0]\n 25832: a1 = s1\n 25834: ra = 348, jump @0\n      : @395 [@dyn 174] (gas: 7)\n 25840: i32 a1 = a0 + 0\n 25842: a0 = 0x1\n 25845: a2 = s1\n 25847: ecalli 10 // 'seal_return'\n 25849: a0 = 0\n 25851: ra = 0x15e\n 25855: jump @25\n      : @396 [export #0: 'call'] (gas: 2)\n 25858: a0 = 0\n 25860: ra = 350, jump @25\n      : @397 [@dyn 175] [export #1: 'deploy'] (gas: 2)\n 25866: a0 = 0x1\n 25869: ra = 352, jump @25\n      : @398 [@dyn 176] (gas: 27)\n 25875: sp = sp + 0xffffffffffffff80\n 25878: u64 [sp + 0x78] = ra\n 25881: u64 [sp + 0x70] = s0\n 25884: u64 [sp + 0x68] = s1\n 25887: s0 = sp + 0x80\n 25891: sp = sp & 0xfffffffffffffff0\n 25894: t0 = u64 [a1]\n 25896: t1 = u64 [a1 + 0x8]\n 25899: t2 = u64 [a1 + 0x10]\n 25902: a1 = u64 [a1 + 0x18]\n 25905: a3 = u64 [a2]\n 25907: a4 = u64 [a2 + 0x8]\n 25910: a5 = u64 [a2 + 0x10]\n 25913: a2 = u64 [a2 + 0x18]\n 25916: s1 = a0\n 25918: u64 [sp + 0x18] = a2\n 25921: u64 [sp + 0x10] = a5\n 25924: u64 [sp + 0x8] = a4\n 25927: u64 [sp] = a3\n 25929: u64 [sp + 0x38] = a1\n 25932: u64 [sp + 0x30] = t2\n 25935: u64 [sp + 0x28] = t1\n 25938: a0 = sp + 0x40\n 25941: a1 = sp + 0x20\n 25944: a2 = sp\n 25946: u64 [sp + 0x20] = t0\n 25949: ra = 354, jump @103\n      : @399 [@dyn 177] (gas: 14)\n 25955: a0 = u64 [sp + 0x50]\n 25958: a1 = u64 [sp + 0x58]\n 25961: a2 = u64 [sp + 0x40]\n 25964: a3 = u64 [sp + 0x48]\n 25967: u64 [s1 + 0x10] = a0\n 25970: u64 [s1 + 0x18] = a1\n 25973: u64 [s1] = a2\n 25975: u64 [s1 + 0x8] = a3\n 25978: sp = s0 + 0xffffffffffffff80\n 25981: ra = u64 [sp + 0x78]\n 25984: s0 = u64 [sp + 0x70]\n 25987: s1 = u64 [sp + 0x68]\n 25990: sp = sp + 0x80\n 25994: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"buyPosition(bool)": "10b3f7be",
							"getUserPosition(address,bool)": "59985e23",
							"noPrice()": "b066bc79",
							"positions(address,bool)": "e494d2d4",
							"question()": "3fad9ae0",
							"sellPosition(bool,uint256)": "c4f94352",
							"yesPrice()": "50dfdbfb"
						}
					},
					"irOptimized": "/// @use-src 0:\"contracts/PredictionMarket.sol\"\nobject \"MiniPredictionMarket_166\" {\n    code {\n        {\n            /// @src 0:60:1868  \"contract MiniPredictionMarket {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            constructor_MiniPredictionMarket()\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"MiniPredictionMarket_166_deployed\"), datasize(\"MiniPredictionMarket_166_deployed\"))\n            return(_1, datasize(\"MiniPredictionMarket_166_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift_0(value, toInsert) -> result\n        {\n            let mask := 0xffffffff\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function cleanup_rational_by(value) -> cleaned\n        { cleaned := value }\n        function cleanup_uint32(value) -> cleaned\n        {\n            cleaned := and(value, 0xffffffff)\n        }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_rational_by_to_uint32(value) -> converted\n        {\n            converted := cleanup_uint32(identity(cleanup_rational_by(value)))\n        }\n        function prepare_store_uint32(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_rational_by_to_uint32(slot, value)\n        {\n            let convertedValue := convert_rational_by_to_uint32(value)\n            sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_uint32(convertedValue)))\n        }\n        function shift_left_32(value) -> newValue\n        { newValue := shl(32, value) }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := 0xffffffff00000000\n            toInsert := shift_left_32(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function update_storage_value_offset_t_rational_by_to_t_uint32(slot, value)\n        {\n            let convertedValue := convert_rational_by_to_uint32(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint32(convertedValue)))\n        }\n        function panic_error_0x22()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n        function extract_byte_array_length(data) -> length\n        {\n            length := div(data, 2)\n            let outOfPlaceEncoding := and(data, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32)) { panic_error_0x22() }\n        }\n        function array_dataslot_bytes_storage_ptr(ptr) -> data\n        {\n            data := ptr\n            mstore(0, ptr)\n            data := keccak256(0, 0x20)\n        }\n        function divide_by_ceil(value) -> result\n        {\n            result := div(add(value, 31), 32)\n        }\n        function shift_left_dynamic(bits, value) -> newValue\n        { newValue := shl(bits, value) }\n        function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n        {\n            let shiftBits := mul(shiftBytes, 8)\n            let mask := shift_left_dynamic(shiftBits, not(0))\n            toInsert := shift_left_dynamic(shiftBits, toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function cleanup_uint256(value) -> cleaned\n        { cleaned := value }\n        function convert_uint256_to_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_uint256(value)))\n        }\n        function prepare_store_uint256(value) -> ret\n        { ret := value }\n        function update_storage_value_uint256_to_uint256(slot, offset, value)\n        {\n            let convertedValue := convert_uint256_to_uint256(value)\n            sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_uint256(convertedValue)))\n        }\n        function zero_value_for_split_uint256() -> ret\n        { ret := 0 }\n        function storage_set_to_zero_uint256(slot, offset)\n        {\n            let zero := zero_value_for_split_uint256()\n            update_storage_value_uint256_to_uint256(slot, offset, zero)\n        }\n        function clear_storage_range_bytes1(start, end)\n        {\n            for { } lt(start, end) { start := add(start, 1) }\n            {\n                storage_set_to_zero_uint256(start, 0)\n            }\n        }\n        function clean_up_bytearray_end_slots_bytes_storage_ptr(array, len, startIndex)\n        {\n            if gt(len, 31)\n            {\n                let dataArea := array_dataslot_bytes_storage_ptr(array)\n                let deleteStart := add(dataArea, divide_by_ceil(startIndex))\n                if lt(startIndex, 32) { deleteStart := dataArea }\n                clear_storage_range_bytes1(deleteStart, add(dataArea, divide_by_ceil(len)))\n            }\n        }\n        function copy_literal_to_storage_0eafa786afe5cb1742dc38f8be5af54e623d5006bce9d1cf3262e2cb1b219a13(slot)\n        {\n            let oldLen := extract_byte_array_length(sload(slot))\n            clean_up_bytearray_end_slots_bytes_storage_ptr(slot, oldLen, 29)\n            sstore(slot, add(\"Will BTC reach $100K in 2025?\", 58))\n        }\n        function update_storage_value_offset_stringliteral_0eaf_to_string(slot)\n        {\n            copy_literal_to_storage_0eafa786afe5cb1742dc38f8be5af54e623d5006bce9d1cf3262e2cb1b219a13(slot)\n        }\n        function constructor_MiniPredictionMarket()\n        {\n            /// @src 0:168:172  \"5000\"\n            let expr := 0x1388\n            update_storage_value_offset_rational_by_to_uint32(0x00, expr)\n            /// @src 0:213:217  \"5000\"\n            let expr_1 := 0x1388\n            update_storage_value_offset_t_rational_by_to_t_uint32(0x00, expr_1)\n            /// @src 0:260:291  \"\\\"Will BTC reach $100K in 2025?\\\"\"\n            update_storage_value_offset_stringliteral_0eaf_to_string(0x01)\n        }\n    }\n    /// @use-src 0:\"contracts/PredictionMarket.sol\"\n    object \"MiniPredictionMarket_166_deployed\" {\n        code {\n            {\n                /// @src 0:60:1868  \"contract MiniPredictionMarket {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x10b3f7be { external_fun_buyPosition() }\n                    case 0x3fad9ae0 { external_fun_question() }\n                    case 0x50dfdbfb { external_fun_yesPrice() }\n                    case 0x59985e23 {\n                        external_fun_getUserPosition()\n                    }\n                    case 0xb066bc79 { external_fun_noPrice() }\n                    case 0xc4f94352 { external_fun_sellPosition() }\n                    case 0xe494d2d4 { external_fun_positions() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function validator_revert_bool(value)\n            {\n                if iszero(eq(value, cleanup_bool(value))) { revert(0, 0) }\n            }\n            function abi_decode_t_bool(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_bool(value)\n            }\n            function abi_decode_bool(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_buyPosition()\n            {\n                let param := abi_decode_bool(4, calldatasize())\n                fun_buyPosition(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function panic_error_0x00()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x00)\n                revert(0, 0x24)\n            }\n            function panic_error_0x22()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := div(data, 2)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32)) { panic_error_0x22() }\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_string_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function abi_encode_string_storage(value, pos) -> ret\n            {\n                let slotValue := sload(value)\n                let length := extract_byte_array_length(slotValue)\n                pos := array_storeLengthForEncoding_string(pos, length)\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(pos, and(slotValue, not(0xff)))\n                    ret := add(pos, mul(0x20, iszero(iszero(length))))\n                }\n                case 1 {\n                    let dataPos := array_dataslot_string_storage(value)\n                    let i := 0\n                    for { } lt(i, length) { i := add(i, 0x20) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, 1)\n                    }\n                    ret := add(pos, i)\n                }\n            }\n            function abi_encodeUpdatedPos_string_storage(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_string_storage(value0, pos)\n            }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_string_storage(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            function read_from_storage_dynamic_split_string(slot, offset) -> value\n            {\n                if gt(offset, 0) { panic_error_0x00() }\n                value := copy_array_from_storage_to_memory_string(slot)\n            }\n            /// @ast-id 10 @src 0:235:291  \"string public question = \\\"Will BTC reach $100K in 2025?\\\"\"\n            function getter_fun_question() -> ret_mpos\n            {\n                let slot := 1\n                let offset := 0\n                ret_mpos := read_from_storage_dynamic_split_string(slot, offset)\n            }\n            /// @src 0:60:1868  \"contract MiniPredictionMarket {...\"\n            function array_length_string(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_string_fromStack(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                mcopy(dst, src, length)\n                mstore(add(dst, length), 0)\n            }\n            function abi_encode_string_memory_ptr(value, pos) -> end\n            {\n                let length := array_length_string(value)\n                pos := array_storeLengthForEncoding_string_fromStack(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, round_up_to_mul_of(length))\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_string_memory_ptr(value0, tail)\n            }\n            function external_fun_question()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_question()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_string(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_uint32(value) -> cleaned\n            {\n                cleaned := and(value, 0xffffffff)\n            }\n            function extract_from_storage_value_dynamict_uint32(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint32(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint32(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint32(sload(slot), offset)\n            }\n            /// @ast-id 4 @src 0:143:172  \"uint32 public yesPrice = 5000\"\n            function getter_fun_yesPrice() -> ret\n            {\n                let slot := 0\n                let offset := 0\n                ret := read_from_storage_split_dynamic_uint32(slot, offset)\n            }\n            /// @src 0:60:1868  \"contract MiniPredictionMarket {...\"\n            function cleanup_uint32(value) -> cleaned\n            {\n                cleaned := and(value, 0xffffffff)\n            }\n            function abi_encode_uint32_to_uint32(value, pos)\n            {\n                mstore(pos, cleanup_uint32(value))\n            }\n            function abi_encode_uint32(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint32_to_uint32(value0, add(headStart, 0))\n            }\n            function external_fun_yesPrice()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_yesPrice()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint32(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function abi_decode_addresst_bool(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_t_bool(add(headStart, offset_1), dataEnd)\n            }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n            }\n            function external_fun_getUserPosition()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_bool(4, calldatasize())\n                let ret := fun_getUserPosition(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            /// @ast-id 7 @src 0:189:217  \"uint32 public noPrice = 5000\"\n            function getter_fun_noPrice() -> ret\n            {\n                let slot := 0\n                let offset := 4\n                ret := read_from_storage_split_dynamic_uint32(slot, offset)\n            }\n            /// @src 0:60:1868  \"contract MiniPredictionMarket {...\"\n            function external_fun_noPrice()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_noPrice()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint32(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_boolt_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function external_fun_sellPosition()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_boolt_uint256(4, calldatasize())\n                fun_sellPosition(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function mapping_index_access_mapping_address_mapping_bool_uint256_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, convert_address_to_address(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function convert_bool_to_bool(value) -> converted\n            {\n                converted := cleanup_bool(value)\n            }\n            function mapping_index_access_mapping_bool_uint256_of_bool(slot, key) -> dataSlot\n            {\n                mstore(0, convert_bool_to_bool(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 16 @src 0:341:399  \"mapping(address => mapping(bool => uint)) public positions\"\n            function getter_fun_positions(key, key_1) -> ret\n            {\n                let slot := 2\n                let offset := 0\n                slot := mapping_index_access_mapping_address_mapping_bool_uint256_of_address(slot, key)\n                slot := mapping_index_access_mapping_bool_uint256_of_bool(slot, key_1)\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:60:1868  \"contract MiniPredictionMarket {...\"\n            function external_fun_positions()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_addresst_bool(4, calldatasize())\n                let ret := getter_fun_positions(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n            }\n            function store_literal_in_memory_fbff1a1f6c2af74648d360c36de5f47b5c561797f493e9c58d33289d0ad24acc(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Amount must be positive\")\n            }\n            function abi_encode_stringliteral_fbff1a1f6c2af74648d360c36de5f47b5c561797f493e9c58d33289d0ad24acc(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 23)\n                store_literal_in_memory_fbff1a1f6c2af74648d360c36de5f47b5c561797f493e9c58d33289d0ad24acc(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_fbff(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_fbff1a1f6c2af74648d360c36de5f47b5c561797f493e9c58d33289d0ad24acc(tail)\n            }\n            function require_helper_stringliteral_fbff(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_fbff(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                sum := add(x, y)\n                if gt(x, sum) { panic_error_0x11() }\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_32_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_32_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint32(value) -> converted\n            {\n                converted := cleanup_uint32(identity(cleanup_rational_by(value)))\n            }\n            function extract_from_storage_value_offset_t_uint32(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint32(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_t_uint32(slot) -> value\n            {\n                value := extract_from_storage_value_offset_t_uint32(sload(slot))\n            }\n            function checked_sub_uint32(x, y) -> diff\n            {\n                x := cleanup_uint32(x)\n                y := cleanup_uint32(y)\n                diff := sub(x, y)\n                if gt(diff, 0xffffffff) { panic_error_0x11() }\n            }\n            function update_byte_slice_shift_0(value, toInsert) -> result\n            {\n                let mask := 0xffffffff\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint32_to_uint32(value) -> converted\n            {\n                converted := cleanup_uint32(identity(cleanup_uint32(value)))\n            }\n            function prepare_store_uint32(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_t_uint32_to_t_uint32(slot, value)\n            {\n                let convertedValue := convert_uint32_to_uint32(value)\n                sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_uint32(convertedValue)))\n            }\n            function shift_right_32_unsigned(value) -> newValue\n            { newValue := shr(32, value) }\n            function extract_from_storage_value_offset_uint32(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint32(shift_right_32_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint32(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint32(sload(slot))\n            }\n            function checked_add_uint32(x, y) -> sum\n            {\n                x := cleanup_uint32(x)\n                y := cleanup_uint32(y)\n                sum := add(x, y)\n                if gt(sum, 0xffffffff) { panic_error_0x11() }\n            }\n            function shift_left_32(value) -> newValue\n            { newValue := shl(32, value) }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := 0xffffffff00000000\n                toInsert := shift_left_32(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_uint32_to_uint32(slot, value)\n            {\n                let convertedValue := convert_uint32_to_uint32(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint32(convertedValue)))\n            }\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_address_bool_uint256(headStart, value0, value1, value2) -> tail\n            {\n                tail := add(headStart, 96)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_bool(value1, add(headStart, 32))\n                abi_encode_uint256_to_uint256(value2, add(headStart, 64))\n            }\n            /// @ast-id 84 @src 0:574:1060  \"function buyPosition(bool isYes) public payable {...\"\n            function fun_buyPosition(var_isYes)\n            {\n                /// @src 0:641:650  \"msg.value\"\n                let expr := callvalue()\n                /// @src 0:653:654  \"0\"\n                let expr_1 := 0x00\n                /// @src 0:641:654  \"msg.value > 0\"\n                let expr_2 := gt(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))\n                /// @src 0:633:682  \"require(msg.value > 0, \\\"Amount must be positive\\\")\"\n                require_helper_stringliteral_fbff(expr_2)\n                /// @src 0:762:771  \"msg.value\"\n                let expr_3 := callvalue()\n                /// @src 0:730:739  \"positions\"\n                let _1_slot := 0x02\n                let expr_45_slot := _1_slot\n                /// @src 0:740:750  \"msg.sender\"\n                let expr_4 := caller()\n                /// @src 0:730:751  \"positions[msg.sender]\"\n                let _1 := mapping_index_access_mapping_address_mapping_bool_uint256_of_address(expr_45_slot, expr_4)\n                let _slot := _1\n                let expr_49_slot := _slot\n                /// @src 0:752:757  \"isYes\"\n                let _2 := var_isYes\n                let expr_5 := _2\n                /// @src 0:730:758  \"positions[msg.sender][isYes]\"\n                let _3 := mapping_index_access_mapping_bool_uint256_of_bool(expr_49_slot, expr_5)\n                /// @src 0:730:771  \"positions[msg.sender][isYes] += msg.value\"\n                let _4 := read_from_storage_split_offset_uint256(_3)\n                let expr_6 := checked_add_uint256(_4, expr_3)\n                update_storage_value_offset_uint256_to_uint256(_3, expr_6)\n                /// @src 0:828:833  \"isYes\"\n                let _5 := var_isYes\n                let expr_7 := _5\n                /// @src 0:824:983  \"if (isYes) {...\"\n                switch expr_7\n                case 0 {\n                    /// @src 0:939:942  \"100\"\n                    let expr_8 := 0x64\n                    /// @src 0:927:942  \"yesPrice -= 100\"\n                    let _6 := convert_rational_by_to_uint32(expr_8)\n                    let _7 := read_from_storage_split_offset_t_uint32(0x00)\n                    let expr_9 := checked_sub_uint32(_7, _6)\n                    update_storage_value_offset_t_uint32_to_t_uint32(0x00, expr_9)\n                    /// @src 0:968:971  \"100\"\n                    let expr_10 := 0x64\n                    /// @src 0:957:971  \"noPrice += 100\"\n                    let _8 := convert_rational_by_to_uint32(expr_10)\n                    let _9 := read_from_storage_split_offset_uint32(0x00)\n                    let expr_11 := checked_add_uint32(_9, _8)\n                    update_storage_value_offset_uint32_to_uint32(0x00, expr_11)\n                }\n                default /// @src 0:824:983  \"if (isYes) {...\"\n                {\n                    /// @src 0:862:865  \"100\"\n                    let expr_12 := 0x64\n                    /// @src 0:850:865  \"yesPrice += 100\"\n                    let _10 := convert_rational_by_to_uint32(expr_12)\n                    let _11 := read_from_storage_split_offset_t_uint32(0x00)\n                    let expr_13 := checked_add_uint32(_11, _10)\n                    update_storage_value_offset_t_uint32_to_t_uint32(0x00, expr_13)\n                    /// @src 0:891:894  \"100\"\n                    let expr_14 := 0x64\n                    /// @src 0:880:894  \"noPrice -= 100\"\n                    let _12 := convert_rational_by_to_uint32(expr_14)\n                    let _13 := read_from_storage_split_offset_uint32(0x00)\n                    let expr_15 := checked_sub_uint32(_13, _12)\n                    update_storage_value_offset_uint32_to_uint32(0x00, expr_15)\n                }\n                /// @src 0:1023:1033  \"msg.sender\"\n                let expr_16 := caller()\n                /// @src 0:1035:1040  \"isYes\"\n                let _14 := var_isYes\n                let expr_17 := _14\n                /// @src 0:1042:1051  \"msg.value\"\n                let expr_18 := callvalue()\n                /// @src 0:1008:1052  \"PositionBought(msg.sender, isYes, msg.value)\"\n                let _15 := 0xce33b1a575fb35da3d3f46cea9fa626686e5725921cff95e22f86d4727f71bd1\n                let _16 := allocate_unbounded()\n                let _17 := abi_encode_address_bool_uint256(_16, expr_16, expr_17, expr_18)\n                log1(_16, sub(_17, _16), _15)\n            }\n            /// @src 0:60:1868  \"contract MiniPredictionMarket {...\"\n            function zero_value_for_split_uint256() -> ret\n            { ret := 0 }\n            /// @ast-id 165 @src 0:1739:1865  \"function getUserPosition(address user, bool isYes) public view returns (uint) {...\"\n            function fun_getUserPosition(var_user, var_isYes) -> var\n            {\n                /// @src 0:1811:1815  \"uint\"\n                let zero_uint256 := zero_value_for_split_uint256()\n                var := zero_uint256\n                /// @src 0:1835:1844  \"positions\"\n                let _21_slot := 0x02\n                let expr_158_slot := _21_slot\n                /// @src 0:1845:1849  \"user\"\n                let _1 := var_user\n                let expr := _1\n                /// @src 0:1835:1850  \"positions[user]\"\n                let _2 := mapping_index_access_mapping_address_mapping_bool_uint256_of_address(expr_158_slot, expr)\n                let _24_slot := _2\n                let expr_160_slot := _24_slot\n                /// @src 0:1851:1856  \"isYes\"\n                let _3 := var_isYes\n                let expr_1 := _3\n                /// @src 0:1835:1857  \"positions[user][isYes]\"\n                let _4 := mapping_index_access_mapping_bool_uint256_of_bool(expr_160_slot, expr_1)\n                let _5 := read_from_storage_split_offset_uint256(_4)\n                let expr_2 := _5\n                /// @src 0:1828:1857  \"return positions[user][isYes]\"\n                var := expr_2\n                leave\n            }\n            /// @src 0:60:1868  \"contract MiniPredictionMarket {...\"\n            function store_literal_in_memory_5a1b57fa73cacc8a7f779f13c41725105345b96ea20f4cc435b0cbf0d88a02b7(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Insufficient position\")\n            }\n            function abi_encode_stringliteral_5a1b(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 21)\n                store_literal_in_memory_5a1b57fa73cacc8a7f779f13c41725105345b96ea20f4cc435b0cbf0d88a02b7(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_5a1b(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_5a1b(tail)\n            }\n            function require_helper_stringliteral_5a1b(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_5a1b(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                diff := sub(x, y)\n                if gt(diff, x) { panic_error_0x11() }\n            }\n            function convert_uint160_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_address_payable(value)\n            }\n            function convert_address_payable_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function revert_forward()\n            {\n                let pos := allocate_unbounded()\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            /// @ast-id 149 @src 0:1096:1701  \"function sellPosition(bool isYes, uint amount) public {...\"\n            function fun_sellPosition(var_isYes, var_amount)\n            {\n                /// @src 0:1169:1178  \"positions\"\n                let _28_slot := 0x02\n                let expr_92_slot := _28_slot\n                /// @src 0:1179:1189  \"msg.sender\"\n                let expr := caller()\n                /// @src 0:1169:1190  \"positions[msg.sender]\"\n                let _1 := mapping_index_access_mapping_address_mapping_bool_uint256_of_address(expr_92_slot, expr)\n                let _30_slot := _1\n                let expr_95_slot := _30_slot\n                /// @src 0:1191:1196  \"isYes\"\n                let _2 := var_isYes\n                let expr_1 := _2\n                /// @src 0:1169:1197  \"positions[msg.sender][isYes]\"\n                let _3 := mapping_index_access_mapping_bool_uint256_of_bool(expr_95_slot, expr_1)\n                let _4 := read_from_storage_split_offset_uint256(_3)\n                let expr_2 := _4\n                /// @src 0:1201:1207  \"amount\"\n                let _5 := var_amount\n                let expr_3 := _5\n                /// @src 0:1169:1207  \"positions[msg.sender][isYes] >= amount\"\n                let expr_4 := iszero(lt(cleanup_uint256(expr_2), cleanup_uint256(expr_3)))\n                /// @src 0:1161:1233  \"require(positions[msg.sender][isYes] >= amount, \\\"Insufficient position\\\")\"\n                require_helper_stringliteral_5a1b(expr_4)\n                /// @src 0:1314:1320  \"amount\"\n                let _6 := var_amount\n                let expr_5 := _6\n                /// @src 0:1282:1291  \"positions\"\n                let _36_slot := 0x02\n                let expr_103_slot := _36_slot\n                /// @src 0:1292:1302  \"msg.sender\"\n                let expr_6 := caller()\n                /// @src 0:1282:1303  \"positions[msg.sender]\"\n                let _7 := mapping_index_access_mapping_address_mapping_bool_uint256_of_address(expr_103_slot, expr_6)\n                let _38_slot := _7\n                let expr_slot := _38_slot\n                /// @src 0:1304:1309  \"isYes\"\n                let _8 := var_isYes\n                let expr_7 := _8\n                /// @src 0:1282:1310  \"positions[msg.sender][isYes]\"\n                let _9 := mapping_index_access_mapping_bool_uint256_of_bool(expr_slot, expr_7)\n                /// @src 0:1282:1320  \"positions[msg.sender][isYes] -= amount\"\n                let _10 := read_from_storage_split_offset_uint256(_9)\n                let expr_8 := checked_sub_uint256(_10, expr_5)\n                update_storage_value_offset_uint256_to_uint256(_9, expr_8)\n                /// @src 0:1388:1393  \"isYes\"\n                let _11 := var_isYes\n                let expr_9 := _11\n                /// @src 0:1384:1543  \"if (isYes) {...\"\n                switch expr_9\n                case 0 {\n                    /// @src 0:1499:1502  \"100\"\n                    let expr_10 := 0x64\n                    /// @src 0:1487:1502  \"yesPrice += 100\"\n                    let _12 := convert_rational_by_to_uint32(expr_10)\n                    let _13 := read_from_storage_split_offset_t_uint32(0x00)\n                    let expr_11 := checked_add_uint32(_13, _12)\n                    update_storage_value_offset_t_uint32_to_t_uint32(0x00, expr_11)\n                    /// @src 0:1528:1531  \"100\"\n                    let expr_12 := 0x64\n                    /// @src 0:1517:1531  \"noPrice -= 100\"\n                    let _14 := convert_rational_by_to_uint32(expr_12)\n                    let _15 := read_from_storage_split_offset_uint32(0x00)\n                    let expr_13 := checked_sub_uint32(_15, _14)\n                    update_storage_value_offset_uint32_to_uint32(0x00, expr_13)\n                }\n                default /// @src 0:1384:1543  \"if (isYes) {...\"\n                {\n                    /// @src 0:1422:1425  \"100\"\n                    let expr_14 := 0x64\n                    /// @src 0:1410:1425  \"yesPrice -= 100\"\n                    let _16 := convert_rational_by_to_uint32(expr_14)\n                    let _17 := read_from_storage_split_offset_t_uint32(0x00)\n                    let expr_15 := checked_sub_uint32(_17, _16)\n                    update_storage_value_offset_t_uint32_to_t_uint32(0x00, expr_15)\n                    /// @src 0:1451:1454  \"100\"\n                    let expr_16 := 0x64\n                    /// @src 0:1440:1454  \"noPrice += 100\"\n                    let _18 := convert_rational_by_to_uint32(expr_16)\n                    let _19 := read_from_storage_split_offset_uint32(0x00)\n                    let expr_17 := checked_add_uint32(_19, _18)\n                    update_storage_value_offset_uint32_to_uint32(0x00, expr_17)\n                }\n                /// @src 0:1600:1610  \"msg.sender\"\n                let expr_18 := caller()\n                /// @src 0:1592:1611  \"payable(msg.sender)\"\n                let expr_19 := convert_address_to_address_payable(expr_18)\n                /// @src 0:1592:1620  \"payable(msg.sender).transfer\"\n                let expr_address := convert_address_payable_to_address(expr_19)\n                /// @src 0:1621:1627  \"amount\"\n                let _20 := var_amount\n                let expr_20 := _20\n                /// @src 0:1592:1628  \"payable(msg.sender).transfer(amount)\"\n                let _21 := 0\n                if iszero(expr_20) { _21 := 2300 }\n                let _22 := call(_21, expr_address, expr_20, 0, 0, 0, 0)\n                if iszero(_22) { revert_forward() }\n                /// @src 0:1667:1677  \"msg.sender\"\n                let expr_21 := caller()\n                /// @src 0:1679:1684  \"isYes\"\n                let _23 := var_isYes\n                let expr_22 := _23\n                /// @src 0:1686:1692  \"amount\"\n                let _24 := var_amount\n                let expr_23 := _24\n                /// @src 0:1654:1693  \"PositionSold(msg.sender, isYes, amount)\"\n                let _25 := 0xfbdb18150f1548f92bef14ec13aaca92a801ed96744042ab21a732e145b9b774\n                let _26 := allocate_unbounded()\n                let _27 := abi_encode_address_bool_uint256(_26, expr_21, expr_22, expr_23)\n                log1(_26, sub(_27, _26), _25)\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122095339a3bf2b0d1418ee13907adf652a106dff07875844691fbdcf5c8144b5f7564736f6c634300081c0033\"\n    }\n}\n",
					"hash": "ae5d047295c46b572ad1cf07e56bf2f94de743b675a1602c3909c275b2e2eea8",
					"factoryDependencies": {}
				}
			}
		},
		"sources": {
			"contracts/PredictionMarket.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "contracts/PredictionMarket.sol",
					"exportedSymbols": {
						"MiniPredictionMarket": [
							166
						]
					},
					"id": 167,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MiniPredictionMarket",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 166,
							"linearizedBaseContracts": [
								166
							],
							"name": "MiniPredictionMarket",
							"nameLocation": "69:20:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "50dfdbfb",
									"id": 4,
									"mutability": "mutable",
									"name": "yesPrice",
									"nameLocation": "157:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 166,
									"src": "143:29:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 2,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "143:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"hexValue": "35303030",
										"id": 3,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "168:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_5000_by_1",
											"typeString": "int_const 5000"
										},
										"value": "5000"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b066bc79",
									"id": 7,
									"mutability": "mutable",
									"name": "noPrice",
									"nameLocation": "203:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 166,
									"src": "189:28:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint32",
										"typeString": "uint32"
									},
									"typeName": {
										"id": 5,
										"name": "uint32",
										"nodeType": "ElementaryTypeName",
										"src": "189:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint32",
											"typeString": "uint32"
										}
									},
									"value": {
										"hexValue": "35303030",
										"id": 6,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "213:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_5000_by_1",
											"typeString": "int_const 5000"
										},
										"value": "5000"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "3fad9ae0",
									"id": 10,
									"mutability": "mutable",
									"name": "question",
									"nameLocation": "249:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 166,
									"src": "235:56:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 8,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "235:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": {
										"hexValue": "57696c6c2042544320726561636820243130304b20696e20323032353f",
										"id": 9,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "260:31:0",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_0eafa786afe5cb1742dc38f8be5af54e623d5006bce9d1cf3262e2cb1b219a13",
											"typeString": "literal_string \"Will BTC reach $100K in 2025?\""
										},
										"value": "Will BTC reach $100K in 2025?"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e494d2d4",
									"id": 16,
									"mutability": "mutable",
									"name": "positions",
									"nameLocation": "390:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 166,
									"src": "341:58:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bool_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(bool => uint256))"
									},
									"typeName": {
										"id": 15,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 11,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "349:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "341:41:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bool_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(bool => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 14,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 12,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "368:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"nodeType": "Mapping",
											"src": "360:21:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_bool_$_t_uint256_$",
												"typeString": "mapping(bool => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 13,
												"name": "uint",
												"nodeType": "ElementaryTypeName",
												"src": "376:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "ce33b1a575fb35da3d3f46cea9fa626686e5725921cff95e22f86d4727f71bd1",
									"id": 24,
									"name": "PositionBought",
									"nameLocation": "418:14:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 18,
												"indexed": false,
												"mutability": "mutable",
												"name": "buyer",
												"nameLocation": "441:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "433:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 17,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "433:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 20,
												"indexed": false,
												"mutability": "mutable",
												"name": "isYes",
												"nameLocation": "453:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "448:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 19,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "448:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "465:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "460:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 21,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "460:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "432:40:0"
									},
									"src": "412:61:0"
								},
								{
									"anonymous": false,
									"eventSelector": "fbdb18150f1548f92bef14ec13aaca92a801ed96744042ab21a732e145b9b774",
									"id": 32,
									"name": "PositionSold",
									"nameLocation": "485:12:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 26,
												"indexed": false,
												"mutability": "mutable",
												"name": "seller",
												"nameLocation": "506:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "498:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 25,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "498:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 28,
												"indexed": false,
												"mutability": "mutable",
												"name": "isYes",
												"nameLocation": "519:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "514:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 27,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "514:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 30,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "531:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "526:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 29,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "526:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "497:41:0"
									},
									"src": "479:60:0"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "622:438:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 38,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "641:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "645:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "641:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 40,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "653:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "641:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416d6f756e74206d75737420626520706f736974697665",
															"id": 42,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "656:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fbff1a1f6c2af74648d360c36de5f47b5c561797f493e9c58d33289d0ad24acc",
																"typeString": "literal_string \"Amount must be positive\""
															},
															"value": "Amount must be positive"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fbff1a1f6c2af74648d360c36de5f47b5c561797f493e9c58d33289d0ad24acc",
																"typeString": "literal_string \"Amount must be positive\""
															}
														],
														"id": 37,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "633:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 43,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "633:49:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 44,
												"nodeType": "ExpressionStatement",
												"src": "633:49:0"
											},
											{
												"expression": {
													"id": 53,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 45,
																"name": "positions",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 16,
																"src": "730:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bool_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(bool => uint256))"
																}
															},
															"id": 49,
															"indexExpression": {
																"expression": {
																	"id": 46,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "740:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 47,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "744:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "740:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "730:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bool_$_t_uint256_$",
																"typeString": "mapping(bool => uint256)"
															}
														},
														"id": 50,
														"indexExpression": {
															"id": 48,
															"name": "isYes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 34,
															"src": "752:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "730:28:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"expression": {
															"id": 51,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "762:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 52,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "766:5:0",
														"memberName": "value",
														"nodeType": "MemberAccess",
														"src": "762:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "730:41:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 54,
												"nodeType": "ExpressionStatement",
												"src": "730:41:0"
											},
											{
												"condition": {
													"id": 55,
													"name": "isYes",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 34,
													"src": "828:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 73,
													"nodeType": "Block",
													"src": "912:71:0",
													"statements": [
														{
															"expression": {
																"id": 67,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 65,
																	"name": "yesPrice",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4,
																	"src": "927:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "313030",
																	"id": 66,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "939:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "927:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"id": 68,
															"nodeType": "ExpressionStatement",
															"src": "927:15:0"
														},
														{
															"expression": {
																"id": 71,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 69,
																	"name": "noPrice",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 7,
																	"src": "957:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "313030",
																	"id": 70,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "968:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "957:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"id": 72,
															"nodeType": "ExpressionStatement",
															"src": "957:14:0"
														}
													]
												},
												"id": 74,
												"nodeType": "IfStatement",
												"src": "824:159:0",
												"trueBody": {
													"id": 64,
													"nodeType": "Block",
													"src": "835:71:0",
													"statements": [
														{
															"expression": {
																"id": 58,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 56,
																	"name": "yesPrice",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4,
																	"src": "850:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "313030",
																	"id": 57,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "862:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "850:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"id": 59,
															"nodeType": "ExpressionStatement",
															"src": "850:15:0"
														},
														{
															"expression": {
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 60,
																	"name": "noPrice",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 7,
																	"src": "880:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "313030",
																	"id": 61,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "891:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "880:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"id": 63,
															"nodeType": "ExpressionStatement",
															"src": "880:14:0"
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 76,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1023:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 77,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1027:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1023:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 78,
															"name": "isYes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 34,
															"src": "1035:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"expression": {
																"id": 79,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1042:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 80,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1046:5:0",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "1042:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 75,
														"name": "PositionBought",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "1008:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bool_$_t_uint256_$returns$__$",
															"typeString": "function (address,bool,uint256)"
														}
													},
													"id": 81,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1008:44:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 82,
												"nodeType": "EmitStatement",
												"src": "1003:49:0"
											}
										]
									},
									"functionSelector": "10b3f7be",
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "buyPosition",
									"nameLocation": "583:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 35,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 34,
												"mutability": "mutable",
												"name": "isYes",
												"nameLocation": "600:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 84,
												"src": "595:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 33,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "595:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "594:12:0"
									},
									"returnParameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "622:0:0"
									},
									"scope": 166,
									"src": "574:486:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 148,
										"nodeType": "Block",
										"src": "1150:551:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 99,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"baseExpression": {
																		"id": 92,
																		"name": "positions",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 16,
																		"src": "1169:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bool_$_t_uint256_$_$",
																			"typeString": "mapping(address => mapping(bool => uint256))"
																		}
																	},
																	"id": 95,
																	"indexExpression": {
																		"expression": {
																			"id": 93,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "1179:3:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 94,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1183:6:0",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "1179:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1169:21:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_bool_$_t_uint256_$",
																		"typeString": "mapping(bool => uint256)"
																	}
																},
																"id": 97,
																"indexExpression": {
																	"id": 96,
																	"name": "isYes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 86,
																	"src": "1191:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1169:28:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 98,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 88,
																"src": "1201:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1169:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e7420706f736974696f6e",
															"id": 100,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1209:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5a1b57fa73cacc8a7f779f13c41725105345b96ea20f4cc435b0cbf0d88a02b7",
																"typeString": "literal_string \"Insufficient position\""
															},
															"value": "Insufficient position"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5a1b57fa73cacc8a7f779f13c41725105345b96ea20f4cc435b0cbf0d88a02b7",
																"typeString": "literal_string \"Insufficient position\""
															}
														],
														"id": 91,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1161:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 101,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1161:72:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 102,
												"nodeType": "ExpressionStatement",
												"src": "1161:72:0"
											},
											{
												"expression": {
													"id": 110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 103,
																"name": "positions",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 16,
																"src": "1282:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bool_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(bool => uint256))"
																}
															},
															"id": 107,
															"indexExpression": {
																"expression": {
																	"id": 104,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1292:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 105,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1296:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1292:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "1282:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bool_$_t_uint256_$",
																"typeString": "mapping(bool => uint256)"
															}
														},
														"id": 108,
														"indexExpression": {
															"id": 106,
															"name": "isYes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "1304:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1282:28:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 109,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 88,
														"src": "1314:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1282:38:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 111,
												"nodeType": "ExpressionStatement",
												"src": "1282:38:0"
											},
											{
												"condition": {
													"id": 112,
													"name": "isYes",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 86,
													"src": "1388:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 130,
													"nodeType": "Block",
													"src": "1472:71:0",
													"statements": [
														{
															"expression": {
																"id": 124,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 122,
																	"name": "yesPrice",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4,
																	"src": "1487:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "313030",
																	"id": 123,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1499:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "1487:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"id": 125,
															"nodeType": "ExpressionStatement",
															"src": "1487:15:0"
														},
														{
															"expression": {
																"id": 128,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 126,
																	"name": "noPrice",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 7,
																	"src": "1517:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "313030",
																	"id": 127,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1528:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "1517:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"id": 129,
															"nodeType": "ExpressionStatement",
															"src": "1517:14:0"
														}
													]
												},
												"id": 131,
												"nodeType": "IfStatement",
												"src": "1384:159:0",
												"trueBody": {
													"id": 121,
													"nodeType": "Block",
													"src": "1395:71:0",
													"statements": [
														{
															"expression": {
																"id": 115,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 113,
																	"name": "yesPrice",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4,
																	"src": "1410:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "313030",
																	"id": 114,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1422:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "1410:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"id": 116,
															"nodeType": "ExpressionStatement",
															"src": "1410:15:0"
														},
														{
															"expression": {
																"id": 119,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 117,
																	"name": "noPrice",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 7,
																	"src": "1440:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint32",
																		"typeString": "uint32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "313030",
																	"id": 118,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1451:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_100_by_1",
																		"typeString": "int_const 100"
																	},
																	"value": "100"
																},
																"src": "1440:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint32",
																	"typeString": "uint32"
																}
															},
															"id": 120,
															"nodeType": "ExpressionStatement",
															"src": "1440:14:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 138,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 88,
															"src": "1621:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 134,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1600:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 135,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1604:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "1600:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 133,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1592:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 132,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1592:8:0",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 136,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1592:19:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 137,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1612:8:0",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "1592:28:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1592:36:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 140,
												"nodeType": "ExpressionStatement",
												"src": "1592:36:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 142,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1667:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 143,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1671:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1667:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 144,
															"name": "isYes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 86,
															"src": "1679:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 145,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 88,
															"src": "1686:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 141,
														"name": "PositionSold",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 32,
														"src": "1654:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bool_$_t_uint256_$returns$__$",
															"typeString": "function (address,bool,uint256)"
														}
													},
													"id": 146,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1654:39:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 147,
												"nodeType": "EmitStatement",
												"src": "1649:44:0"
											}
										]
									},
									"functionSelector": "c4f94352",
									"id": 149,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sellPosition",
									"nameLocation": "1105:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "isYes",
												"nameLocation": "1123:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "1118:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 85,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1118:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 88,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1135:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 149,
												"src": "1130:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 87,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1130:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1117:25:0"
									},
									"returnParameters": {
										"id": 90,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1150:0:0"
									},
									"scope": 166,
									"src": "1096:605:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 164,
										"nodeType": "Block",
										"src": "1817:48:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 158,
															"name": "positions",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 16,
															"src": "1835:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_bool_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(bool => uint256))"
															}
														},
														"id": 160,
														"indexExpression": {
															"id": 159,
															"name": "user",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 151,
															"src": "1845:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "1835:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_bool_$_t_uint256_$",
															"typeString": "mapping(bool => uint256)"
														}
													},
													"id": 162,
													"indexExpression": {
														"id": 161,
														"name": "isYes",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 153,
														"src": "1851:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1835:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 157,
												"id": 163,
												"nodeType": "Return",
												"src": "1828:29:0"
											}
										]
									},
									"functionSelector": "59985e23",
									"id": 165,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getUserPosition",
									"nameLocation": "1748:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 151,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "1772:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "1764:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 150,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1764:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "isYes",
												"nameLocation": "1783:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "1778:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 152,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1778:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1763:26:0"
									},
									"returnParameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 165,
												"src": "1811:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 155,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "1811:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1810:6:0"
									},
									"scope": 166,
									"src": "1739:126:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 167,
							"src": "60:1808:0",
							"usedErrors": [],
							"usedEvents": [
								24,
								32
							]
						}
					],
					"src": "33:1835:0"
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": null,
				"formattedMessage": "\nWarning: It looks like you are using '<address payable>.send/transfer(<X>)'.\nUsing '<address payable>.send/transfer(<X>)' is deprecated and strongly discouraged!\nThe resolc compiler uses a heuristic to detect '<address payable>.send/transfer(<X>)' calls,\nwhich disables call re-entrancy and supplies all remaining gas instead of the 2300 gas stipend.\nHowever, detection is not guaranteed. You are advised to carefully test this, employ\nre-entrancy guards or use the withdrawal pattern instead!\nLearn more on https://docs.soliditylang.org/en/latest/security-considerations.html#reentrancy\nand https://docs.soliditylang.org/en/latest/common-patterns.html#withdrawal-from-contracts\n\n--> contracts/PredictionMarket.sol\n",
				"message": "\nWarning: It looks like you are using '<address payable>.send/transfer(<X>)'.\nUsing '<address payable>.send/transfer(<X>)' is deprecated and strongly discouraged!\nThe resolc compiler uses a heuristic to detect '<address payable>.send/transfer(<X>)' calls,\nwhich disables call re-entrancy and supplies all remaining gas instead of the 2300 gas stipend.\nHowever, detection is not guaranteed. You are advised to carefully test this, employ\nre-entrancy guards or use the withdrawal pattern instead!\nLearn more on https://docs.soliditylang.org/en/latest/security-considerations.html#reentrancy\nand https://docs.soliditylang.org/en/latest/common-patterns.html#withdrawal-from-contracts\n",
				"severity": "warning",
				"sourceLocation": {
					"file": "0",
					"start": 1592,
					"end": 1628
				},
				"type": "Warning"
			}
		],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}